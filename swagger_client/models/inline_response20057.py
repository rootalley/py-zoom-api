# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20057(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'str',
        'robot_jid': 'str',
        'sent_time': 'datetime',
        'to_jid': 'str',
        'user_jid': 'str'
    }

    attribute_map = {
        'message_id': 'message_id',
        'robot_jid': 'robot_jid',
        'sent_time': 'sent_time',
        'to_jid': 'to_jid',
        'user_jid': 'user_jid'
    }

    def __init__(self, message_id=None, robot_jid=None, sent_time=None, to_jid=None, user_jid=None):  # noqa: E501
        """InlineResponse20057 - a model defined in Swagger"""  # noqa: E501
        self._message_id = None
        self._robot_jid = None
        self._sent_time = None
        self._to_jid = None
        self._user_jid = None
        self.discriminator = None
        if message_id is not None:
            self.message_id = message_id
        if robot_jid is not None:
            self.robot_jid = robot_jid
        if sent_time is not None:
            self.sent_time = sent_time
        if to_jid is not None:
            self.to_jid = to_jid
        if user_jid is not None:
            self.user_jid = user_jid

    @property
    def message_id(self):
        """Gets the message_id of this InlineResponse20057.  # noqa: E501

        Unique Identifier of the updated message,  # noqa: E501

        :return: The message_id of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this InlineResponse20057.

        Unique Identifier of the updated message,  # noqa: E501

        :param message_id: The message_id of this InlineResponse20057.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def robot_jid(self):
        """Gets the robot_jid of this InlineResponse20057.  # noqa: E501

        The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.  # noqa: E501

        :return: The robot_jid of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._robot_jid

    @robot_jid.setter
    def robot_jid(self, robot_jid):
        """Sets the robot_jid of this InlineResponse20057.

        The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.  # noqa: E501

        :param robot_jid: The robot_jid of this InlineResponse20057.  # noqa: E501
        :type: str
        """

        self._robot_jid = robot_jid

    @property
    def sent_time(self):
        """Gets the sent_time of this InlineResponse20057.  # noqa: E501

        The date and time at which the message was sent.  # noqa: E501

        :return: The sent_time of this InlineResponse20057.  # noqa: E501
        :rtype: datetime
        """
        return self._sent_time

    @sent_time.setter
    def sent_time(self, sent_time):
        """Sets the sent_time of this InlineResponse20057.

        The date and time at which the message was sent.  # noqa: E501

        :param sent_time: The sent_time of this InlineResponse20057.  # noqa: E501
        :type: datetime
        """

        self._sent_time = sent_time

    @property
    def to_jid(self):
        """Gets the to_jid of this InlineResponse20057.  # noqa: E501

        The JID of the Channel or User to whom the message was sent.  # noqa: E501

        :return: The to_jid of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._to_jid

    @to_jid.setter
    def to_jid(self, to_jid):
        """Sets the to_jid of this InlineResponse20057.

        The JID of the Channel or User to whom the message was sent.  # noqa: E501

        :param to_jid: The to_jid of this InlineResponse20057.  # noqa: E501
        :type: str
        """

        self._to_jid = to_jid

    @property
    def user_jid(self):
        """Gets the user_jid of this InlineResponse20057.  # noqa: E501

        The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.  # noqa: E501

        :return: The user_jid of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._user_jid

    @user_jid.setter
    def user_jid(self, user_jid):
        """Sets the user_jid of this InlineResponse20057.

        The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.  # noqa: E501

        :param user_jid: The user_jid of this InlineResponse20057.  # noqa: E501
        :type: str
        """

        self._user_jid = user_jid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20057, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20057):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
