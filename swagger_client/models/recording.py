# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Recording(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'meeting_id': 'str',
        'recording_start': 'str',
        'recording_end': 'str',
        'file_type': 'str',
        'file_size': 'float',
        'play_url': 'str',
        'download_url': 'str',
        'status': 'str',
        'deleted_time': 'str',
        'recording_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'meeting_id': 'meeting_id',
        'recording_start': 'recording_start',
        'recording_end': 'recording_end',
        'file_type': 'file_type',
        'file_size': 'file_size',
        'play_url': 'play_url',
        'download_url': 'download_url',
        'status': 'status',
        'deleted_time': 'deleted_time',
        'recording_type': 'recording_type'
    }

    def __init__(self, id=None, meeting_id=None, recording_start=None, recording_end=None, file_type=None, file_size=None, play_url=None, download_url=None, status=None, deleted_time=None, recording_type=None):  # noqa: E501
        """Recording - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._meeting_id = None
        self._recording_start = None
        self._recording_end = None
        self._file_type = None
        self._file_size = None
        self._play_url = None
        self._download_url = None
        self._status = None
        self._deleted_time = None
        self._recording_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if meeting_id is not None:
            self.meeting_id = meeting_id
        if recording_start is not None:
            self.recording_start = recording_start
        if recording_end is not None:
            self.recording_end = recording_end
        if file_type is not None:
            self.file_type = file_type
        if file_size is not None:
            self.file_size = file_size
        if play_url is not None:
            self.play_url = play_url
        if download_url is not None:
            self.download_url = download_url
        if status is not None:
            self.status = status
        if deleted_time is not None:
            self.deleted_time = deleted_time
        if recording_type is not None:
            self.recording_type = recording_type

    @property
    def id(self):
        """Gets the id of this Recording.  # noqa: E501

        The recording file ID. Included in the response of general query.  # noqa: E501

        :return: The id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Recording.

        The recording file ID. Included in the response of general query.  # noqa: E501

        :param id: The id of this Recording.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def meeting_id(self):
        """Gets the meeting_id of this Recording.  # noqa: E501

        The meeting ID.   # noqa: E501

        :return: The meeting_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """Sets the meeting_id of this Recording.

        The meeting ID.   # noqa: E501

        :param meeting_id: The meeting_id of this Recording.  # noqa: E501
        :type: str
        """

        self._meeting_id = meeting_id

    @property
    def recording_start(self):
        """Gets the recording_start of this Recording.  # noqa: E501

        The recording start time.  # noqa: E501

        :return: The recording_start of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._recording_start

    @recording_start.setter
    def recording_start(self, recording_start):
        """Sets the recording_start of this Recording.

        The recording start time.  # noqa: E501

        :param recording_start: The recording_start of this Recording.  # noqa: E501
        :type: str
        """

        self._recording_start = recording_start

    @property
    def recording_end(self):
        """Gets the recording_end of this Recording.  # noqa: E501

        The recording end time. Response in general query.  # noqa: E501

        :return: The recording_end of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._recording_end

    @recording_end.setter
    def recording_end(self, recording_end):
        """Sets the recording_end of this Recording.

        The recording end time. Response in general query.  # noqa: E501

        :param recording_end: The recording_end of this Recording.  # noqa: E501
        :type: str
        """

        self._recording_end = recording_end

    @property
    def file_type(self):
        """Gets the file_type of this Recording.  # noqa: E501

        The recording file type. The value of this field could be one of the following:<br> `MP4`: Video file of the recording.<br>`M4A` Audio-only file of the recording.<br>`TIMELINE`: Timestamp file of the recording. To get a timeline file, the \"Add a timestamp to the recording\" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile. <br> `TRANSCRIPT`: Transcription file of the recording.<br> `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>`CC`: File containing closed captions of the recording.<br><br> A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:<br>  `id`, `status`, `file_size`, `recording_type`, and `play_url`.  # noqa: E501

        :return: The file_type of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this Recording.

        The recording file type. The value of this field could be one of the following:<br> `MP4`: Video file of the recording.<br>`M4A` Audio-only file of the recording.<br>`TIMELINE`: Timestamp file of the recording. To get a timeline file, the \"Add a timestamp to the recording\" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile. <br> `TRANSCRIPT`: Transcription file of the recording.<br> `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>`CC`: File containing closed captions of the recording.<br><br> A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:<br>  `id`, `status`, `file_size`, `recording_type`, and `play_url`.  # noqa: E501

        :param file_type: The file_type of this Recording.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def file_size(self):
        """Gets the file_size of this Recording.  # noqa: E501

        The recording file size.  # noqa: E501

        :return: The file_size of this Recording.  # noqa: E501
        :rtype: float
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Recording.

        The recording file size.  # noqa: E501

        :param file_size: The file_size of this Recording.  # noqa: E501
        :type: float
        """

        self._file_size = file_size

    @property
    def play_url(self):
        """Gets the play_url of this Recording.  # noqa: E501

        The URL using which a recording file can be played.  # noqa: E501

        :return: The play_url of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._play_url

    @play_url.setter
    def play_url(self, play_url):
        """Sets the play_url of this Recording.

        The URL using which a recording file can be played.  # noqa: E501

        :param play_url: The play_url of this Recording.  # noqa: E501
        :type: str
        """

        self._play_url = play_url

    @property
    def download_url(self):
        """Gets the download_url of this Recording.  # noqa: E501

        The URL using which the recording file can be downloaded. **To access a private or password protected cloud recording of a user in your account, you can use a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the `access_token` query parameter and include this query parameter at the end of the URL as shown in the example.**   <br> Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ JWT Token }}`  **Similarly, if the user has installed your OAuth app that contains recording scope(s), you can also use the user's [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the Cloud Recording.**<br>  Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ OAuth Access Token }}`    # noqa: E501

        :return: The download_url of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Recording.

        The URL using which the recording file can be downloaded. **To access a private or password protected cloud recording of a user in your account, you can use a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the `access_token` query parameter and include this query parameter at the end of the URL as shown in the example.**   <br> Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ JWT Token }}`  **Similarly, if the user has installed your OAuth app that contains recording scope(s), you can also use the user's [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the Cloud Recording.**<br>  Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ OAuth Access Token }}`    # noqa: E501

        :param download_url: The download_url of this Recording.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def status(self):
        """Gets the status of this Recording.  # noqa: E501

        The recording status.  # noqa: E501

        :return: The status of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Recording.

        The recording status.  # noqa: E501

        :param status: The status of this Recording.  # noqa: E501
        :type: str
        """
        allowed_values = ["completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def deleted_time(self):
        """Gets the deleted_time of this Recording.  # noqa: E501

        The time at which recording was deleted. Returned in the response only for trash query.  # noqa: E501

        :return: The deleted_time of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._deleted_time

    @deleted_time.setter
    def deleted_time(self, deleted_time):
        """Sets the deleted_time of this Recording.

        The time at which recording was deleted. Returned in the response only for trash query.  # noqa: E501

        :param deleted_time: The deleted_time of this Recording.  # noqa: E501
        :type: str
        """

        self._deleted_time = deleted_time

    @property
    def recording_type(self):
        """Gets the recording_type of this Recording.  # noqa: E501

        The recording type. The value of this field can be one of the following:<br>`shared_screen_with_speaker_view(CC)`<br>`shared_screen_with_speaker_view`<br>`shared_screen_with_gallery_view`<br>`speaker_view`<br>`gallery_view`<br>`shared_screen`<br>`audio_only`<br>`audio_transcript`<br>`chat_file`<br>`TIMELINE`  # noqa: E501

        :return: The recording_type of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._recording_type

    @recording_type.setter
    def recording_type(self, recording_type):
        """Sets the recording_type of this Recording.

        The recording type. The value of this field can be one of the following:<br>`shared_screen_with_speaker_view(CC)`<br>`shared_screen_with_speaker_view`<br>`shared_screen_with_gallery_view`<br>`speaker_view`<br>`gallery_view`<br>`shared_screen`<br>`audio_only`<br>`audio_transcript`<br>`chat_file`<br>`TIMELINE`  # noqa: E501

        :param recording_type: The recording_type of this Recording.  # noqa: E501
        :type: str
        """

        self._recording_type = recording_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recording, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recording):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
