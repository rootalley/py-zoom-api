# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class QOSParticipant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'user_name': 'str',
        'device': 'str',
        'ip_address': 'str',
        'location': 'str',
        'join_time': 'datetime',
        'leave_time': 'datetime',
        'pc_name': 'str',
        'domain': 'str',
        'mac_addr': 'str',
        'harddisk_id': 'str',
        'version': 'str',
        'user_qos': 'list[QOSParticipantListUserQos]'
    }

    attribute_map = {
        'user_id': 'user_id',
        'user_name': 'user_name',
        'device': 'device',
        'ip_address': 'ip_address',
        'location': 'location',
        'join_time': 'join_time',
        'leave_time': 'leave_time',
        'pc_name': 'pc_name',
        'domain': 'domain',
        'mac_addr': 'mac_addr',
        'harddisk_id': 'harddisk_id',
        'version': 'version',
        'user_qos': 'user_qos'
    }

    def __init__(self, user_id=None, user_name=None, device=None, ip_address=None, location=None, join_time=None, leave_time=None, pc_name=None, domain=None, mac_addr=None, harddisk_id=None, version=None, user_qos=None):  # noqa: E501
        """QOSParticipant - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._user_name = None
        self._device = None
        self._ip_address = None
        self._location = None
        self._join_time = None
        self._leave_time = None
        self._pc_name = None
        self._domain = None
        self._mac_addr = None
        self._harddisk_id = None
        self._version = None
        self._user_qos = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if device is not None:
            self.device = device
        if ip_address is not None:
            self.ip_address = ip_address
        if location is not None:
            self.location = location
        if join_time is not None:
            self.join_time = join_time
        if leave_time is not None:
            self.leave_time = leave_time
        if pc_name is not None:
            self.pc_name = pc_name
        if domain is not None:
            self.domain = domain
        if mac_addr is not None:
            self.mac_addr = mac_addr
        if harddisk_id is not None:
            self.harddisk_id = harddisk_id
        if version is not None:
            self.version = version
        if user_qos is not None:
            self.user_qos = user_qos

    @property
    def user_id(self):
        """Gets the user_id of this QOSParticipant.  # noqa: E501

        Participant ID.  # noqa: E501

        :return: The user_id of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QOSParticipant.

        Participant ID.  # noqa: E501

        :param user_id: The user_id of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this QOSParticipant.  # noqa: E501

        Participant display name.  # noqa: E501

        :return: The user_name of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this QOSParticipant.

        Participant display name.  # noqa: E501

        :param user_name: The user_name of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def device(self):
        """Gets the device of this QOSParticipant.  # noqa: E501

        The type of device using which the participant joined the meeting.  # noqa: E501

        :return: The device of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this QOSParticipant.

        The type of device using which the participant joined the meeting.  # noqa: E501

        :param device: The device of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def ip_address(self):
        """Gets the ip_address of this QOSParticipant.  # noqa: E501

        Participant's IP address.  # noqa: E501

        :return: The ip_address of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this QOSParticipant.

        Participant's IP address.  # noqa: E501

        :param ip_address: The ip_address of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def location(self):
        """Gets the location of this QOSParticipant.  # noqa: E501

        Participant's location.  # noqa: E501

        :return: The location of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this QOSParticipant.

        Participant's location.  # noqa: E501

        :param location: The location of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def join_time(self):
        """Gets the join_time of this QOSParticipant.  # noqa: E501

        The time at which participant joined the meeting.  # noqa: E501

        :return: The join_time of this QOSParticipant.  # noqa: E501
        :rtype: datetime
        """
        return self._join_time

    @join_time.setter
    def join_time(self, join_time):
        """Sets the join_time of this QOSParticipant.

        The time at which participant joined the meeting.  # noqa: E501

        :param join_time: The join_time of this QOSParticipant.  # noqa: E501
        :type: datetime
        """

        self._join_time = join_time

    @property
    def leave_time(self):
        """Gets the leave_time of this QOSParticipant.  # noqa: E501

        The time at which participant left the meeting.  # noqa: E501

        :return: The leave_time of this QOSParticipant.  # noqa: E501
        :rtype: datetime
        """
        return self._leave_time

    @leave_time.setter
    def leave_time(self, leave_time):
        """Sets the leave_time of this QOSParticipant.

        The time at which participant left the meeting.  # noqa: E501

        :param leave_time: The leave_time of this QOSParticipant.  # noqa: E501
        :type: datetime
        """

        self._leave_time = leave_time

    @property
    def pc_name(self):
        """Gets the pc_name of this QOSParticipant.  # noqa: E501

        Participant's PC name.  # noqa: E501

        :return: The pc_name of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._pc_name

    @pc_name.setter
    def pc_name(self, pc_name):
        """Sets the pc_name of this QOSParticipant.

        Participant's PC name.  # noqa: E501

        :param pc_name: The pc_name of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._pc_name = pc_name

    @property
    def domain(self):
        """Gets the domain of this QOSParticipant.  # noqa: E501

        Participant's PC domain.  # noqa: E501

        :return: The domain of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this QOSParticipant.

        Participant's PC domain.  # noqa: E501

        :param domain: The domain of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def mac_addr(self):
        """Gets the mac_addr of this QOSParticipant.  # noqa: E501

        Participant's MAC address.  # noqa: E501

        :return: The mac_addr of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._mac_addr

    @mac_addr.setter
    def mac_addr(self, mac_addr):
        """Sets the mac_addr of this QOSParticipant.

        Participant's MAC address.  # noqa: E501

        :param mac_addr: The mac_addr of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._mac_addr = mac_addr

    @property
    def harddisk_id(self):
        """Gets the harddisk_id of this QOSParticipant.  # noqa: E501

        Participant's hard disk ID.  # noqa: E501

        :return: The harddisk_id of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._harddisk_id

    @harddisk_id.setter
    def harddisk_id(self, harddisk_id):
        """Sets the harddisk_id of this QOSParticipant.

        Participant's hard disk ID.  # noqa: E501

        :param harddisk_id: The harddisk_id of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._harddisk_id = harddisk_id

    @property
    def version(self):
        """Gets the version of this QOSParticipant.  # noqa: E501

        Participant's Zoom Client version.  # noqa: E501

        :return: The version of this QOSParticipant.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this QOSParticipant.

        Participant's Zoom Client version.  # noqa: E501

        :param version: The version of this QOSParticipant.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def user_qos(self):
        """Gets the user_qos of this QOSParticipant.  # noqa: E501

        Quality of service provided to the user.  # noqa: E501

        :return: The user_qos of this QOSParticipant.  # noqa: E501
        :rtype: list[QOSParticipantListUserQos]
        """
        return self._user_qos

    @user_qos.setter
    def user_qos(self, user_qos):
        """Sets the user_qos of this QOSParticipant.

        Quality of service provided to the user.  # noqa: E501

        :param user_qos: The user_qos of this QOSParticipant.  # noqa: E501
        :type: list[QOSParticipantListUserQos]
        """

        self._user_qos = user_qos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QOSParticipant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QOSParticipant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
