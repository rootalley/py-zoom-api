# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserSettingsInMeeting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'e2e_encryption': 'bool',
        'chat': 'bool',
        'private_chat': 'bool',
        'auto_saving_chat': 'bool',
        'entry_exit_chime': 'str',
        'record_play_voice': 'bool',
        'feedback': 'bool',
        'co_host': 'bool',
        'polling': 'bool',
        'attendee_on_hold': 'bool',
        'annotation': 'bool',
        'remote_control': 'bool',
        'non_verbal_feedback': 'bool',
        'breakout_room': 'bool',
        'remote_support': 'bool',
        'closed_caption': 'bool',
        'group_hd': 'bool',
        'virtual_background': 'bool',
        'far_end_camera_control': 'bool',
        'share_dual_camera': 'bool',
        'waiting_room': 'bool',
        'allow_live_streaming': 'bool',
        'workplace_by_facebook': 'bool',
        'custom_live_streaming_service': 'bool',
        'custom_service_instructions': 'str',
        'show_meeting_control_toolbar': 'bool',
        'custom_data_center_regions': 'bool',
        'data_center_regions': 'list[str]'
    }

    attribute_map = {
        'e2e_encryption': 'e2e_encryption',
        'chat': 'chat',
        'private_chat': 'private_chat',
        'auto_saving_chat': 'auto_saving_chat',
        'entry_exit_chime': 'entry_exit_chime',
        'record_play_voice': 'record_play_voice',
        'feedback': 'feedback',
        'co_host': 'co_host',
        'polling': 'polling',
        'attendee_on_hold': 'attendee_on_hold',
        'annotation': 'annotation',
        'remote_control': 'remote_control',
        'non_verbal_feedback': 'non_verbal_feedback',
        'breakout_room': 'breakout_room',
        'remote_support': 'remote_support',
        'closed_caption': 'closed_caption',
        'group_hd': 'group_hd',
        'virtual_background': 'virtual_background',
        'far_end_camera_control': 'far_end_camera_control',
        'share_dual_camera': 'share_dual_camera',
        'waiting_room': 'waiting_room',
        'allow_live_streaming': 'allow_live_streaming',
        'workplace_by_facebook': 'workplace_by_facebook',
        'custom_live_streaming_service': 'custom_live_streaming_service',
        'custom_service_instructions': 'custom_service_instructions',
        'show_meeting_control_toolbar': 'show_meeting_control_toolbar',
        'custom_data_center_regions': 'custom_data_center_regions',
        'data_center_regions': 'data_center_regions'
    }

    def __init__(self, e2e_encryption=None, chat=False, private_chat=False, auto_saving_chat=False, entry_exit_chime='all', record_play_voice=None, feedback=False, co_host=False, polling=False, attendee_on_hold=False, annotation=False, remote_control=False, non_verbal_feedback=False, breakout_room=False, remote_support=False, closed_caption=False, group_hd=False, virtual_background=False, far_end_camera_control=False, share_dual_camera=False, waiting_room=False, allow_live_streaming=None, workplace_by_facebook=None, custom_live_streaming_service=None, custom_service_instructions=None, show_meeting_control_toolbar=None, custom_data_center_regions=None, data_center_regions=None):  # noqa: E501
        """UserSettingsInMeeting - a model defined in Swagger"""  # noqa: E501
        self._e2e_encryption = None
        self._chat = None
        self._private_chat = None
        self._auto_saving_chat = None
        self._entry_exit_chime = None
        self._record_play_voice = None
        self._feedback = None
        self._co_host = None
        self._polling = None
        self._attendee_on_hold = None
        self._annotation = None
        self._remote_control = None
        self._non_verbal_feedback = None
        self._breakout_room = None
        self._remote_support = None
        self._closed_caption = None
        self._group_hd = None
        self._virtual_background = None
        self._far_end_camera_control = None
        self._share_dual_camera = None
        self._waiting_room = None
        self._allow_live_streaming = None
        self._workplace_by_facebook = None
        self._custom_live_streaming_service = None
        self._custom_service_instructions = None
        self._show_meeting_control_toolbar = None
        self._custom_data_center_regions = None
        self._data_center_regions = None
        self.discriminator = None
        if e2e_encryption is not None:
            self.e2e_encryption = e2e_encryption
        if chat is not None:
            self.chat = chat
        if private_chat is not None:
            self.private_chat = private_chat
        if auto_saving_chat is not None:
            self.auto_saving_chat = auto_saving_chat
        if entry_exit_chime is not None:
            self.entry_exit_chime = entry_exit_chime
        if record_play_voice is not None:
            self.record_play_voice = record_play_voice
        if feedback is not None:
            self.feedback = feedback
        if co_host is not None:
            self.co_host = co_host
        if polling is not None:
            self.polling = polling
        if attendee_on_hold is not None:
            self.attendee_on_hold = attendee_on_hold
        if annotation is not None:
            self.annotation = annotation
        if remote_control is not None:
            self.remote_control = remote_control
        if non_verbal_feedback is not None:
            self.non_verbal_feedback = non_verbal_feedback
        if breakout_room is not None:
            self.breakout_room = breakout_room
        if remote_support is not None:
            self.remote_support = remote_support
        if closed_caption is not None:
            self.closed_caption = closed_caption
        if group_hd is not None:
            self.group_hd = group_hd
        if virtual_background is not None:
            self.virtual_background = virtual_background
        if far_end_camera_control is not None:
            self.far_end_camera_control = far_end_camera_control
        if share_dual_camera is not None:
            self.share_dual_camera = share_dual_camera
        if waiting_room is not None:
            self.waiting_room = waiting_room
        if allow_live_streaming is not None:
            self.allow_live_streaming = allow_live_streaming
        if workplace_by_facebook is not None:
            self.workplace_by_facebook = workplace_by_facebook
        if custom_live_streaming_service is not None:
            self.custom_live_streaming_service = custom_live_streaming_service
        if custom_service_instructions is not None:
            self.custom_service_instructions = custom_service_instructions
        if show_meeting_control_toolbar is not None:
            self.show_meeting_control_toolbar = show_meeting_control_toolbar
        if custom_data_center_regions is not None:
            self.custom_data_center_regions = custom_data_center_regions
        if data_center_regions is not None:
            self.data_center_regions = data_center_regions

    @property
    def e2e_encryption(self):
        """Gets the e2e_encryption of this UserSettingsInMeeting.  # noqa: E501

        Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).  # noqa: E501

        :return: The e2e_encryption of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._e2e_encryption

    @e2e_encryption.setter
    def e2e_encryption(self, e2e_encryption):
        """Sets the e2e_encryption of this UserSettingsInMeeting.

        Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).  # noqa: E501

        :param e2e_encryption: The e2e_encryption of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._e2e_encryption = e2e_encryption

    @property
    def chat(self):
        """Gets the chat of this UserSettingsInMeeting.  # noqa: E501

        Enable chat during meeting for all participants.  # noqa: E501

        :return: The chat of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this UserSettingsInMeeting.

        Enable chat during meeting for all participants.  # noqa: E501

        :param chat: The chat of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._chat = chat

    @property
    def private_chat(self):
        """Gets the private_chat of this UserSettingsInMeeting.  # noqa: E501

        Enable 1:1 private chat between participants during meetings.  # noqa: E501

        :return: The private_chat of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._private_chat

    @private_chat.setter
    def private_chat(self, private_chat):
        """Sets the private_chat of this UserSettingsInMeeting.

        Enable 1:1 private chat between participants during meetings.  # noqa: E501

        :param private_chat: The private_chat of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._private_chat = private_chat

    @property
    def auto_saving_chat(self):
        """Gets the auto_saving_chat of this UserSettingsInMeeting.  # noqa: E501

        Auto save all in-meeting chats.  # noqa: E501

        :return: The auto_saving_chat of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._auto_saving_chat

    @auto_saving_chat.setter
    def auto_saving_chat(self, auto_saving_chat):
        """Sets the auto_saving_chat of this UserSettingsInMeeting.

        Auto save all in-meeting chats.  # noqa: E501

        :param auto_saving_chat: The auto_saving_chat of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._auto_saving_chat = auto_saving_chat

    @property
    def entry_exit_chime(self):
        """Gets the entry_exit_chime of this UserSettingsInMeeting.  # noqa: E501

        Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.  # noqa: E501

        :return: The entry_exit_chime of this UserSettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._entry_exit_chime

    @entry_exit_chime.setter
    def entry_exit_chime(self, entry_exit_chime):
        """Sets the entry_exit_chime of this UserSettingsInMeeting.

        Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.  # noqa: E501

        :param entry_exit_chime: The entry_exit_chime of this UserSettingsInMeeting.  # noqa: E501
        :type: str
        """
        allowed_values = ["host", "all", "none"]  # noqa: E501
        if entry_exit_chime not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_exit_chime` ({0}), must be one of {1}"  # noqa: E501
                .format(entry_exit_chime, allowed_values)
            )

        self._entry_exit_chime = entry_exit_chime

    @property
    def record_play_voice(self):
        """Gets the record_play_voice of this UserSettingsInMeeting.  # noqa: E501

        Record and play their own voice.  # noqa: E501

        :return: The record_play_voice of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._record_play_voice

    @record_play_voice.setter
    def record_play_voice(self, record_play_voice):
        """Sets the record_play_voice of this UserSettingsInMeeting.

        Record and play their own voice.  # noqa: E501

        :param record_play_voice: The record_play_voice of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._record_play_voice = record_play_voice

    @property
    def feedback(self):
        """Gets the feedback of this UserSettingsInMeeting.  # noqa: E501

        Enable option to send feedback to Zoom at the end of the meeting.  # noqa: E501

        :return: The feedback of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this UserSettingsInMeeting.

        Enable option to send feedback to Zoom at the end of the meeting.  # noqa: E501

        :param feedback: The feedback of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._feedback = feedback

    @property
    def co_host(self):
        """Gets the co_host of this UserSettingsInMeeting.  # noqa: E501

        Allow the host to add co-hosts.  # noqa: E501

        :return: The co_host of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._co_host

    @co_host.setter
    def co_host(self, co_host):
        """Sets the co_host of this UserSettingsInMeeting.

        Allow the host to add co-hosts.  # noqa: E501

        :param co_host: The co_host of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._co_host = co_host

    @property
    def polling(self):
        """Gets the polling of this UserSettingsInMeeting.  # noqa: E501

        Add polls to the meeting controls.  # noqa: E501

        :return: The polling of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._polling

    @polling.setter
    def polling(self, polling):
        """Sets the polling of this UserSettingsInMeeting.

        Add polls to the meeting controls.  # noqa: E501

        :param polling: The polling of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._polling = polling

    @property
    def attendee_on_hold(self):
        """Gets the attendee_on_hold of this UserSettingsInMeeting.  # noqa: E501

        Allow host to put attendee on hold.  # noqa: E501

        :return: The attendee_on_hold of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._attendee_on_hold

    @attendee_on_hold.setter
    def attendee_on_hold(self, attendee_on_hold):
        """Sets the attendee_on_hold of this UserSettingsInMeeting.

        Allow host to put attendee on hold.  # noqa: E501

        :param attendee_on_hold: The attendee_on_hold of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._attendee_on_hold = attendee_on_hold

    @property
    def annotation(self):
        """Gets the annotation of this UserSettingsInMeeting.  # noqa: E501

        Allow participants to use annotation tools.  # noqa: E501

        :return: The annotation of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this UserSettingsInMeeting.

        Allow participants to use annotation tools.  # noqa: E501

        :param annotation: The annotation of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._annotation = annotation

    @property
    def remote_control(self):
        """Gets the remote_control of this UserSettingsInMeeting.  # noqa: E501

        Enable remote control during screensharing.  # noqa: E501

        :return: The remote_control of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._remote_control

    @remote_control.setter
    def remote_control(self, remote_control):
        """Sets the remote_control of this UserSettingsInMeeting.

        Enable remote control during screensharing.  # noqa: E501

        :param remote_control: The remote_control of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._remote_control = remote_control

    @property
    def non_verbal_feedback(self):
        """Gets the non_verbal_feedback of this UserSettingsInMeeting.  # noqa: E501

        Enable non-verbal feedback through screens.  # noqa: E501

        :return: The non_verbal_feedback of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._non_verbal_feedback

    @non_verbal_feedback.setter
    def non_verbal_feedback(self, non_verbal_feedback):
        """Sets the non_verbal_feedback of this UserSettingsInMeeting.

        Enable non-verbal feedback through screens.  # noqa: E501

        :param non_verbal_feedback: The non_verbal_feedback of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._non_verbal_feedback = non_verbal_feedback

    @property
    def breakout_room(self):
        """Gets the breakout_room of this UserSettingsInMeeting.  # noqa: E501

        Allow host to split meeting participants into separate breakout rooms.  # noqa: E501

        :return: The breakout_room of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._breakout_room

    @breakout_room.setter
    def breakout_room(self, breakout_room):
        """Sets the breakout_room of this UserSettingsInMeeting.

        Allow host to split meeting participants into separate breakout rooms.  # noqa: E501

        :param breakout_room: The breakout_room of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._breakout_room = breakout_room

    @property
    def remote_support(self):
        """Gets the remote_support of this UserSettingsInMeeting.  # noqa: E501

        Allow host to provide 1:1 remote support to a participant.  # noqa: E501

        :return: The remote_support of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._remote_support

    @remote_support.setter
    def remote_support(self, remote_support):
        """Sets the remote_support of this UserSettingsInMeeting.

        Allow host to provide 1:1 remote support to a participant.  # noqa: E501

        :param remote_support: The remote_support of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._remote_support = remote_support

    @property
    def closed_caption(self):
        """Gets the closed_caption of this UserSettingsInMeeting.  # noqa: E501

        Enable closed captions.  # noqa: E501

        :return: The closed_caption of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._closed_caption

    @closed_caption.setter
    def closed_caption(self, closed_caption):
        """Sets the closed_caption of this UserSettingsInMeeting.

        Enable closed captions.  # noqa: E501

        :param closed_caption: The closed_caption of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._closed_caption = closed_caption

    @property
    def group_hd(self):
        """Gets the group_hd of this UserSettingsInMeeting.  # noqa: E501

        Enable group HD video.  # noqa: E501

        :return: The group_hd of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._group_hd

    @group_hd.setter
    def group_hd(self, group_hd):
        """Sets the group_hd of this UserSettingsInMeeting.

        Enable group HD video.  # noqa: E501

        :param group_hd: The group_hd of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._group_hd = group_hd

    @property
    def virtual_background(self):
        """Gets the virtual_background of this UserSettingsInMeeting.  # noqa: E501

        Enable virtual background.  # noqa: E501

        :return: The virtual_background of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._virtual_background

    @virtual_background.setter
    def virtual_background(self, virtual_background):
        """Sets the virtual_background of this UserSettingsInMeeting.

        Enable virtual background.  # noqa: E501

        :param virtual_background: The virtual_background of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._virtual_background = virtual_background

    @property
    def far_end_camera_control(self):
        """Gets the far_end_camera_control of this UserSettingsInMeeting.  # noqa: E501

        Allow another user to take control of the camera.  # noqa: E501

        :return: The far_end_camera_control of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._far_end_camera_control

    @far_end_camera_control.setter
    def far_end_camera_control(self, far_end_camera_control):
        """Sets the far_end_camera_control of this UserSettingsInMeeting.

        Allow another user to take control of the camera.  # noqa: E501

        :param far_end_camera_control: The far_end_camera_control of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._far_end_camera_control = far_end_camera_control

    @property
    def share_dual_camera(self):
        """Gets the share_dual_camera of this UserSettingsInMeeting.  # noqa: E501

        Share dual camera (deprecated).  # noqa: E501

        :return: The share_dual_camera of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._share_dual_camera

    @share_dual_camera.setter
    def share_dual_camera(self, share_dual_camera):
        """Sets the share_dual_camera of this UserSettingsInMeeting.

        Share dual camera (deprecated).  # noqa: E501

        :param share_dual_camera: The share_dual_camera of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._share_dual_camera = share_dual_camera

    @property
    def waiting_room(self):
        """Gets the waiting_room of this UserSettingsInMeeting.  # noqa: E501

        Enable Waiting room - if enabled, attendees can only join after host approves.  # noqa: E501

        :return: The waiting_room of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._waiting_room

    @waiting_room.setter
    def waiting_room(self, waiting_room):
        """Sets the waiting_room of this UserSettingsInMeeting.

        Enable Waiting room - if enabled, attendees can only join after host approves.  # noqa: E501

        :param waiting_room: The waiting_room of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._waiting_room = waiting_room

    @property
    def allow_live_streaming(self):
        """Gets the allow_live_streaming of this UserSettingsInMeeting.  # noqa: E501

        Allow live streaming.  # noqa: E501

        :return: The allow_live_streaming of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_live_streaming

    @allow_live_streaming.setter
    def allow_live_streaming(self, allow_live_streaming):
        """Sets the allow_live_streaming of this UserSettingsInMeeting.

        Allow live streaming.  # noqa: E501

        :param allow_live_streaming: The allow_live_streaming of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._allow_live_streaming = allow_live_streaming

    @property
    def workplace_by_facebook(self):
        """Gets the workplace_by_facebook of this UserSettingsInMeeting.  # noqa: E501

        Allow livestreaming by host through Workplace by Facebook.  # noqa: E501

        :return: The workplace_by_facebook of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._workplace_by_facebook

    @workplace_by_facebook.setter
    def workplace_by_facebook(self, workplace_by_facebook):
        """Sets the workplace_by_facebook of this UserSettingsInMeeting.

        Allow livestreaming by host through Workplace by Facebook.  # noqa: E501

        :param workplace_by_facebook: The workplace_by_facebook of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._workplace_by_facebook = workplace_by_facebook

    @property
    def custom_live_streaming_service(self):
        """Gets the custom_live_streaming_service of this UserSettingsInMeeting.  # noqa: E501

        Allow custom live streaming.  # noqa: E501

        :return: The custom_live_streaming_service of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._custom_live_streaming_service

    @custom_live_streaming_service.setter
    def custom_live_streaming_service(self, custom_live_streaming_service):
        """Sets the custom_live_streaming_service of this UserSettingsInMeeting.

        Allow custom live streaming.  # noqa: E501

        :param custom_live_streaming_service: The custom_live_streaming_service of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._custom_live_streaming_service = custom_live_streaming_service

    @property
    def custom_service_instructions(self):
        """Gets the custom_service_instructions of this UserSettingsInMeeting.  # noqa: E501

        Custom service instructions.  # noqa: E501

        :return: The custom_service_instructions of this UserSettingsInMeeting.  # noqa: E501
        :rtype: str
        """
        return self._custom_service_instructions

    @custom_service_instructions.setter
    def custom_service_instructions(self, custom_service_instructions):
        """Sets the custom_service_instructions of this UserSettingsInMeeting.

        Custom service instructions.  # noqa: E501

        :param custom_service_instructions: The custom_service_instructions of this UserSettingsInMeeting.  # noqa: E501
        :type: str
        """

        self._custom_service_instructions = custom_service_instructions

    @property
    def show_meeting_control_toolbar(self):
        """Gets the show_meeting_control_toolbar of this UserSettingsInMeeting.  # noqa: E501

        Always show meeting controls during a meeting.  # noqa: E501

        :return: The show_meeting_control_toolbar of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._show_meeting_control_toolbar

    @show_meeting_control_toolbar.setter
    def show_meeting_control_toolbar(self, show_meeting_control_toolbar):
        """Sets the show_meeting_control_toolbar of this UserSettingsInMeeting.

        Always show meeting controls during a meeting.  # noqa: E501

        :param show_meeting_control_toolbar: The show_meeting_control_toolbar of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._show_meeting_control_toolbar = show_meeting_control_toolbar

    @property
    def custom_data_center_regions(self):
        """Gets the custom_data_center_regions of this UserSettingsInMeeting.  # noqa: E501

        If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting your real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.  # noqa: E501

        :return: The custom_data_center_regions of this UserSettingsInMeeting.  # noqa: E501
        :rtype: bool
        """
        return self._custom_data_center_regions

    @custom_data_center_regions.setter
    def custom_data_center_regions(self, custom_data_center_regions):
        """Sets the custom_data_center_regions of this UserSettingsInMeeting.

        If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting your real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.  # noqa: E501

        :param custom_data_center_regions: The custom_data_center_regions of this UserSettingsInMeeting.  # noqa: E501
        :type: bool
        """

        self._custom_data_center_regions = custom_data_center_regions

    @property
    def data_center_regions(self):
        """Gets the data_center_regions of this UserSettingsInMeeting.  # noqa: E501

        If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: [\"EU\", \"HK\", \"AU\", \"IN\", \"LA\", \"TY\", \"CN\", \"US\", \"CA\"]).   # noqa: E501

        :return: The data_center_regions of this UserSettingsInMeeting.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_center_regions

    @data_center_regions.setter
    def data_center_regions(self, data_center_regions):
        """Sets the data_center_regions of this UserSettingsInMeeting.

        If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: [\"EU\", \"HK\", \"AU\", \"IN\", \"LA\", \"TY\", \"CN\", \"US\", \"CA\"]).   # noqa: E501

        :param data_center_regions: The data_center_regions of this UserSettingsInMeeting.  # noqa: E501
        :type: list[str]
        """

        self._data_center_regions = data_center_regions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettingsInMeeting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettingsInMeeting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
