# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'type': 'int',
        'role_name': 'str',
        'pmi': 'int',
        'use_pmi': 'bool',
        'timezone': 'str',
        'dept': 'str',
        'created_at': 'datetime',
        'last_login_time': 'datetime',
        'last_client_version': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'type': 'type',
        'role_name': 'role_name',
        'pmi': 'pmi',
        'use_pmi': 'use_pmi',
        'timezone': 'timezone',
        'dept': 'dept',
        'created_at': 'created_at',
        'last_login_time': 'last_login_time',
        'last_client_version': 'last_client_version'
    }

    def __init__(self, first_name=None, last_name=None, email='john.doe@email.com', type=None, role_name=None, pmi=None, use_pmi=False, timezone=None, dept=None, created_at=None, last_login_time=None, last_client_version=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._email = None
        self._type = None
        self._role_name = None
        self._pmi = None
        self._use_pmi = None
        self._timezone = None
        self._dept = None
        self._created_at = None
        self._last_login_time = None
        self._last_client_version = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.email = email
        self.type = type
        if role_name is not None:
            self.role_name = role_name
        if pmi is not None:
            self.pmi = pmi
        if use_pmi is not None:
            self.use_pmi = use_pmi
        if timezone is not None:
            self.timezone = timezone
        if dept is not None:
            self.dept = dept
        if created_at is not None:
            self.created_at = created_at
        if last_login_time is not None:
            self.last_login_time = last_login_time
        if last_client_version is not None:
            self.last_client_version = last_client_version

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        User's first name.  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        User's first name.  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        User's last name.  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        User's last name.  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        User's email address.  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        User's email address.  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def type(self):
        """Gets the type of this User.  # noqa: E501

        User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.  # noqa: E501

        :return: The type of this User.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this User.

        User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.  # noqa: E501

        :param type: The type of this User.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def role_name(self):
        """Gets the role_name of this User.  # noqa: E501

        User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name.  # noqa: E501

        :return: The role_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this User.

        User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name.  # noqa: E501

        :param role_name: The role_name of this User.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def pmi(self):
        """Gets the pmi of this User.  # noqa: E501

        Personal meeting ID.  # noqa: E501

        :return: The pmi of this User.  # noqa: E501
        :rtype: int
        """
        return self._pmi

    @pmi.setter
    def pmi(self, pmi):
        """Sets the pmi of this User.

        Personal meeting ID.  # noqa: E501

        :param pmi: The pmi of this User.  # noqa: E501
        :type: int
        """

        self._pmi = pmi

    @property
    def use_pmi(self):
        """Gets the use_pmi of this User.  # noqa: E501

        Use Personal Meeting ID for instant meetings.  # noqa: E501

        :return: The use_pmi of this User.  # noqa: E501
        :rtype: bool
        """
        return self._use_pmi

    @use_pmi.setter
    def use_pmi(self, use_pmi):
        """Sets the use_pmi of this User.

        Use Personal Meeting ID for instant meetings.  # noqa: E501

        :param use_pmi: The use_pmi of this User.  # noqa: E501
        :type: bool
        """

        self._use_pmi = use_pmi

    @property
    def timezone(self):
        """Gets the timezone of this User.  # noqa: E501

        The time zone of the user.  # noqa: E501

        :return: The timezone of this User.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this User.

        The time zone of the user.  # noqa: E501

        :param timezone: The timezone of this User.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def dept(self):
        """Gets the dept of this User.  # noqa: E501

        Department.  # noqa: E501

        :return: The dept of this User.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this User.

        Department.  # noqa: E501

        :param dept: The dept of this User.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501

        User create time.  # noqa: E501

        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        User create time.  # noqa: E501

        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_login_time(self):
        """Gets the last_login_time of this User.  # noqa: E501

        User last login time.  # noqa: E501

        :return: The last_login_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """Sets the last_login_time of this User.

        User last login time.  # noqa: E501

        :param last_login_time: The last_login_time of this User.  # noqa: E501
        :type: datetime
        """

        self._last_login_time = last_login_time

    @property
    def last_client_version(self):
        """Gets the last_client_version of this User.  # noqa: E501

        User last login client version.  # noqa: E501

        :return: The last_client_version of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_client_version

    @last_client_version.setter
    def last_client_version(self, last_client_version):
        """Sets the last_client_version of this User.

        User last login client version.  # noqa: E501

        :param last_client_version: The last_client_version of this User.  # noqa: E501
        :type: str
        """

        self._last_client_version = last_client_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
