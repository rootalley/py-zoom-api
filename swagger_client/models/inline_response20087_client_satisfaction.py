# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20087ClientSatisfaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'satisfaction_percent': 'int',
        'good_count': 'int',
        'not_good_count': 'int',
        'none_count': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'satisfaction_percent': 'satisfaction_percent',
        'good_count': 'good_count',
        'not_good_count': 'not_good_count',
        'none_count': 'none_count'
    }

    def __init__(self, _date=None, satisfaction_percent=None, good_count=None, not_good_count=None, none_count=None):  # noqa: E501
        """InlineResponse20087ClientSatisfaction - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._satisfaction_percent = None
        self._good_count = None
        self._not_good_count = None
        self._none_count = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if satisfaction_percent is not None:
            self.satisfaction_percent = satisfaction_percent
        if good_count is not None:
            self.good_count = good_count
        if not_good_count is not None:
            self.not_good_count = not_good_count
        if none_count is not None:
            self.none_count = none_count

    @property
    def _date(self):
        """Gets the _date of this InlineResponse20087ClientSatisfaction.  # noqa: E501

        Date of the report.  # noqa: E501

        :return: The _date of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse20087ClientSatisfaction.

        Date of the report.  # noqa: E501

        :param _date: The _date of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def satisfaction_percent(self):
        """Gets the satisfaction_percent of this InlineResponse20087ClientSatisfaction.  # noqa: E501

        Satisfaction Percentage. The satisfaction percentage is calculated as `(good_count + none_count)` / `total_count`.  # noqa: E501

        :return: The satisfaction_percent of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :rtype: int
        """
        return self._satisfaction_percent

    @satisfaction_percent.setter
    def satisfaction_percent(self, satisfaction_percent):
        """Sets the satisfaction_percent of this InlineResponse20087ClientSatisfaction.

        Satisfaction Percentage. The satisfaction percentage is calculated as `(good_count + none_count)` / `total_count`.  # noqa: E501

        :param satisfaction_percent: The satisfaction_percent of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :type: int
        """

        self._satisfaction_percent = satisfaction_percent

    @property
    def good_count(self):
        """Gets the good_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501

        The total number of \"thumbs up\" received for this meeting.  # noqa: E501

        :return: The good_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :rtype: int
        """
        return self._good_count

    @good_count.setter
    def good_count(self, good_count):
        """Sets the good_count of this InlineResponse20087ClientSatisfaction.

        The total number of \"thumbs up\" received for this meeting.  # noqa: E501

        :param good_count: The good_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :type: int
        """

        self._good_count = good_count

    @property
    def not_good_count(self):
        """Gets the not_good_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501

        The total number of \"thumbs down\" received for this meeting.  # noqa: E501

        :return: The not_good_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :rtype: int
        """
        return self._not_good_count

    @not_good_count.setter
    def not_good_count(self, not_good_count):
        """Sets the not_good_count of this InlineResponse20087ClientSatisfaction.

        The total number of \"thumbs down\" received for this meeting.  # noqa: E501

        :param not_good_count: The not_good_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :type: int
        """

        self._not_good_count = not_good_count

    @property
    def none_count(self):
        """Gets the none_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501

        The total number of attendees who didn't submit any response (neither thumbs up nor thumbs down).  # noqa: E501

        :return: The none_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :rtype: int
        """
        return self._none_count

    @none_count.setter
    def none_count(self, none_count):
        """Sets the none_count of this InlineResponse20087ClientSatisfaction.

        The total number of attendees who didn't submit any response (neither thumbs up nor thumbs down).  # noqa: E501

        :param none_count: The none_count of this InlineResponse20087ClientSatisfaction.  # noqa: E501
        :type: int
        """

        self._none_count = none_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20087ClientSatisfaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20087ClientSatisfaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
