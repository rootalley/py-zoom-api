# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20084InMeetingFiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'download_url': 'str',
        'file_size': 'int'
    }

    attribute_map = {
        'file_name': 'file_name',
        'download_url': 'download_url',
        'file_size': 'file_size'
    }

    def __init__(self, file_name=None, download_url=None, file_size=None):  # noqa: E501
        """InlineResponse20084InMeetingFiles - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._download_url = None
        self._file_size = None
        self.discriminator = None
        if file_name is not None:
            self.file_name = file_name
        if download_url is not None:
            self.download_url = download_url
        if file_size is not None:
            self.file_size = file_size

    @property
    def file_name(self):
        """Gets the file_name of this InlineResponse20084InMeetingFiles.  # noqa: E501

        Name of the file.  # noqa: E501

        :return: The file_name of this InlineResponse20084InMeetingFiles.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this InlineResponse20084InMeetingFiles.

        Name of the file.  # noqa: E501

        :param file_name: The file_name of this InlineResponse20084InMeetingFiles.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def download_url(self):
        """Gets the download_url of this InlineResponse20084InMeetingFiles.  # noqa: E501

        URL to download the file.  # noqa: E501

        :return: The download_url of this InlineResponse20084InMeetingFiles.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this InlineResponse20084InMeetingFiles.

        URL to download the file.  # noqa: E501

        :param download_url: The download_url of this InlineResponse20084InMeetingFiles.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def file_size(self):
        """Gets the file_size of this InlineResponse20084InMeetingFiles.  # noqa: E501

        Size of the file in bytes.  # noqa: E501

        :return: The file_size of this InlineResponse20084InMeetingFiles.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this InlineResponse20084InMeetingFiles.

        Size of the file in bytes.  # noqa: E501

        :param file_size: The file_size of this InlineResponse20084InMeetingFiles.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20084InMeetingFiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20084InMeetingFiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
