# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TrackingField3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'required': 'bool',
        'visible': 'bool',
        'recommended_values': 'list[str]'
    }

    attribute_map = {
        'field': 'field',
        'required': 'required',
        'visible': 'visible',
        'recommended_values': 'recommended_values'
    }

    def __init__(self, field=None, required=None, visible=None, recommended_values=None):  # noqa: E501
        """TrackingField3 - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._required = None
        self._visible = None
        self._recommended_values = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if required is not None:
            self.required = required
        if visible is not None:
            self.visible = visible
        if recommended_values is not None:
            self.recommended_values = recommended_values

    @property
    def field(self):
        """Gets the field of this TrackingField3.  # noqa: E501

        Label/ Name for the tracking field.  # noqa: E501

        :return: The field of this TrackingField3.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this TrackingField3.

        Label/ Name for the tracking field.  # noqa: E501

        :param field: The field of this TrackingField3.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def required(self):
        """Gets the required of this TrackingField3.  # noqa: E501

        Tracking Field Required  # noqa: E501

        :return: The required of this TrackingField3.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TrackingField3.

        Tracking Field Required  # noqa: E501

        :param required: The required of this TrackingField3.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def visible(self):
        """Gets the visible of this TrackingField3.  # noqa: E501

        Tracking Field Visible  # noqa: E501

        :return: The visible of this TrackingField3.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this TrackingField3.

        Tracking Field Visible  # noqa: E501

        :param visible: The visible of this TrackingField3.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def recommended_values(self):
        """Gets the recommended_values of this TrackingField3.  # noqa: E501

        Array of recommended values  # noqa: E501

        :return: The recommended_values of this TrackingField3.  # noqa: E501
        :rtype: list[str]
        """
        return self._recommended_values

    @recommended_values.setter
    def recommended_values(self, recommended_values):
        """Sets the recommended_values of this TrackingField3.

        Array of recommended values  # noqa: E501

        :param recommended_values: The recommended_values of this TrackingField3.  # noqa: E501
        :type: list[str]
        """

        self._recommended_values = recommended_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackingField3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackingField3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
