# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20034(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'date',
        'page_count': 'int',
        'page_number': 'int',
        'page_size': 'int',
        'to': 'date',
        'total_meeting_minutes': 'int',
        'total_meetings': 'int',
        'total_participants': 'int',
        'total_records': 'int',
        'users': 'list[InlineResponse20034Users]'
    }

    attribute_map = {
        '_from': 'from',
        'page_count': 'page_count',
        'page_number': 'page_number',
        'page_size': 'page_size',
        'to': 'to',
        'total_meeting_minutes': 'total_meeting_minutes',
        'total_meetings': 'total_meetings',
        'total_participants': 'total_participants',
        'total_records': 'total_records',
        'users': 'users'
    }

    def __init__(self, _from=None, page_count=None, page_number=None, page_size=None, to=None, total_meeting_minutes=None, total_meetings=None, total_participants=None, total_records=None, users=None):  # noqa: E501
        """InlineResponse20034 - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._page_count = None
        self._page_number = None
        self._page_size = None
        self._to = None
        self._total_meeting_minutes = None
        self._total_meetings = None
        self._total_participants = None
        self._total_records = None
        self._users = None
        self.discriminator = None
        if _from is not None:
            self._from = _from
        if page_count is not None:
            self.page_count = page_count
        if page_number is not None:
            self.page_number = page_number
        if page_size is not None:
            self.page_size = page_size
        if to is not None:
            self.to = to
        if total_meeting_minutes is not None:
            self.total_meeting_minutes = total_meeting_minutes
        if total_meetings is not None:
            self.total_meetings = total_meetings
        if total_participants is not None:
            self.total_participants = total_participants
        if total_records is not None:
            self.total_records = total_records
        if users is not None:
            self.users = users

    @property
    def _from(self):
        """Gets the _from of this InlineResponse20034.  # noqa: E501

        Start date for this report.  # noqa: E501

        :return: The _from of this InlineResponse20034.  # noqa: E501
        :rtype: date
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this InlineResponse20034.

        Start date for this report.  # noqa: E501

        :param _from: The _from of this InlineResponse20034.  # noqa: E501
        :type: date
        """

        self.__from = _from

    @property
    def page_count(self):
        """Gets the page_count of this InlineResponse20034.  # noqa: E501

        The number of pages returned for the request made.  # noqa: E501

        :return: The page_count of this InlineResponse20034.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this InlineResponse20034.

        The number of pages returned for the request made.  # noqa: E501

        :param page_count: The page_count of this InlineResponse20034.  # noqa: E501
        :type: int
        """

        self._page_count = page_count

    @property
    def page_number(self):
        """Gets the page_number of this InlineResponse20034.  # noqa: E501

        The page number of the current results.  # noqa: E501

        :return: The page_number of this InlineResponse20034.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this InlineResponse20034.

        The page number of the current results.  # noqa: E501

        :param page_number: The page_number of this InlineResponse20034.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this InlineResponse20034.  # noqa: E501

        The number of records returned with a single API call.  # noqa: E501

        :return: The page_size of this InlineResponse20034.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this InlineResponse20034.

        The number of records returned with a single API call.  # noqa: E501

        :param page_size: The page_size of this InlineResponse20034.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def to(self):
        """Gets the to of this InlineResponse20034.  # noqa: E501

        End date for this report.  # noqa: E501

        :return: The to of this InlineResponse20034.  # noqa: E501
        :rtype: date
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this InlineResponse20034.

        End date for this report.  # noqa: E501

        :param to: The to of this InlineResponse20034.  # noqa: E501
        :type: date
        """

        self._to = to

    @property
    def total_meeting_minutes(self):
        """Gets the total_meeting_minutes of this InlineResponse20034.  # noqa: E501

        Number of meeting minutes for this range.  # noqa: E501

        :return: The total_meeting_minutes of this InlineResponse20034.  # noqa: E501
        :rtype: int
        """
        return self._total_meeting_minutes

    @total_meeting_minutes.setter
    def total_meeting_minutes(self, total_meeting_minutes):
        """Sets the total_meeting_minutes of this InlineResponse20034.

        Number of meeting minutes for this range.  # noqa: E501

        :param total_meeting_minutes: The total_meeting_minutes of this InlineResponse20034.  # noqa: E501
        :type: int
        """

        self._total_meeting_minutes = total_meeting_minutes

    @property
    def total_meetings(self):
        """Gets the total_meetings of this InlineResponse20034.  # noqa: E501

        Number of meetings for this range.  # noqa: E501

        :return: The total_meetings of this InlineResponse20034.  # noqa: E501
        :rtype: int
        """
        return self._total_meetings

    @total_meetings.setter
    def total_meetings(self, total_meetings):
        """Sets the total_meetings of this InlineResponse20034.

        Number of meetings for this range.  # noqa: E501

        :param total_meetings: The total_meetings of this InlineResponse20034.  # noqa: E501
        :type: int
        """

        self._total_meetings = total_meetings

    @property
    def total_participants(self):
        """Gets the total_participants of this InlineResponse20034.  # noqa: E501

        Number of participants for this range.  # noqa: E501

        :return: The total_participants of this InlineResponse20034.  # noqa: E501
        :rtype: int
        """
        return self._total_participants

    @total_participants.setter
    def total_participants(self, total_participants):
        """Sets the total_participants of this InlineResponse20034.

        Number of participants for this range.  # noqa: E501

        :param total_participants: The total_participants of this InlineResponse20034.  # noqa: E501
        :type: int
        """

        self._total_participants = total_participants

    @property
    def total_records(self):
        """Gets the total_records of this InlineResponse20034.  # noqa: E501

        The total number of all the records available across pages.  # noqa: E501

        :return: The total_records of this InlineResponse20034.  # noqa: E501
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this InlineResponse20034.

        The total number of all the records available across pages.  # noqa: E501

        :param total_records: The total_records of this InlineResponse20034.  # noqa: E501
        :type: int
        """

        self._total_records = total_records

    @property
    def users(self):
        """Gets the users of this InlineResponse20034.  # noqa: E501

        Array of user objects.  # noqa: E501

        :return: The users of this InlineResponse20034.  # noqa: E501
        :rtype: list[InlineResponse20034Users]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this InlineResponse20034.

        Array of user objects.  # noqa: E501

        :param users: The users of this InlineResponse20034.  # noqa: E501
        :type: list[InlineResponse20034Users]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20034, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20034):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
