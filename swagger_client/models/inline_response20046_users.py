# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20046Users(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'type': 'int',
        'status': 'str',
        'pmi': 'int',
        'timezone': 'str',
        'dept': 'str',
        'created_at': 'datetime',
        'last_login_time': 'datetime',
        'last_client_version': 'str',
        'group_ids': 'list[str]',
        'im_group_ids': 'list[str]',
        'verified': 'int'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'type': 'type',
        'status': 'status',
        'pmi': 'pmi',
        'timezone': 'timezone',
        'dept': 'dept',
        'created_at': 'created_at',
        'last_login_time': 'last_login_time',
        'last_client_version': 'last_client_version',
        'group_ids': 'group_ids',
        'im_group_ids': 'im_group_ids',
        'verified': 'verified'
    }

    def __init__(self, id=None, first_name=None, last_name=None, email='john.doe@gmail.com', type=None, status=None, pmi=None, timezone=None, dept=None, created_at=None, last_login_time=None, last_client_version=None, group_ids=None, im_group_ids=None, verified=None):  # noqa: E501
        """InlineResponse20046Users - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._type = None
        self._status = None
        self._pmi = None
        self._timezone = None
        self._dept = None
        self._created_at = None
        self._last_login_time = None
        self._last_client_version = None
        self._group_ids = None
        self._im_group_ids = None
        self._verified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.email = email
        self.type = type
        if status is not None:
            self.status = status
        if pmi is not None:
            self.pmi = pmi
        if timezone is not None:
            self.timezone = timezone
        if dept is not None:
            self.dept = dept
        if created_at is not None:
            self.created_at = created_at
        if last_login_time is not None:
            self.last_login_time = last_login_time
        if last_client_version is not None:
            self.last_client_version = last_client_version
        if group_ids is not None:
            self.group_ids = group_ids
        if im_group_ids is not None:
            self.im_group_ids = im_group_ids
        if verified is not None:
            self.verified = verified

    @property
    def id(self):
        """Gets the id of this InlineResponse20046Users.  # noqa: E501

        User ID.  # noqa: E501

        :return: The id of this InlineResponse20046Users.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20046Users.

        User ID.  # noqa: E501

        :param id: The id of this InlineResponse20046Users.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this InlineResponse20046Users.  # noqa: E501

        User's first name.  # noqa: E501

        :return: The first_name of this InlineResponse20046Users.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InlineResponse20046Users.

        User's first name.  # noqa: E501

        :param first_name: The first_name of this InlineResponse20046Users.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this InlineResponse20046Users.  # noqa: E501

        User's last name.  # noqa: E501

        :return: The last_name of this InlineResponse20046Users.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InlineResponse20046Users.

        User's last name.  # noqa: E501

        :param last_name: The last_name of this InlineResponse20046Users.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this InlineResponse20046Users.  # noqa: E501

        User's email address.  # noqa: E501

        :return: The email of this InlineResponse20046Users.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20046Users.

        User's email address.  # noqa: E501

        :param email: The email of this InlineResponse20046Users.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def type(self):
        """Gets the type of this InlineResponse20046Users.  # noqa: E501

        User's plan type.<br> `1` - Basic.<br> `2` - Licensed.<br> `3` - On-prem.   # noqa: E501

        :return: The type of this InlineResponse20046Users.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20046Users.

        User's plan type.<br> `1` - Basic.<br> `2` - Licensed.<br> `3` - On-prem.   # noqa: E501

        :param type: The type of this InlineResponse20046Users.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def status(self):
        """Gets the status of this InlineResponse20046Users.  # noqa: E501

        User's status  # noqa: E501

        :return: The status of this InlineResponse20046Users.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20046Users.

        User's status  # noqa: E501

        :param status: The status of this InlineResponse20046Users.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def pmi(self):
        """Gets the pmi of this InlineResponse20046Users.  # noqa: E501

        Personal meeting ID of the user.  # noqa: E501

        :return: The pmi of this InlineResponse20046Users.  # noqa: E501
        :rtype: int
        """
        return self._pmi

    @pmi.setter
    def pmi(self, pmi):
        """Sets the pmi of this InlineResponse20046Users.

        Personal meeting ID of the user.  # noqa: E501

        :param pmi: The pmi of this InlineResponse20046Users.  # noqa: E501
        :type: int
        """

        self._pmi = pmi

    @property
    def timezone(self):
        """Gets the timezone of this InlineResponse20046Users.  # noqa: E501

        The time zone of the user.  # noqa: E501

        :return: The timezone of this InlineResponse20046Users.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this InlineResponse20046Users.

        The time zone of the user.  # noqa: E501

        :param timezone: The timezone of this InlineResponse20046Users.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def dept(self):
        """Gets the dept of this InlineResponse20046Users.  # noqa: E501

        Department, if provided by the user.  # noqa: E501

        :return: The dept of this InlineResponse20046Users.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this InlineResponse20046Users.

        Department, if provided by the user.  # noqa: E501

        :param dept: The dept of this InlineResponse20046Users.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20046Users.  # noqa: E501

        The time when user's account was created.  # noqa: E501

        :return: The created_at of this InlineResponse20046Users.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20046Users.

        The time when user's account was created.  # noqa: E501

        :param created_at: The created_at of this InlineResponse20046Users.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_login_time(self):
        """Gets the last_login_time of this InlineResponse20046Users.  # noqa: E501

        User's last login time. There is a three-days buffer period for this field. For example, if user first logged in on 2020-01-01 and then logged out and logged in on 2020-01-02, the value of this field will still reflect the login time of 2020-01-01. However, if the user logs in on 2020-01-04, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period.  # noqa: E501

        :return: The last_login_time of this InlineResponse20046Users.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """Sets the last_login_time of this InlineResponse20046Users.

        User's last login time. There is a three-days buffer period for this field. For example, if user first logged in on 2020-01-01 and then logged out and logged in on 2020-01-02, the value of this field will still reflect the login time of 2020-01-01. However, if the user logs in on 2020-01-04, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period.  # noqa: E501

        :param last_login_time: The last_login_time of this InlineResponse20046Users.  # noqa: E501
        :type: datetime
        """

        self._last_login_time = last_login_time

    @property
    def last_client_version(self):
        """Gets the last_client_version of this InlineResponse20046Users.  # noqa: E501

        The last client version that user used to login.  # noqa: E501

        :return: The last_client_version of this InlineResponse20046Users.  # noqa: E501
        :rtype: str
        """
        return self._last_client_version

    @last_client_version.setter
    def last_client_version(self, last_client_version):
        """Sets the last_client_version of this InlineResponse20046Users.

        The last client version that user used to login.  # noqa: E501

        :param last_client_version: The last_client_version of this InlineResponse20046Users.  # noqa: E501
        :type: str
        """

        self._last_client_version = last_client_version

    @property
    def group_ids(self):
        """Gets the group_ids of this InlineResponse20046Users.  # noqa: E501

        IDs of groups where the user is a member.  # noqa: E501

        :return: The group_ids of this InlineResponse20046Users.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this InlineResponse20046Users.

        IDs of groups where the user is a member.  # noqa: E501

        :param group_ids: The group_ids of this InlineResponse20046Users.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def im_group_ids(self):
        """Gets the im_group_ids of this InlineResponse20046Users.  # noqa: E501

        IDs of IM directory groups where the user is a member.  # noqa: E501

        :return: The im_group_ids of this InlineResponse20046Users.  # noqa: E501
        :rtype: list[str]
        """
        return self._im_group_ids

    @im_group_ids.setter
    def im_group_ids(self, im_group_ids):
        """Sets the im_group_ids of this InlineResponse20046Users.

        IDs of IM directory groups where the user is a member.  # noqa: E501

        :param im_group_ids: The im_group_ids of this InlineResponse20046Users.  # noqa: E501
        :type: list[str]
        """

        self._im_group_ids = im_group_ids

    @property
    def verified(self):
        """Gets the verified of this InlineResponse20046Users.  # noqa: E501

        Display whether the user's email address for the Zoom account is verified or not. <br> `1` - Verified user email.<br> `0` - User's email not verified.  # noqa: E501

        :return: The verified of this InlineResponse20046Users.  # noqa: E501
        :rtype: int
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this InlineResponse20046Users.

        Display whether the user's email address for the Zoom account is verified or not. <br> `1` - Verified user email.<br> `0` - User's email not verified.  # noqa: E501

        :param verified: The verified of this InlineResponse20046Users.  # noqa: E501
        :type: int
        """

        self._verified = verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20046Users, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20046Users):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
