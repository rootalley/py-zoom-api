# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20061(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'phone_user_id': 'str',
        'email': 'str',
        'calling_plan': 'list[InlineResponse20061CallingPlan]',
        'phone_numbers': 'list[InlineResponse20061PhoneNumbers]',
        'extension_number': 'int',
        'status': 'str',
        'site_id': 'str',
        'site_admin': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'phone_user_id': 'phone_user_id',
        'email': 'email',
        'calling_plan': 'calling_plan',
        'phone_numbers': 'phone_numbers',
        'extension_number': 'extension_number',
        'status': 'status',
        'site_id': 'site_id',
        'site_admin': 'site_admin'
    }

    def __init__(self, id=None, phone_user_id=None, email=None, calling_plan=None, phone_numbers=None, extension_number=None, status=None, site_id=None, site_admin=None):  # noqa: E501
        """InlineResponse20061 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._phone_user_id = None
        self._email = None
        self._calling_plan = None
        self._phone_numbers = None
        self._extension_number = None
        self._status = None
        self._site_id = None
        self._site_admin = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if phone_user_id is not None:
            self.phone_user_id = phone_user_id
        if email is not None:
            self.email = email
        if calling_plan is not None:
            self.calling_plan = calling_plan
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if extension_number is not None:
            self.extension_number = extension_number
        if status is not None:
            self.status = status
        if site_id is not None:
            self.site_id = site_id
        if site_admin is not None:
            self.site_admin = site_admin

    @property
    def id(self):
        """Gets the id of this InlineResponse20061.  # noqa: E501

        Zoom User Id.  # noqa: E501

        :return: The id of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20061.

        Zoom User Id.  # noqa: E501

        :param id: The id of this InlineResponse20061.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def phone_user_id(self):
        """Gets the phone_user_id of this InlineResponse20061.  # noqa: E501

        Zoom Phone User Id.  # noqa: E501

        :return: The phone_user_id of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._phone_user_id

    @phone_user_id.setter
    def phone_user_id(self, phone_user_id):
        """Sets the phone_user_id of this InlineResponse20061.

        Zoom Phone User Id.  # noqa: E501

        :param phone_user_id: The phone_user_id of this InlineResponse20061.  # noqa: E501
        :type: str
        """

        self._phone_user_id = phone_user_id

    @property
    def email(self):
        """Gets the email of this InlineResponse20061.  # noqa: E501

        Email address of the user.  # noqa: E501

        :return: The email of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20061.

        Email address of the user.  # noqa: E501

        :param email: The email of this InlineResponse20061.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def calling_plan(self):
        """Gets the calling_plan of this InlineResponse20061.  # noqa: E501

        Calling Plan of the user  # noqa: E501

        :return: The calling_plan of this InlineResponse20061.  # noqa: E501
        :rtype: list[InlineResponse20061CallingPlan]
        """
        return self._calling_plan

    @calling_plan.setter
    def calling_plan(self, calling_plan):
        """Sets the calling_plan of this InlineResponse20061.

        Calling Plan of the user  # noqa: E501

        :param calling_plan: The calling_plan of this InlineResponse20061.  # noqa: E501
        :type: list[InlineResponse20061CallingPlan]
        """

        self._calling_plan = calling_plan

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this InlineResponse20061.  # noqa: E501


        :return: The phone_numbers of this InlineResponse20061.  # noqa: E501
        :rtype: list[InlineResponse20061PhoneNumbers]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this InlineResponse20061.


        :param phone_numbers: The phone_numbers of this InlineResponse20061.  # noqa: E501
        :type: list[InlineResponse20061PhoneNumbers]
        """

        self._phone_numbers = phone_numbers

    @property
    def extension_number(self):
        """Gets the extension_number of this InlineResponse20061.  # noqa: E501

        Extension number  # noqa: E501

        :return: The extension_number of this InlineResponse20061.  # noqa: E501
        :rtype: int
        """
        return self._extension_number

    @extension_number.setter
    def extension_number(self, extension_number):
        """Sets the extension_number of this InlineResponse20061.

        Extension number  # noqa: E501

        :param extension_number: The extension_number of this InlineResponse20061.  # noqa: E501
        :type: int
        """

        self._extension_number = extension_number

    @property
    def status(self):
        """Gets the status of this InlineResponse20061.  # noqa: E501

        The status of the user.<br> `activate`: An active user. <br> `deactivate`: User has been deactivated from the ZoomPhone system.  # noqa: E501

        :return: The status of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20061.

        The status of the user.<br> `activate`: An active user. <br> `deactivate`: User has been deactivated from the ZoomPhone system.  # noqa: E501

        :param status: The status of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        allowed_values = ["activate", "deactivate"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def site_id(self):
        """Gets the site_id of this InlineResponse20061.  # noqa: E501

        Unique Identifier for a [site](https://support.zoom.us/hc/en-us/articles/360020809672).  # noqa: E501

        :return: The site_id of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this InlineResponse20061.

        Unique Identifier for a [site](https://support.zoom.us/hc/en-us/articles/360020809672).  # noqa: E501

        :param site_id: The site_id of this InlineResponse20061.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def site_admin(self):
        """Gets the site_admin of this InlineResponse20061.  # noqa: E501

        Indicates whether the user is a [site admin](https://support.zoom.us/hc/en-us/articles/360042099012) or not.  # noqa: E501

        :return: The site_admin of this InlineResponse20061.  # noqa: E501
        :rtype: bool
        """
        return self._site_admin

    @site_admin.setter
    def site_admin(self, site_admin):
        """Sets the site_admin of this InlineResponse20061.

        Indicates whether the user is a [site admin](https://support.zoom.us/hc/en-us/articles/360042099012) or not.  # noqa: E501

        :param site_admin: The site_admin of this InlineResponse20061.  # noqa: E501
        :type: bool
        """

        self._site_admin = site_admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20061, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20061):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
