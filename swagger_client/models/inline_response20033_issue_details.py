# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20033IssueDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue': 'str',
        'time': 'datetime'
    }

    attribute_map = {
        'issue': 'issue',
        'time': 'time'
    }

    def __init__(self, issue=None, time=None):  # noqa: E501
        """InlineResponse20033IssueDetails - a model defined in Swagger"""  # noqa: E501
        self._issue = None
        self._time = None
        self.discriminator = None
        if issue is not None:
            self.issue = issue
        if time is not None:
            self.time = time

    @property
    def issue(self):
        """Gets the issue of this InlineResponse20033IssueDetails.  # noqa: E501

        Zoom Room Issue Detail.<br> The value of the this field could be one of the following:<br> * `Room Controller disconnected`<br> * `Room Controller connected` * `Selected camera has disconnected` * `Selected camera is reconnected` * `Selected microphone has disconnected` * `Selected microphone is reconnected` * `Selected speaker has disconnected` * `Selected speaker is reconnected` * `Zoom room is offline` * `Zoom room is online` * `High CPU usage is detected` * `Low bandwidth network is detected` * `{name} battery is low` * `{name} battery is normal` * `{name} disconnected` * `{name} connected` * `{name} is not charging`  Possible values for {name}: <br> * Zoom Rooms Computer  * Controller * Scheduling Display  # noqa: E501

        :return: The issue of this InlineResponse20033IssueDetails.  # noqa: E501
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this InlineResponse20033IssueDetails.

        Zoom Room Issue Detail.<br> The value of the this field could be one of the following:<br> * `Room Controller disconnected`<br> * `Room Controller connected` * `Selected camera has disconnected` * `Selected camera is reconnected` * `Selected microphone has disconnected` * `Selected microphone is reconnected` * `Selected speaker has disconnected` * `Selected speaker is reconnected` * `Zoom room is offline` * `Zoom room is online` * `High CPU usage is detected` * `Low bandwidth network is detected` * `{name} battery is low` * `{name} battery is normal` * `{name} disconnected` * `{name} connected` * `{name} is not charging`  Possible values for {name}: <br> * Zoom Rooms Computer  * Controller * Scheduling Display  # noqa: E501

        :param issue: The issue of this InlineResponse20033IssueDetails.  # noqa: E501
        :type: str
        """

        self._issue = issue

    @property
    def time(self):
        """Gets the time of this InlineResponse20033IssueDetails.  # noqa: E501

        Time at which the issue was encountered.  # noqa: E501

        :return: The time of this InlineResponse20033IssueDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse20033IssueDetails.

        Time at which the issue was encountered.  # noqa: E501

        :param time: The time of this InlineResponse20033IssueDetails.  # noqa: E501
        :type: datetime
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20033IssueDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20033IssueDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
