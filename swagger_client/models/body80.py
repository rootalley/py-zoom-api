# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body80(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'type': 'int',
        'pmi': 'int',
        'use_pmi': 'bool',
        'timezone': 'str',
        'language': 'str',
        'dept': 'str',
        'vanity_name': 'str',
        'host_key': 'str',
        'cms_user_id': 'str',
        'job_title': 'str',
        'company': 'str',
        'location': 'str',
        'phone_number': 'str',
        'phone_country': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'type': 'type',
        'pmi': 'pmi',
        'use_pmi': 'use_pmi',
        'timezone': 'timezone',
        'language': 'language',
        'dept': 'dept',
        'vanity_name': 'vanity_name',
        'host_key': 'host_key',
        'cms_user_id': 'cms_user_id',
        'job_title': 'job_title',
        'company': 'company',
        'location': 'location',
        'phone_number': 'phone_number',
        'phone_country': 'phone_country'
    }

    def __init__(self, first_name=None, last_name=None, type=None, pmi=None, use_pmi=False, timezone=None, language=None, dept=None, vanity_name=None, host_key=None, cms_user_id=None, job_title=None, company=None, location=None, phone_number=None, phone_country=None):  # noqa: E501
        """Body80 - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._type = None
        self._pmi = None
        self._use_pmi = None
        self._timezone = None
        self._language = None
        self._dept = None
        self._vanity_name = None
        self._host_key = None
        self._cms_user_id = None
        self._job_title = None
        self._company = None
        self._location = None
        self._phone_number = None
        self._phone_country = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if type is not None:
            self.type = type
        if pmi is not None:
            self.pmi = pmi
        if use_pmi is not None:
            self.use_pmi = use_pmi
        if timezone is not None:
            self.timezone = timezone
        if language is not None:
            self.language = language
        if dept is not None:
            self.dept = dept
        if vanity_name is not None:
            self.vanity_name = vanity_name
        if host_key is not None:
            self.host_key = host_key
        if cms_user_id is not None:
            self.cms_user_id = cms_user_id
        if job_title is not None:
            self.job_title = job_title
        if company is not None:
            self.company = company
        if location is not None:
            self.location = location
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_country is not None:
            self.phone_country = phone_country

    @property
    def first_name(self):
        """Gets the first_name of this Body80.  # noqa: E501

        User's first name. Cannot contain more than 5 Chinese characters.  # noqa: E501

        :return: The first_name of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Body80.

        User's first name. Cannot contain more than 5 Chinese characters.  # noqa: E501

        :param first_name: The first_name of this Body80.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Body80.  # noqa: E501

        User's last name. Cannot contain more than 5 Chinese characters.  # noqa: E501

        :return: The last_name of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Body80.

        User's last name. Cannot contain more than 5 Chinese characters.  # noqa: E501

        :param last_name: The last_name of this Body80.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def type(self):
        """Gets the type of this Body80.  # noqa: E501

        User types:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.  # noqa: E501

        :return: The type of this Body80.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Body80.

        User types:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.  # noqa: E501

        :param type: The type of this Body80.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def pmi(self):
        """Gets the pmi of this Body80.  # noqa: E501

        Personal meeting ID: length must be 10.  # noqa: E501

        :return: The pmi of this Body80.  # noqa: E501
        :rtype: int
        """
        return self._pmi

    @pmi.setter
    def pmi(self, pmi):
        """Sets the pmi of this Body80.

        Personal meeting ID: length must be 10.  # noqa: E501

        :param pmi: The pmi of this Body80.  # noqa: E501
        :type: int
        """

        self._pmi = pmi

    @property
    def use_pmi(self):
        """Gets the use_pmi of this Body80.  # noqa: E501

        Use Personal Meeting ID for instant meetings.  # noqa: E501

        :return: The use_pmi of this Body80.  # noqa: E501
        :rtype: bool
        """
        return self._use_pmi

    @use_pmi.setter
    def use_pmi(self, use_pmi):
        """Sets the use_pmi of this Body80.

        Use Personal Meeting ID for instant meetings.  # noqa: E501

        :param use_pmi: The use_pmi of this Body80.  # noqa: E501
        :type: bool
        """

        self._use_pmi = use_pmi

    @property
    def timezone(self):
        """Gets the timezone of this Body80.  # noqa: E501

        The time zone ID for a user profile. For this parameter value please refer to the ID value in the [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list.  # noqa: E501

        :return: The timezone of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Body80.

        The time zone ID for a user profile. For this parameter value please refer to the ID value in the [timezone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list.  # noqa: E501

        :param timezone: The timezone of this Body80.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def language(self):
        """Gets the language of this Body80.  # noqa: E501

        language  # noqa: E501

        :return: The language of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Body80.

        language  # noqa: E501

        :param language: The language of this Body80.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def dept(self):
        """Gets the dept of this Body80.  # noqa: E501

        Department for user profile: use for report.  # noqa: E501

        :return: The dept of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this Body80.

        Department for user profile: use for report.  # noqa: E501

        :param dept: The dept of this Body80.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def vanity_name(self):
        """Gets the vanity_name of this Body80.  # noqa: E501

        Personal meeting room name.  # noqa: E501

        :return: The vanity_name of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._vanity_name

    @vanity_name.setter
    def vanity_name(self, vanity_name):
        """Sets the vanity_name of this Body80.

        Personal meeting room name.  # noqa: E501

        :param vanity_name: The vanity_name of this Body80.  # noqa: E501
        :type: str
        """

        self._vanity_name = vanity_name

    @property
    def host_key(self):
        """Gets the host_key of this Body80.  # noqa: E501

        Host key. It should be a 6-10 digit number.  # noqa: E501

        :return: The host_key of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._host_key

    @host_key.setter
    def host_key(self, host_key):
        """Sets the host_key of this Body80.

        Host key. It should be a 6-10 digit number.  # noqa: E501

        :param host_key: The host_key of this Body80.  # noqa: E501
        :type: str
        """

        self._host_key = host_key

    @property
    def cms_user_id(self):
        """Gets the cms_user_id of this Body80.  # noqa: E501

        Kaltura user ID.  # noqa: E501

        :return: The cms_user_id of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._cms_user_id

    @cms_user_id.setter
    def cms_user_id(self, cms_user_id):
        """Sets the cms_user_id of this Body80.

        Kaltura user ID.  # noqa: E501

        :param cms_user_id: The cms_user_id of this Body80.  # noqa: E501
        :type: str
        """

        self._cms_user_id = cms_user_id

    @property
    def job_title(self):
        """Gets the job_title of this Body80.  # noqa: E501

        User's job title.  # noqa: E501

        :return: The job_title of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Body80.

        User's job title.  # noqa: E501

        :param job_title: The job_title of this Body80.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def company(self):
        """Gets the company of this Body80.  # noqa: E501

        User's company.  # noqa: E501

        :return: The company of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Body80.

        User's company.  # noqa: E501

        :param company: The company of this Body80.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def location(self):
        """Gets the location of this Body80.  # noqa: E501

        User's location.  # noqa: E501

        :return: The location of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Body80.

        User's location.  # noqa: E501

        :param location: The location of this Body80.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def phone_number(self):
        """Gets the phone_number of this Body80.  # noqa: E501

        Phone number of the user. To update a phone number, you must also provide the `phone_country` field.  # noqa: E501

        :return: The phone_number of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Body80.

        Phone number of the user. To update a phone number, you must also provide the `phone_country` field.  # noqa: E501

        :param phone_number: The phone_number of this Body80.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_country(self):
        """Gets the phone_country of this Body80.  # noqa: E501

        [Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `phone_number` field is a Brazil based number, the value of the `phone_country` field should be `BR`.  # noqa: E501

        :return: The phone_country of this Body80.  # noqa: E501
        :rtype: str
        """
        return self._phone_country

    @phone_country.setter
    def phone_country(self, phone_country):
        """Sets the phone_country of this Body80.

        [Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `phone_number` field is a Brazil based number, the value of the `phone_country` field should be `BR`.  # noqa: E501

        :param phone_country: The phone_country of this Body80.  # noqa: E501
        :type: str
        """

        self._phone_country = phone_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body80, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body80):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
