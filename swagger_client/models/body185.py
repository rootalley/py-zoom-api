# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body185(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'extension_number': 'int',
        'primary_number': 'PhonesharedLineGroupssharedLineGroupIdPrimaryNumber',
        'timezone': 'str',
        'status': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'extension_number': 'extension_number',
        'primary_number': 'primary_number',
        'timezone': 'timezone',
        'status': 'status'
    }

    def __init__(self, display_name=None, extension_number=None, primary_number=None, timezone=None, status=None):  # noqa: E501
        """Body185 - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._extension_number = None
        self._primary_number = None
        self._timezone = None
        self._status = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if extension_number is not None:
            self.extension_number = extension_number
        if primary_number is not None:
            self.primary_number = primary_number
        if timezone is not None:
            self.timezone = timezone
        if status is not None:
            self.status = status

    @property
    def display_name(self):
        """Gets the display_name of this Body185.  # noqa: E501

        Display Name of the Shared Line Group.  # noqa: E501

        :return: The display_name of this Body185.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Body185.

        Display Name of the Shared Line Group.  # noqa: E501

        :param display_name: The display_name of this Body185.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def extension_number(self):
        """Gets the extension_number of this Body185.  # noqa: E501

        Extension number assigned to the Shared Line Group.  # noqa: E501

        :return: The extension_number of this Body185.  # noqa: E501
        :rtype: int
        """
        return self._extension_number

    @extension_number.setter
    def extension_number(self, extension_number):
        """Sets the extension_number of this Body185.

        Extension number assigned to the Shared Line Group.  # noqa: E501

        :param extension_number: The extension_number of this Body185.  # noqa: E501
        :type: int
        """

        self._extension_number = extension_number

    @property
    def primary_number(self):
        """Gets the primary_number of this Body185.  # noqa: E501


        :return: The primary_number of this Body185.  # noqa: E501
        :rtype: PhonesharedLineGroupssharedLineGroupIdPrimaryNumber
        """
        return self._primary_number

    @primary_number.setter
    def primary_number(self, primary_number):
        """Sets the primary_number of this Body185.


        :param primary_number: The primary_number of this Body185.  # noqa: E501
        :type: PhonesharedLineGroupssharedLineGroupIdPrimaryNumber
        """

        self._primary_number = primary_number

    @property
    def timezone(self):
        """Gets the timezone of this Body185.  # noqa: E501

        Timezone to be used for the Business Hours. A value should be provided from the IDs listed [here](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).  # noqa: E501

        :return: The timezone of this Body185.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Body185.

        Timezone to be used for the Business Hours. A value should be provided from the IDs listed [here](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones).  # noqa: E501

        :param timezone: The timezone of this Body185.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def status(self):
        """Gets the status of this Body185.  # noqa: E501

        Status of the Shared Line Group.  # noqa: E501

        :return: The status of this Body185.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Body185.

        Status of the Shared Line Group.  # noqa: E501

        :param status: The status of this Body185.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body185, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body185):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
