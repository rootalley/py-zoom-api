# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UsersuserIdmeetingsRecurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'int',
        'repeat_interval': 'int',
        'weekly_days': 'str',
        'monthly_day': 'int',
        'monthly_week': 'int',
        'monthly_week_day': 'int',
        'end_times': 'int',
        'end_date_time': 'datetime'
    }

    attribute_map = {
        'type': 'type',
        'repeat_interval': 'repeat_interval',
        'weekly_days': 'weekly_days',
        'monthly_day': 'monthly_day',
        'monthly_week': 'monthly_week',
        'monthly_week_day': 'monthly_week_day',
        'end_times': 'end_times',
        'end_date_time': 'end_date_time'
    }

    def __init__(self, type=None, repeat_interval=None, weekly_days='1', monthly_day=None, monthly_week=None, monthly_week_day=None, end_times=None, end_date_time=None):  # noqa: E501
        """UsersuserIdmeetingsRecurrence - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._repeat_interval = None
        self._weekly_days = None
        self._monthly_day = None
        self._monthly_week = None
        self._monthly_week_day = None
        self._end_times = None
        self._end_date_time = None
        self.discriminator = None
        self.type = type
        if repeat_interval is not None:
            self.repeat_interval = repeat_interval
        if weekly_days is not None:
            self.weekly_days = weekly_days
        if monthly_day is not None:
            self.monthly_day = monthly_day
        if monthly_week is not None:
            self.monthly_week = monthly_week
        if monthly_week_day is not None:
            self.monthly_week_day = monthly_week_day
        if end_times is not None:
            self.end_times = end_times
        if end_date_time is not None:
            self.end_date_time = end_date_time

    @property
    def type(self):
        """Gets the type of this UsersuserIdmeetingsRecurrence.  # noqa: E501

        Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.  # noqa: E501

        :return: The type of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UsersuserIdmeetingsRecurrence.

        Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.  # noqa: E501

        :param type: The type of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def repeat_interval(self):
        """Gets the repeat_interval of this UsersuserIdmeetingsRecurrence.  # noqa: E501

        Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.   For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.    # noqa: E501

        :return: The repeat_interval of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :rtype: int
        """
        return self._repeat_interval

    @repeat_interval.setter
    def repeat_interval(self, repeat_interval):
        """Sets the repeat_interval of this UsersuserIdmeetingsRecurrence.

        Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.   For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.    # noqa: E501

        :param repeat_interval: The repeat_interval of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :type: int
        """

        self._repeat_interval = repeat_interval

    @property
    def weekly_days(self):
        """Gets the weekly_days of this UsersuserIdmeetingsRecurrence.  # noqa: E501

        Use this field **only if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.  # noqa: E501

        :return: The weekly_days of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :rtype: str
        """
        return self._weekly_days

    @weekly_days.setter
    def weekly_days(self, weekly_days):
        """Sets the weekly_days of this UsersuserIdmeetingsRecurrence.

        Use this field **only if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.  # noqa: E501

        :param weekly_days: The weekly_days of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "7"]  # noqa: E501
        if weekly_days not in allowed_values:
            raise ValueError(
                "Invalid value for `weekly_days` ({0}), must be one of {1}"  # noqa: E501
                .format(weekly_days, allowed_values)
            )

        self._weekly_days = weekly_days

    @property
    def monthly_day(self):
        """Gets the monthly_day of this UsersuserIdmeetingsRecurrence.  # noqa: E501

        Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.  For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.  # noqa: E501

        :return: The monthly_day of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :rtype: int
        """
        return self._monthly_day

    @monthly_day.setter
    def monthly_day(self, monthly_day):
        """Sets the monthly_day of this UsersuserIdmeetingsRecurrence.

        Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.  For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.  # noqa: E501

        :param monthly_day: The monthly_day of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :type: int
        """

        self._monthly_day = monthly_day

    @property
    def monthly_week(self):
        """Gets the monthly_week of this UsersuserIdmeetingsRecurrence.  # noqa: E501

        Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.  # noqa: E501

        :return: The monthly_week of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :rtype: int
        """
        return self._monthly_week

    @monthly_week.setter
    def monthly_week(self, monthly_week):
        """Sets the monthly_week of this UsersuserIdmeetingsRecurrence.

        Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.  # noqa: E501

        :param monthly_week: The monthly_week of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :type: int
        """

        self._monthly_week = monthly_week

    @property
    def monthly_week_day(self):
        """Gets the monthly_week_day of this UsersuserIdmeetingsRecurrence.  # noqa: E501

        Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.   <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.  # noqa: E501

        :return: The monthly_week_day of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :rtype: int
        """
        return self._monthly_week_day

    @monthly_week_day.setter
    def monthly_week_day(self, monthly_week_day):
        """Sets the monthly_week_day of this UsersuserIdmeetingsRecurrence.

        Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.   <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.  # noqa: E501

        :param monthly_week_day: The monthly_week_day of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :type: int
        """

        self._monthly_week_day = monthly_week_day

    @property
    def end_times(self):
        """Gets the end_times of this UsersuserIdmeetingsRecurrence.  # noqa: E501

        Select how many times the meeting should recur before it is canceled. (Cannot be used with \"end_date_time\".)  # noqa: E501

        :return: The end_times of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :rtype: int
        """
        return self._end_times

    @end_times.setter
    def end_times(self, end_times):
        """Sets the end_times of this UsersuserIdmeetingsRecurrence.

        Select how many times the meeting should recur before it is canceled. (Cannot be used with \"end_date_time\".)  # noqa: E501

        :param end_times: The end_times of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :type: int
        """

        self._end_times = end_times

    @property
    def end_date_time(self):
        """Gets the end_date_time of this UsersuserIdmeetingsRecurrence.  # noqa: E501

        Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with \"end_times\".)  # noqa: E501

        :return: The end_date_time of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this UsersuserIdmeetingsRecurrence.

        Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with \"end_times\".)  # noqa: E501

        :param end_date_time: The end_date_time of this UsersuserIdmeetingsRecurrence.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersuserIdmeetingsRecurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersuserIdmeetingsRecurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
