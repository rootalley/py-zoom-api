# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body156(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'mac_address': 'str',
        'assigned_to': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'mac_address': 'mac_address',
        'assigned_to': 'assigned_to'
    }

    def __init__(self, display_name=None, mac_address=None, assigned_to=None):  # noqa: E501
        """Body156 - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._mac_address = None
        self._assigned_to = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if mac_address is not None:
            self.mac_address = mac_address
        if assigned_to is not None:
            self.assigned_to = assigned_to

    @property
    def display_name(self):
        """Gets the display_name of this Body156.  # noqa: E501

        Display name of the desk phone.  # noqa: E501

        :return: The display_name of this Body156.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Body156.

        Display name of the desk phone.  # noqa: E501

        :param display_name: The display_name of this Body156.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def mac_address(self):
        """Gets the mac_address of this Body156.  # noqa: E501

        The MAC address of the desk phone.<br>  Note: If you're using a wireless phone, enter the wired MAC address, not the wireless MAC address.  # noqa: E501

        :return: The mac_address of this Body156.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Body156.

        The MAC address of the desk phone.<br>  Note: If you're using a wireless phone, enter the wired MAC address, not the wireless MAC address.  # noqa: E501

        :param mac_address: The mac_address of this Body156.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def assigned_to(self):
        """Gets the assigned_to of this Body156.  # noqa: E501

        User ID or email address of the user to whom this device is to be assigned. The User ID and the email of the user can be retrieved using the [List Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API.  # noqa: E501

        :return: The assigned_to of this Body156.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this Body156.

        User ID or email address of the user to whom this device is to be assigned. The User ID and the email of the user can be retrieved using the [List Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/users) API.  # noqa: E501

        :param assigned_to: The assigned_to of this Body156.  # noqa: E501
        :type: str
        """

        self._assigned_to = assigned_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body156, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body156):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
