# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20031Users(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'user_name': 'str',
        'email': 'str',
        'total_send': 'int',
        'total_receive': 'int',
        'group_send': 'int',
        'group_receive': 'int',
        'calls_send': 'int',
        'calls_receive': 'int',
        'files_send': 'int',
        'files_receive': 'int',
        'images_send': 'int',
        'images_receive': 'int',
        'voice_send': 'int',
        'voice_receive': 'int',
        'videos_send': 'int',
        'videos_receive': 'int',
        'emoji_send': 'int',
        'emoji_receive': 'int'
    }

    attribute_map = {
        'user_id': 'user_id',
        'user_name': 'user_name',
        'email': 'email',
        'total_send': 'total_send',
        'total_receive': 'total_receive',
        'group_send': 'group_send',
        'group_receive': 'group_receive',
        'calls_send': 'calls_send',
        'calls_receive': 'calls_receive',
        'files_send': 'files_send',
        'files_receive': 'files_receive',
        'images_send': 'images_send',
        'images_receive': 'images_receive',
        'voice_send': 'voice_send',
        'voice_receive': 'voice_receive',
        'videos_send': 'videos_send',
        'videos_receive': 'videos_receive',
        'emoji_send': 'emoji_send',
        'emoji_receive': 'emoji_receive'
    }

    def __init__(self, user_id=None, user_name=None, email=None, total_send=None, total_receive=None, group_send=None, group_receive=None, calls_send=None, calls_receive=None, files_send=None, files_receive=None, images_send=None, images_receive=None, voice_send=None, voice_receive=None, videos_send=None, videos_receive=None, emoji_send=None, emoji_receive=None):  # noqa: E501
        """InlineResponse20031Users - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._user_name = None
        self._email = None
        self._total_send = None
        self._total_receive = None
        self._group_send = None
        self._group_receive = None
        self._calls_send = None
        self._calls_receive = None
        self._files_send = None
        self._files_receive = None
        self._images_send = None
        self._images_receive = None
        self._voice_send = None
        self._voice_receive = None
        self._videos_send = None
        self._videos_receive = None
        self._emoji_send = None
        self._emoji_receive = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if email is not None:
            self.email = email
        if total_send is not None:
            self.total_send = total_send
        if total_receive is not None:
            self.total_receive = total_receive
        if group_send is not None:
            self.group_send = group_send
        if group_receive is not None:
            self.group_receive = group_receive
        if calls_send is not None:
            self.calls_send = calls_send
        if calls_receive is not None:
            self.calls_receive = calls_receive
        if files_send is not None:
            self.files_send = files_send
        if files_receive is not None:
            self.files_receive = files_receive
        if images_send is not None:
            self.images_send = images_send
        if images_receive is not None:
            self.images_receive = images_receive
        if voice_send is not None:
            self.voice_send = voice_send
        if voice_receive is not None:
            self.voice_receive = voice_receive
        if videos_send is not None:
            self.videos_send = videos_send
        if videos_receive is not None:
            self.videos_receive = videos_receive
        if emoji_send is not None:
            self.emoji_send = emoji_send
        if emoji_receive is not None:
            self.emoji_receive = emoji_receive

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20031Users.  # noqa: E501

        User ID.  # noqa: E501

        :return: The user_id of this InlineResponse20031Users.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20031Users.

        User ID.  # noqa: E501

        :param user_id: The user_id of this InlineResponse20031Users.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse20031Users.  # noqa: E501

        User display name.  # noqa: E501

        :return: The user_name of this InlineResponse20031Users.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse20031Users.

        User display name.  # noqa: E501

        :param user_name: The user_name of this InlineResponse20031Users.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def email(self):
        """Gets the email of this InlineResponse20031Users.  # noqa: E501

        User email.  # noqa: E501

        :return: The email of this InlineResponse20031Users.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20031Users.

        User email.  # noqa: E501

        :param email: The email of this InlineResponse20031Users.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def total_send(self):
        """Gets the total_send of this InlineResponse20031Users.  # noqa: E501

        Total number of messages sent by the user.  # noqa: E501

        :return: The total_send of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._total_send

    @total_send.setter
    def total_send(self, total_send):
        """Sets the total_send of this InlineResponse20031Users.

        Total number of messages sent by the user.  # noqa: E501

        :param total_send: The total_send of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._total_send = total_send

    @property
    def total_receive(self):
        """Gets the total_receive of this InlineResponse20031Users.  # noqa: E501

        Total number of messages received by the user.  # noqa: E501

        :return: The total_receive of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._total_receive

    @total_receive.setter
    def total_receive(self, total_receive):
        """Sets the total_receive of this InlineResponse20031Users.

        Total number of messages received by the user.  # noqa: E501

        :param total_receive: The total_receive of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._total_receive = total_receive

    @property
    def group_send(self):
        """Gets the group_send of this InlineResponse20031Users.  # noqa: E501

        Total number of messages sent by the user in channels.  # noqa: E501

        :return: The group_send of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._group_send

    @group_send.setter
    def group_send(self, group_send):
        """Sets the group_send of this InlineResponse20031Users.

        Total number of messages sent by the user in channels.  # noqa: E501

        :param group_send: The group_send of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._group_send = group_send

    @property
    def group_receive(self):
        """Gets the group_receive of this InlineResponse20031Users.  # noqa: E501

        Total number of messages received by the user in channels.  # noqa: E501

        :return: The group_receive of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._group_receive

    @group_receive.setter
    def group_receive(self, group_receive):
        """Sets the group_receive of this InlineResponse20031Users.

        Total number of messages received by the user in channels.  # noqa: E501

        :param group_receive: The group_receive of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._group_receive = group_receive

    @property
    def calls_send(self):
        """Gets the calls_send of this InlineResponse20031Users.  # noqa: E501

        Total number of instant meeting calls made by the user.  # noqa: E501

        :return: The calls_send of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._calls_send

    @calls_send.setter
    def calls_send(self, calls_send):
        """Sets the calls_send of this InlineResponse20031Users.

        Total number of instant meeting calls made by the user.  # noqa: E501

        :param calls_send: The calls_send of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._calls_send = calls_send

    @property
    def calls_receive(self):
        """Gets the calls_receive of this InlineResponse20031Users.  # noqa: E501

        Total number of instant meeting calls received by the user.  # noqa: E501

        :return: The calls_receive of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._calls_receive

    @calls_receive.setter
    def calls_receive(self, calls_receive):
        """Sets the calls_receive of this InlineResponse20031Users.

        Total number of instant meeting calls received by the user.  # noqa: E501

        :param calls_receive: The calls_receive of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._calls_receive = calls_receive

    @property
    def files_send(self):
        """Gets the files_send of this InlineResponse20031Users.  # noqa: E501

        Total number of files sent by the user.  # noqa: E501

        :return: The files_send of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._files_send

    @files_send.setter
    def files_send(self, files_send):
        """Sets the files_send of this InlineResponse20031Users.

        Total number of files sent by the user.  # noqa: E501

        :param files_send: The files_send of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._files_send = files_send

    @property
    def files_receive(self):
        """Gets the files_receive of this InlineResponse20031Users.  # noqa: E501

        Total number of files received by the user.  # noqa: E501

        :return: The files_receive of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._files_receive

    @files_receive.setter
    def files_receive(self, files_receive):
        """Sets the files_receive of this InlineResponse20031Users.

        Total number of files received by the user.  # noqa: E501

        :param files_receive: The files_receive of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._files_receive = files_receive

    @property
    def images_send(self):
        """Gets the images_send of this InlineResponse20031Users.  # noqa: E501

        Total number of images sent by the user.  # noqa: E501

        :return: The images_send of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._images_send

    @images_send.setter
    def images_send(self, images_send):
        """Sets the images_send of this InlineResponse20031Users.

        Total number of images sent by the user.  # noqa: E501

        :param images_send: The images_send of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._images_send = images_send

    @property
    def images_receive(self):
        """Gets the images_receive of this InlineResponse20031Users.  # noqa: E501

        Total number of images received by the user.  # noqa: E501

        :return: The images_receive of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._images_receive

    @images_receive.setter
    def images_receive(self, images_receive):
        """Sets the images_receive of this InlineResponse20031Users.

        Total number of images received by the user.  # noqa: E501

        :param images_receive: The images_receive of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._images_receive = images_receive

    @property
    def voice_send(self):
        """Gets the voice_send of this InlineResponse20031Users.  # noqa: E501

        Total number of voice files sent by the user.  # noqa: E501

        :return: The voice_send of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._voice_send

    @voice_send.setter
    def voice_send(self, voice_send):
        """Sets the voice_send of this InlineResponse20031Users.

        Total number of voice files sent by the user.  # noqa: E501

        :param voice_send: The voice_send of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._voice_send = voice_send

    @property
    def voice_receive(self):
        """Gets the voice_receive of this InlineResponse20031Users.  # noqa: E501

        Total number of voice files received by the user.  # noqa: E501

        :return: The voice_receive of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._voice_receive

    @voice_receive.setter
    def voice_receive(self, voice_receive):
        """Sets the voice_receive of this InlineResponse20031Users.

        Total number of voice files received by the user.  # noqa: E501

        :param voice_receive: The voice_receive of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._voice_receive = voice_receive

    @property
    def videos_send(self):
        """Gets the videos_send of this InlineResponse20031Users.  # noqa: E501

        Total number of video files sent by the user.  # noqa: E501

        :return: The videos_send of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._videos_send

    @videos_send.setter
    def videos_send(self, videos_send):
        """Sets the videos_send of this InlineResponse20031Users.

        Total number of video files sent by the user.  # noqa: E501

        :param videos_send: The videos_send of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._videos_send = videos_send

    @property
    def videos_receive(self):
        """Gets the videos_receive of this InlineResponse20031Users.  # noqa: E501

        Total number of video files received by the user.   # noqa: E501

        :return: The videos_receive of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._videos_receive

    @videos_receive.setter
    def videos_receive(self, videos_receive):
        """Sets the videos_receive of this InlineResponse20031Users.

        Total number of video files received by the user.   # noqa: E501

        :param videos_receive: The videos_receive of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._videos_receive = videos_receive

    @property
    def emoji_send(self):
        """Gets the emoji_send of this InlineResponse20031Users.  # noqa: E501

        Total number of emojis sent by the user.  # noqa: E501

        :return: The emoji_send of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._emoji_send

    @emoji_send.setter
    def emoji_send(self, emoji_send):
        """Sets the emoji_send of this InlineResponse20031Users.

        Total number of emojis sent by the user.  # noqa: E501

        :param emoji_send: The emoji_send of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._emoji_send = emoji_send

    @property
    def emoji_receive(self):
        """Gets the emoji_receive of this InlineResponse20031Users.  # noqa: E501

        Total number of emojis received by the user.  # noqa: E501

        :return: The emoji_receive of this InlineResponse20031Users.  # noqa: E501
        :rtype: int
        """
        return self._emoji_receive

    @emoji_receive.setter
    def emoji_receive(self, emoji_receive):
        """Sets the emoji_receive of this InlineResponse20031Users.

        Total number of emojis received by the user.  # noqa: E501

        :param emoji_receive: The emoji_receive of this InlineResponse20031Users.  # noqa: E501
        :type: int
        """

        self._emoji_receive = emoji_receive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20031Users, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20031Users):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
