# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20081Devices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'room_name': 'str',
        'device_type': 'str',
        'app_version': 'str',
        'device_system': 'str',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'room_name': 'room_name',
        'device_type': 'device_type',
        'app_version': 'app_version',
        'device_system': 'device_system',
        'status': 'status'
    }

    def __init__(self, id=None, room_name=None, device_type=None, app_version=None, device_system=None, status=None):  # noqa: E501
        """InlineResponse20081Devices - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._room_name = None
        self._device_type = None
        self._app_version = None
        self._device_system = None
        self._status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if room_name is not None:
            self.room_name = room_name
        if device_type is not None:
            self.device_type = device_type
        if app_version is not None:
            self.app_version = app_version
        if device_system is not None:
            self.device_system = device_system
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this InlineResponse20081Devices.  # noqa: E501

        Unique identifier of the device.  # noqa: E501

        :return: The id of this InlineResponse20081Devices.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20081Devices.

        Unique identifier of the device.  # noqa: E501

        :param id: The id of this InlineResponse20081Devices.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def room_name(self):
        """Gets the room_name of this InlineResponse20081Devices.  # noqa: E501

        Name of the Zoom Room.  # noqa: E501

        :return: The room_name of this InlineResponse20081Devices.  # noqa: E501
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this InlineResponse20081Devices.

        Name of the Zoom Room.  # noqa: E501

        :param room_name: The room_name of this InlineResponse20081Devices.  # noqa: E501
        :type: str
        """

        self._room_name = room_name

    @property
    def device_type(self):
        """Gets the device_type of this InlineResponse20081Devices.  # noqa: E501

        Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`  # noqa: E501

        :return: The device_type of this InlineResponse20081Devices.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this InlineResponse20081Devices.

        Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`  # noqa: E501

        :param device_type: The device_type of this InlineResponse20081Devices.  # noqa: E501
        :type: str
        """
        allowed_values = ["Zoom Rooms Computer", "Controller", "Scheduling Display", "Zoom Rooms Control System", "Companion Whiteboard"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def app_version(self):
        """Gets the app_version of this InlineResponse20081Devices.  # noqa: E501

        App version of Zoom Rooms.  # noqa: E501

        :return: The app_version of this InlineResponse20081Devices.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this InlineResponse20081Devices.

        App version of Zoom Rooms.  # noqa: E501

        :param app_version: The app_version of this InlineResponse20081Devices.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def device_system(self):
        """Gets the device_system of this InlineResponse20081Devices.  # noqa: E501

        Operating system of the device.  # noqa: E501

        :return: The device_system of this InlineResponse20081Devices.  # noqa: E501
        :rtype: str
        """
        return self._device_system

    @device_system.setter
    def device_system(self, device_system):
        """Sets the device_system of this InlineResponse20081Devices.

        Operating system of the device.  # noqa: E501

        :param device_system: The device_system of this InlineResponse20081Devices.  # noqa: E501
        :type: str
        """

        self._device_system = device_system

    @property
    def status(self):
        """Gets the status of this InlineResponse20081Devices.  # noqa: E501

        Status of the device. The value can be either `Online` or `Offline`.  # noqa: E501

        :return: The status of this InlineResponse20081Devices.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20081Devices.

        Status of the device. The value can be either `Online` or `Offline`.  # noqa: E501

        :param status: The status of this InlineResponse20081Devices.  # noqa: E501
        :type: str
        """
        allowed_values = ["Online", "Offline"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20081Devices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20081Devices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
