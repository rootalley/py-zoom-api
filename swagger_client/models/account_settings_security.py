# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AccountSettingsSecurity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_change_name_pic': 'bool',
        'import_photos_from_devices': 'bool',
        'hide_billing_info': 'bool',
        'password_requirement': 'AccountSettingsSecurityPasswordRequirement'
    }

    attribute_map = {
        'admin_change_name_pic': 'admin_change_name_pic',
        'import_photos_from_devices': 'import_photos_from_devices',
        'hide_billing_info': 'hide_billing_info',
        'password_requirement': 'password_requirement'
    }

    def __init__(self, admin_change_name_pic=None, import_photos_from_devices=None, hide_billing_info=None, password_requirement=None):  # noqa: E501
        """AccountSettingsSecurity - a model defined in Swagger"""  # noqa: E501
        self._admin_change_name_pic = None
        self._import_photos_from_devices = None
        self._hide_billing_info = None
        self._password_requirement = None
        self.discriminator = None
        if admin_change_name_pic is not None:
            self.admin_change_name_pic = admin_change_name_pic
        if import_photos_from_devices is not None:
            self.import_photos_from_devices = import_photos_from_devices
        if hide_billing_info is not None:
            self.hide_billing_info = hide_billing_info
        if password_requirement is not None:
            self.password_requirement = password_requirement

    @property
    def admin_change_name_pic(self):
        """Gets the admin_change_name_pic of this AccountSettingsSecurity.  # noqa: E501

        Only account administrators can change a user's username and picture.  # noqa: E501

        :return: The admin_change_name_pic of this AccountSettingsSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._admin_change_name_pic

    @admin_change_name_pic.setter
    def admin_change_name_pic(self, admin_change_name_pic):
        """Sets the admin_change_name_pic of this AccountSettingsSecurity.

        Only account administrators can change a user's username and picture.  # noqa: E501

        :param admin_change_name_pic: The admin_change_name_pic of this AccountSettingsSecurity.  # noqa: E501
        :type: bool
        """

        self._admin_change_name_pic = admin_change_name_pic

    @property
    def import_photos_from_devices(self):
        """Gets the import_photos_from_devices of this AccountSettingsSecurity.  # noqa: E501

        Allow users to import photos from a photo library on a  device.  # noqa: E501

        :return: The import_photos_from_devices of this AccountSettingsSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._import_photos_from_devices

    @import_photos_from_devices.setter
    def import_photos_from_devices(self, import_photos_from_devices):
        """Sets the import_photos_from_devices of this AccountSettingsSecurity.

        Allow users to import photos from a photo library on a  device.  # noqa: E501

        :param import_photos_from_devices: The import_photos_from_devices of this AccountSettingsSecurity.  # noqa: E501
        :type: bool
        """

        self._import_photos_from_devices = import_photos_from_devices

    @property
    def hide_billing_info(self):
        """Gets the hide_billing_info of this AccountSettingsSecurity.  # noqa: E501

        Hide billing information.  # noqa: E501

        :return: The hide_billing_info of this AccountSettingsSecurity.  # noqa: E501
        :rtype: bool
        """
        return self._hide_billing_info

    @hide_billing_info.setter
    def hide_billing_info(self, hide_billing_info):
        """Sets the hide_billing_info of this AccountSettingsSecurity.

        Hide billing information.  # noqa: E501

        :param hide_billing_info: The hide_billing_info of this AccountSettingsSecurity.  # noqa: E501
        :type: bool
        """

        self._hide_billing_info = hide_billing_info

    @property
    def password_requirement(self):
        """Gets the password_requirement of this AccountSettingsSecurity.  # noqa: E501


        :return: The password_requirement of this AccountSettingsSecurity.  # noqa: E501
        :rtype: AccountSettingsSecurityPasswordRequirement
        """
        return self._password_requirement

    @password_requirement.setter
    def password_requirement(self, password_requirement):
        """Sets the password_requirement of this AccountSettingsSecurity.


        :param password_requirement: The password_requirement of this AccountSettingsSecurity.  # noqa: E501
        :type: AccountSettingsSecurityPasswordRequirement
        """

        self._password_requirement = password_requirement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountSettingsSecurity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSettingsSecurity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
