# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AccountListItemAccounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_name': 'str',
        'owner_email': 'str',
        'account_type': 'str',
        'seats': 'int',
        'subscription_start_time': 'datetime',
        'subscription_end_time': 'datetime',
        'created_at': 'datetime',
        'account_number': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_name': 'account_name',
        'owner_email': 'owner_email',
        'account_type': 'account_type',
        'seats': 'seats',
        'subscription_start_time': 'subscription_start_time',
        'subscription_end_time': 'subscription_end_time',
        'created_at': 'created_at',
        'account_number': 'account_number'
    }

    def __init__(self, id=None, account_name=None, owner_email=None, account_type=None, seats=None, subscription_start_time=None, subscription_end_time=None, created_at=None, account_number=None):  # noqa: E501
        """AccountListItemAccounts - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_name = None
        self._owner_email = None
        self._account_type = None
        self._seats = None
        self._subscription_start_time = None
        self._subscription_end_time = None
        self._created_at = None
        self._account_number = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_name is not None:
            self.account_name = account_name
        if owner_email is not None:
            self.owner_email = owner_email
        if account_type is not None:
            self.account_type = account_type
        if seats is not None:
            self.seats = seats
        if subscription_start_time is not None:
            self.subscription_start_time = subscription_start_time
        if subscription_end_time is not None:
            self.subscription_end_time = subscription_end_time
        if created_at is not None:
            self.created_at = created_at
        if account_number is not None:
            self.account_number = account_number

    @property
    def id(self):
        """Gets the id of this AccountListItemAccounts.  # noqa: E501

        Account ID.  # noqa: E501

        :return: The id of this AccountListItemAccounts.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountListItemAccounts.

        Account ID.  # noqa: E501

        :param id: The id of this AccountListItemAccounts.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_name(self):
        """Gets the account_name of this AccountListItemAccounts.  # noqa: E501

        Account name.  # noqa: E501

        :return: The account_name of this AccountListItemAccounts.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountListItemAccounts.

        Account name.  # noqa: E501

        :param account_name: The account_name of this AccountListItemAccounts.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def owner_email(self):
        """Gets the owner_email of this AccountListItemAccounts.  # noqa: E501

        Account owner email.  # noqa: E501

        :return: The owner_email of this AccountListItemAccounts.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this AccountListItemAccounts.

        Account owner email.  # noqa: E501

        :param owner_email: The owner_email of this AccountListItemAccounts.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def account_type(self):
        """Gets the account_type of this AccountListItemAccounts.  # noqa: E501

        Account type.  # noqa: E501

        :return: The account_type of this AccountListItemAccounts.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AccountListItemAccounts.

        Account type.  # noqa: E501

        :param account_type: The account_type of this AccountListItemAccounts.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def seats(self):
        """Gets the seats of this AccountListItemAccounts.  # noqa: E501

        Account seats.  # noqa: E501

        :return: The seats of this AccountListItemAccounts.  # noqa: E501
        :rtype: int
        """
        return self._seats

    @seats.setter
    def seats(self, seats):
        """Sets the seats of this AccountListItemAccounts.

        Account seats.  # noqa: E501

        :param seats: The seats of this AccountListItemAccounts.  # noqa: E501
        :type: int
        """

        self._seats = seats

    @property
    def subscription_start_time(self):
        """Gets the subscription_start_time of this AccountListItemAccounts.  # noqa: E501

        Account subscription start date and time.  # noqa: E501

        :return: The subscription_start_time of this AccountListItemAccounts.  # noqa: E501
        :rtype: datetime
        """
        return self._subscription_start_time

    @subscription_start_time.setter
    def subscription_start_time(self, subscription_start_time):
        """Sets the subscription_start_time of this AccountListItemAccounts.

        Account subscription start date and time.  # noqa: E501

        :param subscription_start_time: The subscription_start_time of this AccountListItemAccounts.  # noqa: E501
        :type: datetime
        """

        self._subscription_start_time = subscription_start_time

    @property
    def subscription_end_time(self):
        """Gets the subscription_end_time of this AccountListItemAccounts.  # noqa: E501

        Account subscription end date and time.  # noqa: E501

        :return: The subscription_end_time of this AccountListItemAccounts.  # noqa: E501
        :rtype: datetime
        """
        return self._subscription_end_time

    @subscription_end_time.setter
    def subscription_end_time(self, subscription_end_time):
        """Sets the subscription_end_time of this AccountListItemAccounts.

        Account subscription end date and time.  # noqa: E501

        :param subscription_end_time: The subscription_end_time of this AccountListItemAccounts.  # noqa: E501
        :type: datetime
        """

        self._subscription_end_time = subscription_end_time

    @property
    def created_at(self):
        """Gets the created_at of this AccountListItemAccounts.  # noqa: E501

        Account creation date and time.  # noqa: E501

        :return: The created_at of this AccountListItemAccounts.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountListItemAccounts.

        Account creation date and time.  # noqa: E501

        :param created_at: The created_at of this AccountListItemAccounts.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def account_number(self):
        """Gets the account_number of this AccountListItemAccounts.  # noqa: E501

        Account Number of the account.  # noqa: E501

        :return: The account_number of this AccountListItemAccounts.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AccountListItemAccounts.

        Account Number of the account.  # noqa: E501

        :param account_number: The account_number of this AccountListItemAccounts.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountListItemAccounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountListItemAccounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
