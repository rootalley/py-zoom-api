# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserSettingsRecordingSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_recording': 'bool',
        'cloud_recording': 'bool',
        'record_speaker_view': 'bool',
        'record_gallery_view': 'bool',
        'record_audio_file': 'bool',
        'save_chat_text': 'bool',
        'show_timestamp': 'bool',
        'recording_audio_transcript': 'bool',
        'auto_recording': 'str',
        'host_pause_stop_recording': 'bool',
        'auto_delete_cmr': 'bool',
        'auto_delete_cmr_days': 'int',
        'recording_password_requirement': 'AccountSettingsRecordingRecordingPasswordRequirement'
    }

    attribute_map = {
        'local_recording': 'local_recording',
        'cloud_recording': 'cloud_recording',
        'record_speaker_view': 'record_speaker_view',
        'record_gallery_view': 'record_gallery_view',
        'record_audio_file': 'record_audio_file',
        'save_chat_text': 'save_chat_text',
        'show_timestamp': 'show_timestamp',
        'recording_audio_transcript': 'recording_audio_transcript',
        'auto_recording': 'auto_recording',
        'host_pause_stop_recording': 'host_pause_stop_recording',
        'auto_delete_cmr': 'auto_delete_cmr',
        'auto_delete_cmr_days': 'auto_delete_cmr_days',
        'recording_password_requirement': 'recording_password_requirement'
    }

    def __init__(self, local_recording=None, cloud_recording=False, record_speaker_view=False, record_gallery_view=False, record_audio_file=False, save_chat_text=False, show_timestamp=False, recording_audio_transcript=None, auto_recording='local', host_pause_stop_recording=False, auto_delete_cmr=False, auto_delete_cmr_days=None, recording_password_requirement=None):  # noqa: E501
        """UserSettingsRecordingSettings - a model defined in Swagger"""  # noqa: E501
        self._local_recording = None
        self._cloud_recording = None
        self._record_speaker_view = None
        self._record_gallery_view = None
        self._record_audio_file = None
        self._save_chat_text = None
        self._show_timestamp = None
        self._recording_audio_transcript = None
        self._auto_recording = None
        self._host_pause_stop_recording = None
        self._auto_delete_cmr = None
        self._auto_delete_cmr_days = None
        self._recording_password_requirement = None
        self.discriminator = None
        if local_recording is not None:
            self.local_recording = local_recording
        if cloud_recording is not None:
            self.cloud_recording = cloud_recording
        if record_speaker_view is not None:
            self.record_speaker_view = record_speaker_view
        if record_gallery_view is not None:
            self.record_gallery_view = record_gallery_view
        if record_audio_file is not None:
            self.record_audio_file = record_audio_file
        if save_chat_text is not None:
            self.save_chat_text = save_chat_text
        if show_timestamp is not None:
            self.show_timestamp = show_timestamp
        if recording_audio_transcript is not None:
            self.recording_audio_transcript = recording_audio_transcript
        if auto_recording is not None:
            self.auto_recording = auto_recording
        if host_pause_stop_recording is not None:
            self.host_pause_stop_recording = host_pause_stop_recording
        if auto_delete_cmr is not None:
            self.auto_delete_cmr = auto_delete_cmr
        if auto_delete_cmr_days is not None:
            self.auto_delete_cmr_days = auto_delete_cmr_days
        if recording_password_requirement is not None:
            self.recording_password_requirement = recording_password_requirement

    @property
    def local_recording(self):
        """Gets the local_recording of this UserSettingsRecordingSettings.  # noqa: E501

        Local recording.  # noqa: E501

        :return: The local_recording of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._local_recording

    @local_recording.setter
    def local_recording(self, local_recording):
        """Sets the local_recording of this UserSettingsRecordingSettings.

        Local recording.  # noqa: E501

        :param local_recording: The local_recording of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._local_recording = local_recording

    @property
    def cloud_recording(self):
        """Gets the cloud_recording of this UserSettingsRecordingSettings.  # noqa: E501

        Cloud recording.  # noqa: E501

        :return: The cloud_recording of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_recording

    @cloud_recording.setter
    def cloud_recording(self, cloud_recording):
        """Sets the cloud_recording of this UserSettingsRecordingSettings.

        Cloud recording.  # noqa: E501

        :param cloud_recording: The cloud_recording of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._cloud_recording = cloud_recording

    @property
    def record_speaker_view(self):
        """Gets the record_speaker_view of this UserSettingsRecordingSettings.  # noqa: E501

        Record the active speaker view.  # noqa: E501

        :return: The record_speaker_view of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._record_speaker_view

    @record_speaker_view.setter
    def record_speaker_view(self, record_speaker_view):
        """Sets the record_speaker_view of this UserSettingsRecordingSettings.

        Record the active speaker view.  # noqa: E501

        :param record_speaker_view: The record_speaker_view of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._record_speaker_view = record_speaker_view

    @property
    def record_gallery_view(self):
        """Gets the record_gallery_view of this UserSettingsRecordingSettings.  # noqa: E501

        Record the gallery view.  # noqa: E501

        :return: The record_gallery_view of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._record_gallery_view

    @record_gallery_view.setter
    def record_gallery_view(self, record_gallery_view):
        """Sets the record_gallery_view of this UserSettingsRecordingSettings.

        Record the gallery view.  # noqa: E501

        :param record_gallery_view: The record_gallery_view of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._record_gallery_view = record_gallery_view

    @property
    def record_audio_file(self):
        """Gets the record_audio_file of this UserSettingsRecordingSettings.  # noqa: E501

        Record an audio only file.  # noqa: E501

        :return: The record_audio_file of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._record_audio_file

    @record_audio_file.setter
    def record_audio_file(self, record_audio_file):
        """Sets the record_audio_file of this UserSettingsRecordingSettings.

        Record an audio only file.  # noqa: E501

        :param record_audio_file: The record_audio_file of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._record_audio_file = record_audio_file

    @property
    def save_chat_text(self):
        """Gets the save_chat_text of this UserSettingsRecordingSettings.  # noqa: E501

        Save chat text from the meeting.  # noqa: E501

        :return: The save_chat_text of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._save_chat_text

    @save_chat_text.setter
    def save_chat_text(self, save_chat_text):
        """Sets the save_chat_text of this UserSettingsRecordingSettings.

        Save chat text from the meeting.  # noqa: E501

        :param save_chat_text: The save_chat_text of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._save_chat_text = save_chat_text

    @property
    def show_timestamp(self):
        """Gets the show_timestamp of this UserSettingsRecordingSettings.  # noqa: E501

        Show timestamp on video.  # noqa: E501

        :return: The show_timestamp of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_timestamp

    @show_timestamp.setter
    def show_timestamp(self, show_timestamp):
        """Sets the show_timestamp of this UserSettingsRecordingSettings.

        Show timestamp on video.  # noqa: E501

        :param show_timestamp: The show_timestamp of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._show_timestamp = show_timestamp

    @property
    def recording_audio_transcript(self):
        """Gets the recording_audio_transcript of this UserSettingsRecordingSettings.  # noqa: E501

        Audio transcript.  # noqa: E501

        :return: The recording_audio_transcript of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._recording_audio_transcript

    @recording_audio_transcript.setter
    def recording_audio_transcript(self, recording_audio_transcript):
        """Sets the recording_audio_transcript of this UserSettingsRecordingSettings.

        Audio transcript.  # noqa: E501

        :param recording_audio_transcript: The recording_audio_transcript of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._recording_audio_transcript = recording_audio_transcript

    @property
    def auto_recording(self):
        """Gets the auto_recording of this UserSettingsRecordingSettings.  # noqa: E501

        Automatic recording:<br>`local` - Record on local.<br>`cloud` - Record on cloud.<br>`none` - Disabled.  # noqa: E501

        :return: The auto_recording of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: str
        """
        return self._auto_recording

    @auto_recording.setter
    def auto_recording(self, auto_recording):
        """Sets the auto_recording of this UserSettingsRecordingSettings.

        Automatic recording:<br>`local` - Record on local.<br>`cloud` - Record on cloud.<br>`none` - Disabled.  # noqa: E501

        :param auto_recording: The auto_recording of this UserSettingsRecordingSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "cloud", "none"]  # noqa: E501
        if auto_recording not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_recording` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_recording, allowed_values)
            )

        self._auto_recording = auto_recording

    @property
    def host_pause_stop_recording(self):
        """Gets the host_pause_stop_recording of this UserSettingsRecordingSettings.  # noqa: E501

        Host can pause/stop the auto recording in the cloud.  # noqa: E501

        :return: The host_pause_stop_recording of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._host_pause_stop_recording

    @host_pause_stop_recording.setter
    def host_pause_stop_recording(self, host_pause_stop_recording):
        """Sets the host_pause_stop_recording of this UserSettingsRecordingSettings.

        Host can pause/stop the auto recording in the cloud.  # noqa: E501

        :param host_pause_stop_recording: The host_pause_stop_recording of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._host_pause_stop_recording = host_pause_stop_recording

    @property
    def auto_delete_cmr(self):
        """Gets the auto_delete_cmr of this UserSettingsRecordingSettings.  # noqa: E501

        Auto delete cloud recordings.  # noqa: E501

        :return: The auto_delete_cmr of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_delete_cmr

    @auto_delete_cmr.setter
    def auto_delete_cmr(self, auto_delete_cmr):
        """Sets the auto_delete_cmr of this UserSettingsRecordingSettings.

        Auto delete cloud recordings.  # noqa: E501

        :param auto_delete_cmr: The auto_delete_cmr of this UserSettingsRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._auto_delete_cmr = auto_delete_cmr

    @property
    def auto_delete_cmr_days(self):
        """Gets the auto_delete_cmr_days of this UserSettingsRecordingSettings.  # noqa: E501

        A specified number of days of auto delete cloud recordings.  # noqa: E501

        :return: The auto_delete_cmr_days of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: int
        """
        return self._auto_delete_cmr_days

    @auto_delete_cmr_days.setter
    def auto_delete_cmr_days(self, auto_delete_cmr_days):
        """Sets the auto_delete_cmr_days of this UserSettingsRecordingSettings.

        A specified number of days of auto delete cloud recordings.  # noqa: E501

        :param auto_delete_cmr_days: The auto_delete_cmr_days of this UserSettingsRecordingSettings.  # noqa: E501
        :type: int
        """

        self._auto_delete_cmr_days = auto_delete_cmr_days

    @property
    def recording_password_requirement(self):
        """Gets the recording_password_requirement of this UserSettingsRecordingSettings.  # noqa: E501


        :return: The recording_password_requirement of this UserSettingsRecordingSettings.  # noqa: E501
        :rtype: AccountSettingsRecordingRecordingPasswordRequirement
        """
        return self._recording_password_requirement

    @recording_password_requirement.setter
    def recording_password_requirement(self, recording_password_requirement):
        """Sets the recording_password_requirement of this UserSettingsRecordingSettings.


        :param recording_password_requirement: The recording_password_requirement of this UserSettingsRecordingSettings.  # noqa: E501
        :type: AccountSettingsRecordingRecordingPasswordRequirement
        """

        self._recording_password_requirement = recording_password_requirement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettingsRecordingSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettingsRecordingSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
