# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20112(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'questions': 'list[PollQuestions]',
        'status': 'str',
        'title': 'str'
    }

    attribute_map = {
        'id': 'id',
        'questions': 'questions',
        'status': 'status',
        'title': 'title'
    }

    def __init__(self, id=None, questions=None, status=None, title=None):  # noqa: E501
        """InlineResponse20112 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._questions = None
        self._status = None
        self._title = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if questions is not None:
            self.questions = questions
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title

    @property
    def id(self):
        """Gets the id of this InlineResponse20112.  # noqa: E501

        Meeting Poll ID  # noqa: E501

        :return: The id of this InlineResponse20112.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20112.

        Meeting Poll ID  # noqa: E501

        :param id: The id of this InlineResponse20112.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def questions(self):
        """Gets the questions of this InlineResponse20112.  # noqa: E501

        Array of Polls  # noqa: E501

        :return: The questions of this InlineResponse20112.  # noqa: E501
        :rtype: list[PollQuestions]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this InlineResponse20112.

        Array of Polls  # noqa: E501

        :param questions: The questions of this InlineResponse20112.  # noqa: E501
        :type: list[PollQuestions]
        """

        self._questions = questions

    @property
    def status(self):
        """Gets the status of this InlineResponse20112.  # noqa: E501

        Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results  # noqa: E501

        :return: The status of this InlineResponse20112.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20112.

        Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results  # noqa: E501

        :param status: The status of this InlineResponse20112.  # noqa: E501
        :type: str
        """
        allowed_values = ["notstart", "started", "ended", "sharing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this InlineResponse20112.  # noqa: E501

        Title for the poll.  # noqa: E501

        :return: The title of this InlineResponse20112.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse20112.

        Title for the poll.  # noqa: E501

        :param title: The title of this InlineResponse20112.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20112, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20112):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
