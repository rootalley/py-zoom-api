# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PhonesitesDefaultEmergencyAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'zip': 'str',
        'state_code': 'str'
    }

    attribute_map = {
        'country': 'country',
        'address_line1': 'address_line1',
        'address_line2': 'address_line2',
        'city': 'city',
        'zip': 'zip',
        'state_code': 'state_code'
    }

    def __init__(self, country=None, address_line1=None, address_line2=None, city=None, zip=None, state_code=None):  # noqa: E501
        """PhonesitesDefaultEmergencyAddress - a model defined in Swagger"""  # noqa: E501
        self._country = None
        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._zip = None
        self._state_code = None
        self.discriminator = None
        self.country = country
        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        self.city = city
        self.zip = zip
        self.state_code = state_code

    @property
    def country(self):
        """Gets the country of this PhonesitesDefaultEmergencyAddress.  # noqa: E501

        Two lettered country code (Aplha-2 code in ISO-3166) standard of the Site's [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).  # noqa: E501

        :return: The country of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PhonesitesDefaultEmergencyAddress.

        Two lettered country code (Aplha-2 code in ISO-3166) standard of the Site's [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).  # noqa: E501

        :param country: The country of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def address_line1(self):
        """Gets the address_line1 of this PhonesitesDefaultEmergencyAddress.  # noqa: E501

        Address Line 1 of the  [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address) consisting of house number and street name.  # noqa: E501

        :return: The address_line1 of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this PhonesitesDefaultEmergencyAddress.

        Address Line 1 of the  [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address) consisting of house number and street name.  # noqa: E501

        :param address_line1: The address_line1 of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :type: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this PhonesitesDefaultEmergencyAddress.  # noqa: E501

        Address Line 2 of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address) consisting of Building number, floor number, unit, etc.  # noqa: E501

        :return: The address_line2 of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this PhonesitesDefaultEmergencyAddress.

        Address Line 2 of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address) consisting of Building number, floor number, unit, etc.  # noqa: E501

        :param address_line2: The address_line2 of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this PhonesitesDefaultEmergencyAddress.  # noqa: E501

        City of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).  # noqa: E501

        :return: The city of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PhonesitesDefaultEmergencyAddress.

        City of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).  # noqa: E501

        :param city: The city of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def zip(self):
        """Gets the zip of this PhonesitesDefaultEmergencyAddress.  # noqa: E501

        Zip Code of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).  # noqa: E501

        :return: The zip of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this PhonesitesDefaultEmergencyAddress.

        Zip Code of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).  # noqa: E501

        :param zip: The zip of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :type: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")  # noqa: E501

        self._zip = zip

    @property
    def state_code(self):
        """Gets the state_code of this PhonesitesDefaultEmergencyAddress.  # noqa: E501

        State Code of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).  # noqa: E501

        :return: The state_code of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this PhonesitesDefaultEmergencyAddress.

        State Code of the [emergency address](https://support.zoom.us/hc/en-us/articles/360021062871-Setting-an-Emergency-Address).  # noqa: E501

        :param state_code: The state_code of this PhonesitesDefaultEmergencyAddress.  # noqa: E501
        :type: str
        """
        if state_code is None:
            raise ValueError("Invalid value for `state_code`, must not be `None`")  # noqa: E501

        self._state_code = state_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhonesitesDefaultEmergencyAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhonesitesDefaultEmergencyAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
