# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20014(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone_number': 'str',
        'address': 'str',
        'apt': 'str',
        'city': 'str',
        'state': 'str',
        'zip': 'str',
        'country': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'phone_number': 'phone_number',
        'address': 'address',
        'apt': 'apt',
        'city': 'city',
        'state': 'state',
        'zip': 'zip',
        'country': 'country'
    }

    def __init__(self, first_name=None, last_name=None, email=None, phone_number=None, address=None, apt=None, city=None, state=None, zip=None, country=None):  # noqa: E501
        """InlineResponse20014 - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone_number = None
        self._address = None
        self._apt = None
        self._city = None
        self._state = None
        self._zip = None
        self._country = None
        self.discriminator = None
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.phone_number = phone_number
        self.address = address
        if apt is not None:
            self.apt = apt
        self.city = city
        self.state = state
        self.zip = zip
        self.country = country

    @property
    def first_name(self):
        """Gets the first_name of this InlineResponse20014.  # noqa: E501

        Billing Contact's first name.  # noqa: E501

        :return: The first_name of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InlineResponse20014.

        Billing Contact's first name.  # noqa: E501

        :param first_name: The first_name of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this InlineResponse20014.  # noqa: E501

        Billing Contact's last name.  # noqa: E501

        :return: The last_name of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InlineResponse20014.

        Billing Contact's last name.  # noqa: E501

        :param last_name: The last_name of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this InlineResponse20014.  # noqa: E501

        Billing Contact's email address.  # noqa: E501

        :return: The email of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20014.

        Billing Contact's email address.  # noqa: E501

        :param email: The email of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this InlineResponse20014.  # noqa: E501

        Billing Contact's phone number.  # noqa: E501

        :return: The phone_number of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InlineResponse20014.

        Billing Contact's phone number.  # noqa: E501

        :param phone_number: The phone_number of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def address(self):
        """Gets the address of this InlineResponse20014.  # noqa: E501

        Billing Contact's address.  # noqa: E501

        :return: The address of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse20014.

        Billing Contact's address.  # noqa: E501

        :param address: The address of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def apt(self):
        """Gets the apt of this InlineResponse20014.  # noqa: E501

        Billing Contact's apartment/suite.  # noqa: E501

        :return: The apt of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._apt

    @apt.setter
    def apt(self, apt):
        """Sets the apt of this InlineResponse20014.

        Billing Contact's apartment/suite.  # noqa: E501

        :param apt: The apt of this InlineResponse20014.  # noqa: E501
        :type: str
        """

        self._apt = apt

    @property
    def city(self):
        """Gets the city of this InlineResponse20014.  # noqa: E501

        Billing Contact's city.  # noqa: E501

        :return: The city of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this InlineResponse20014.

        Billing Contact's city.  # noqa: E501

        :param city: The city of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this InlineResponse20014.  # noqa: E501

        Billing Contact's state.  # noqa: E501

        :return: The state of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20014.

        Billing Contact's state.  # noqa: E501

        :param state: The state of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this InlineResponse20014.  # noqa: E501

        Billing Contact's zip/postal code.  # noqa: E501

        :return: The zip of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this InlineResponse20014.

        Billing Contact's zip/postal code.  # noqa: E501

        :param zip: The zip of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")  # noqa: E501

        self._zip = zip

    @property
    def country(self):
        """Gets the country of this InlineResponse20014.  # noqa: E501

        Billing Contact's Country [ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) in abbreviated format.  # noqa: E501

        :return: The country of this InlineResponse20014.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20014.

        Billing Contact's Country [ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) in abbreviated format.  # noqa: E501

        :param country: The country of this InlineResponse20014.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20014, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20014):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
