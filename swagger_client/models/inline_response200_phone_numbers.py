# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse200PhoneNumbers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'number': 'str',
        'source': 'str',
        'status': 'str',
        'number_type': 'str',
        'location': 'str',
        'assignee': 'InlineResponse200Assignee',
        'site': 'InlineResponse200Site'
    }

    attribute_map = {
        'id': 'id',
        'number': 'number',
        'source': 'source',
        'status': 'status',
        'number_type': 'number_type',
        'location': 'location',
        'assignee': 'assignee',
        'site': 'site'
    }

    def __init__(self, id=None, number=None, source=None, status=None, number_type=None, location=None, assignee=None, site=None):  # noqa: E501
        """InlineResponse200PhoneNumbers - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._number = None
        self._source = None
        self._status = None
        self._number_type = None
        self._location = None
        self._assignee = None
        self._site = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if number is not None:
            self.number = number
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if number_type is not None:
            self.number_type = number_type
        if location is not None:
            self.location = location
        if assignee is not None:
            self.assignee = assignee
        if site is not None:
            self.site = site

    @property
    def id(self):
        """Gets the id of this InlineResponse200PhoneNumbers.  # noqa: E501

        Unique Identifier of the Phone Number.  # noqa: E501

        :return: The id of this InlineResponse200PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200PhoneNumbers.

        Unique Identifier of the Phone Number.  # noqa: E501

        :param id: The id of this InlineResponse200PhoneNumbers.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this InlineResponse200PhoneNumbers.  # noqa: E501

        Phone number in E164 format.  # noqa: E501

        :return: The number of this InlineResponse200PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InlineResponse200PhoneNumbers.

        Phone number in E164 format.  # noqa: E501

        :param number: The number of this InlineResponse200PhoneNumbers.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def source(self):
        """Gets the source of this InlineResponse200PhoneNumbers.  # noqa: E501

        Source of phone number.  # noqa: E501

        :return: The source of this InlineResponse200PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InlineResponse200PhoneNumbers.

        Source of phone number.  # noqa: E501

        :param source: The source of this InlineResponse200PhoneNumbers.  # noqa: E501
        :type: str
        """
        allowed_values = ["internal", "external"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def status(self):
        """Gets the status of this InlineResponse200PhoneNumbers.  # noqa: E501

        Status of the number.  # noqa: E501

        :return: The status of this InlineResponse200PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200PhoneNumbers.

        Status of the number.  # noqa: E501

        :param status: The status of this InlineResponse200PhoneNumbers.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "available"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def number_type(self):
        """Gets the number_type of this InlineResponse200PhoneNumbers.  # noqa: E501

        The type of number. Values can be one of the following:<br> `toll`, `tollfree`  # noqa: E501

        :return: The number_type of this InlineResponse200PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._number_type

    @number_type.setter
    def number_type(self, number_type):
        """Sets the number_type of this InlineResponse200PhoneNumbers.

        The type of number. Values can be one of the following:<br> `toll`, `tollfree`  # noqa: E501

        :param number_type: The number_type of this InlineResponse200PhoneNumbers.  # noqa: E501
        :type: str
        """
        allowed_values = ["toll", "tollfree"]  # noqa: E501
        if number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `number_type` ({0}), must be one of {1}"  # noqa: E501
                .format(number_type, allowed_values)
            )

        self._number_type = number_type

    @property
    def location(self):
        """Gets the location of this InlineResponse200PhoneNumbers.  # noqa: E501

        Location (city, state and country) where the Phone number is assigned.  # noqa: E501

        :return: The location of this InlineResponse200PhoneNumbers.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse200PhoneNumbers.

        Location (city, state and country) where the Phone number is assigned.  # noqa: E501

        :param location: The location of this InlineResponse200PhoneNumbers.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def assignee(self):
        """Gets the assignee of this InlineResponse200PhoneNumbers.  # noqa: E501


        :return: The assignee of this InlineResponse200PhoneNumbers.  # noqa: E501
        :rtype: InlineResponse200Assignee
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this InlineResponse200PhoneNumbers.


        :param assignee: The assignee of this InlineResponse200PhoneNumbers.  # noqa: E501
        :type: InlineResponse200Assignee
        """

        self._assignee = assignee

    @property
    def site(self):
        """Gets the site of this InlineResponse200PhoneNumbers.  # noqa: E501


        :return: The site of this InlineResponse200PhoneNumbers.  # noqa: E501
        :rtype: InlineResponse200Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse200PhoneNumbers.


        :param site: The site of this InlineResponse200PhoneNumbers.  # noqa: E501
        :type: InlineResponse200Site
        """

        self._site = site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200PhoneNumbers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200PhoneNumbers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
