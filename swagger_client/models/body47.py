# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body47(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topic': 'str',
        'type': 'int',
        'start_time': 'datetime',
        'duration': 'int',
        'schedule_for': 'str',
        'timezone': 'str',
        'password': 'str',
        'agenda': 'str',
        'tracking_fields': 'list[UsersuserIdmeetingsTrackingFields]',
        'recurrence': 'UsersuserIdmeetingsRecurrence',
        'settings': 'UsersuserIdmeetingsSettings'
    }

    attribute_map = {
        'topic': 'topic',
        'type': 'type',
        'start_time': 'start_time',
        'duration': 'duration',
        'schedule_for': 'schedule_for',
        'timezone': 'timezone',
        'password': 'password',
        'agenda': 'agenda',
        'tracking_fields': 'tracking_fields',
        'recurrence': 'recurrence',
        'settings': 'settings'
    }

    def __init__(self, topic=None, type=None, start_time=None, duration=None, schedule_for=None, timezone=None, password=None, agenda=None, tracking_fields=None, recurrence=None, settings=None):  # noqa: E501
        """Body47 - a model defined in Swagger"""  # noqa: E501
        self._topic = None
        self._type = None
        self._start_time = None
        self._duration = None
        self._schedule_for = None
        self._timezone = None
        self._password = None
        self._agenda = None
        self._tracking_fields = None
        self._recurrence = None
        self._settings = None
        self.discriminator = None
        if topic is not None:
            self.topic = topic
        if type is not None:
            self.type = type
        if start_time is not None:
            self.start_time = start_time
        if duration is not None:
            self.duration = duration
        if schedule_for is not None:
            self.schedule_for = schedule_for
        if timezone is not None:
            self.timezone = timezone
        if password is not None:
            self.password = password
        if agenda is not None:
            self.agenda = agenda
        if tracking_fields is not None:
            self.tracking_fields = tracking_fields
        if recurrence is not None:
            self.recurrence = recurrence
        if settings is not None:
            self.settings = settings

    @property
    def topic(self):
        """Gets the topic of this Body47.  # noqa: E501

        Meeting topic.  # noqa: E501

        :return: The topic of this Body47.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Body47.

        Meeting topic.  # noqa: E501

        :param topic: The topic of this Body47.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def type(self):
        """Gets the type of this Body47.  # noqa: E501

        Meeting Type:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with fixed time.  # noqa: E501

        :return: The type of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Body47.

        Meeting Type:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with fixed time.  # noqa: E501

        :param type: The type of this Body47.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def start_time(self):
        """Gets the start_time of this Body47.  # noqa: E501

        Meeting start time. We support two formats for `start_time` - local time and GMT.<br>   To set time as GMT the format should be `yyyy-MM-dd`T`HH:mm:ssZ`. Example: \"2020-03-31T12:02:00Z\"  To set time using a specific timezone, use `yyyy-MM-dd`T`HH:mm:ss` format and specify the timezone [ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field OR leave it blank and the timezone set on your Zoom account will be used. You can also set the time as UTC as the timezone field.  The `start_time` should only be used for scheduled and / or recurring webinars with fixed time.  # noqa: E501

        :return: The start_time of this Body47.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Body47.

        Meeting start time. We support two formats for `start_time` - local time and GMT.<br>   To set time as GMT the format should be `yyyy-MM-dd`T`HH:mm:ssZ`. Example: \"2020-03-31T12:02:00Z\"  To set time using a specific timezone, use `yyyy-MM-dd`T`HH:mm:ss` format and specify the timezone [ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field OR leave it blank and the timezone set on your Zoom account will be used. You can also set the time as UTC as the timezone field.  The `start_time` should only be used for scheduled and / or recurring webinars with fixed time.  # noqa: E501

        :param start_time: The start_time of this Body47.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def duration(self):
        """Gets the duration of this Body47.  # noqa: E501

        Meeting duration (minutes). Used for scheduled meetings only.  # noqa: E501

        :return: The duration of this Body47.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Body47.

        Meeting duration (minutes). Used for scheduled meetings only.  # noqa: E501

        :param duration: The duration of this Body47.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def schedule_for(self):
        """Gets the schedule_for of this Body47.  # noqa: E501

        If you would like to schedule this meeting for someone else in your account, provide the Zoom user id or email address of the user here.  # noqa: E501

        :return: The schedule_for of this Body47.  # noqa: E501
        :rtype: str
        """
        return self._schedule_for

    @schedule_for.setter
    def schedule_for(self, schedule_for):
        """Sets the schedule_for of this Body47.

        If you would like to schedule this meeting for someone else in your account, provide the Zoom user id or email address of the user here.  # noqa: E501

        :param schedule_for: The schedule_for of this Body47.  # noqa: E501
        :type: str
        """

        self._schedule_for = schedule_for

    @property
    def timezone(self):
        """Gets the timezone of this Body47.  # noqa: E501

        Time zone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [time zone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list for supported time zones and their formats.  # noqa: E501

        :return: The timezone of this Body47.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Body47.

        Time zone to format start_time. For example, \"America/Los_Angeles\". For scheduled meetings only. Please reference our [time zone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list for supported time zones and their formats.  # noqa: E501

        :param timezone: The timezone of this Body47.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def password(self):
        """Gets the password of this Body47.  # noqa: E501

        Password to join the meeting. By default, password may only contain the following characters: [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.  **Note:** If the account owner or the admin has configured [minimum password requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the password value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.   # noqa: E501

        :return: The password of this Body47.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Body47.

        Password to join the meeting. By default, password may only contain the following characters: [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.  **Note:** If the account owner or the admin has configured [minimum password requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the password value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.   # noqa: E501

        :param password: The password of this Body47.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def agenda(self):
        """Gets the agenda of this Body47.  # noqa: E501

        Meeting description.  # noqa: E501

        :return: The agenda of this Body47.  # noqa: E501
        :rtype: str
        """
        return self._agenda

    @agenda.setter
    def agenda(self, agenda):
        """Sets the agenda of this Body47.

        Meeting description.  # noqa: E501

        :param agenda: The agenda of this Body47.  # noqa: E501
        :type: str
        """

        self._agenda = agenda

    @property
    def tracking_fields(self):
        """Gets the tracking_fields of this Body47.  # noqa: E501

        Tracking fields  # noqa: E501

        :return: The tracking_fields of this Body47.  # noqa: E501
        :rtype: list[UsersuserIdmeetingsTrackingFields]
        """
        return self._tracking_fields

    @tracking_fields.setter
    def tracking_fields(self, tracking_fields):
        """Sets the tracking_fields of this Body47.

        Tracking fields  # noqa: E501

        :param tracking_fields: The tracking_fields of this Body47.  # noqa: E501
        :type: list[UsersuserIdmeetingsTrackingFields]
        """

        self._tracking_fields = tracking_fields

    @property
    def recurrence(self):
        """Gets the recurrence of this Body47.  # noqa: E501


        :return: The recurrence of this Body47.  # noqa: E501
        :rtype: UsersuserIdmeetingsRecurrence
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this Body47.


        :param recurrence: The recurrence of this Body47.  # noqa: E501
        :type: UsersuserIdmeetingsRecurrence
        """

        self._recurrence = recurrence

    @property
    def settings(self):
        """Gets the settings of this Body47.  # noqa: E501


        :return: The settings of this Body47.  # noqa: E501
        :rtype: UsersuserIdmeetingsSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Body47.


        :param settings: The settings of this Body47.  # noqa: E501
        :type: UsersuserIdmeetingsSettings
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body47, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body47):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
