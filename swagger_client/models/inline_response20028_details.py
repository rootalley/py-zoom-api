# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20028Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'start_time': 'str',
        'end_time': 'str'
    }

    attribute_map = {
        'content': 'content',
        'start_time': 'start_time',
        'end_time': 'end_time'
    }

    def __init__(self, content=None, start_time=None, end_time=None):  # noqa: E501
        """InlineResponse20028Details - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._start_time = None
        self._end_time = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def content(self):
        """Gets the content of this InlineResponse20028Details.  # noqa: E501

        Type of content shared.  # noqa: E501

        :return: The content of this InlineResponse20028Details.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse20028Details.

        Type of content shared.  # noqa: E501

        :param content: The content of this InlineResponse20028Details.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20028Details.  # noqa: E501

        Start time of sharing.  # noqa: E501

        :return: The start_time of this InlineResponse20028Details.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20028Details.

        Start time of sharing.  # noqa: E501

        :param start_time: The start_time of this InlineResponse20028Details.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse20028Details.  # noqa: E501

        End time of sharing.  # noqa: E501

        :return: The end_time of this InlineResponse20028Details.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse20028Details.

        End time of sharing.  # noqa: E501

        :param end_time: The end_time of this InlineResponse20028Details.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20028Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20028Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
