# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body23(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'share_rc': 'bool',
        'room_connector_list': 'list[str]',
        'share_mc': 'bool',
        'meeting_connector_list': 'list[str]',
        'pay_mode': 'str'
    }

    attribute_map = {
        'share_rc': 'share_rc',
        'room_connector_list': 'room_connector_list',
        'share_mc': 'share_mc',
        'meeting_connector_list': 'meeting_connector_list',
        'pay_mode': 'pay_mode'
    }

    def __init__(self, share_rc=False, room_connector_list=None, share_mc=False, meeting_connector_list=None, pay_mode='master'):  # noqa: E501
        """Body23 - a model defined in Swagger"""  # noqa: E501
        self._share_rc = None
        self._room_connector_list = None
        self._share_mc = None
        self._meeting_connector_list = None
        self._pay_mode = None
        self.discriminator = None
        if share_rc is not None:
            self.share_rc = share_rc
        if room_connector_list is not None:
            self.room_connector_list = room_connector_list
        if share_mc is not None:
            self.share_mc = share_mc
        if meeting_connector_list is not None:
            self.meeting_connector_list = meeting_connector_list
        if pay_mode is not None:
            self.pay_mode = pay_mode

    @property
    def share_rc(self):
        """Gets the share_rc of this Body23.  # noqa: E501

        Enable/disable the option for a Sub Account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the Master Account. Virtual Room Connectors can only be used by On-prem users.  # noqa: E501

        :return: The share_rc of this Body23.  # noqa: E501
        :rtype: bool
        """
        return self._share_rc

    @share_rc.setter
    def share_rc(self, share_rc):
        """Sets the share_rc of this Body23.

        Enable/disable the option for a Sub Account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the Master Account. Virtual Room Connectors can only be used by On-prem users.  # noqa: E501

        :param share_rc: The share_rc of this Body23.  # noqa: E501
        :type: bool
        """

        self._share_rc = share_rc

    @property
    def room_connector_list(self):
        """Gets the room_connector_list of this Body23.  # noqa: E501

        Specify the IP addresses of the Room Connectors that you would like to share with the Sub Account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a Master Account will be shared with the Sub Account.   **Note:** This option can only be used if the value of `share_rc` is set to `true`.  # noqa: E501

        :return: The room_connector_list of this Body23.  # noqa: E501
        :rtype: list[str]
        """
        return self._room_connector_list

    @room_connector_list.setter
    def room_connector_list(self, room_connector_list):
        """Sets the room_connector_list of this Body23.

        Specify the IP addresses of the Room Connectors that you would like to share with the Sub Account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a Master Account will be shared with the Sub Account.   **Note:** This option can only be used if the value of `share_rc` is set to `true`.  # noqa: E501

        :param room_connector_list: The room_connector_list of this Body23.  # noqa: E501
        :type: list[str]
        """

        self._room_connector_list = room_connector_list

    @property
    def share_mc(self):
        """Gets the share_mc of this Body23.  # noqa: E501

        Enable/disable the option for a Sub Account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the Master Account. Meeting Connectors can only be used by On-prem users.  # noqa: E501

        :return: The share_mc of this Body23.  # noqa: E501
        :rtype: bool
        """
        return self._share_mc

    @share_mc.setter
    def share_mc(self, share_mc):
        """Sets the share_mc of this Body23.

        Enable/disable the option for a Sub Account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the Master Account. Meeting Connectors can only be used by On-prem users.  # noqa: E501

        :param share_mc: The share_mc of this Body23.  # noqa: E501
        :type: bool
        """

        self._share_mc = share_mc

    @property
    def meeting_connector_list(self):
        """Gets the meeting_connector_list of this Body23.  # noqa: E501

        Specify the IP addresses of the Meeting Connectors that you would like to share with the Sub Account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a Master Account will be shared with the Sub Account.   **Note:** This option can only be used if the value of `share_mc` is set to `true`.  # noqa: E501

        :return: The meeting_connector_list of this Body23.  # noqa: E501
        :rtype: list[str]
        """
        return self._meeting_connector_list

    @meeting_connector_list.setter
    def meeting_connector_list(self, meeting_connector_list):
        """Sets the meeting_connector_list of this Body23.

        Specify the IP addresses of the Meeting Connectors that you would like to share with the Sub Account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a Master Account will be shared with the Sub Account.   **Note:** This option can only be used if the value of `share_mc` is set to `true`.  # noqa: E501

        :param meeting_connector_list: The meeting_connector_list of this Body23.  # noqa: E501
        :type: list[str]
        """

        self._meeting_connector_list = meeting_connector_list

    @property
    def pay_mode(self):
        """Gets the pay_mode of this Body23.  # noqa: E501

        Payee:<br>`master` - Master account holder pays.<br>`sub` - Sub account holder pays.  # noqa: E501

        :return: The pay_mode of this Body23.  # noqa: E501
        :rtype: str
        """
        return self._pay_mode

    @pay_mode.setter
    def pay_mode(self, pay_mode):
        """Sets the pay_mode of this Body23.

        Payee:<br>`master` - Master account holder pays.<br>`sub` - Sub account holder pays.  # noqa: E501

        :param pay_mode: The pay_mode of this Body23.  # noqa: E501
        :type: str
        """
        allowed_values = ["master", "sub"]  # noqa: E501
        if pay_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(pay_mode, allowed_values)
            )

        self._pay_mode = pay_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body23, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body23):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
