# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2005Contacts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'presence_status': 'str',
        'phone_number': 'str',
        'sip_phone_number': 'str',
        'direct_numbers': 'list[str]',
        'extension_number': 'str',
        'im_group_id': 'str',
        'im_group_name': 'str',
        'dept': 'str',
        'job_title': 'str',
        'location': 'str'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'presence_status': 'presence_status',
        'phone_number': 'phone_number',
        'sip_phone_number': 'sip_phone_number',
        'direct_numbers': 'direct_numbers',
        'extension_number': 'extension_number',
        'im_group_id': 'im_group_id',
        'im_group_name': 'im_group_name',
        'dept': 'dept',
        'job_title': 'job_title',
        'location': 'location'
    }

    def __init__(self, id=None, email=None, first_name=None, last_name=None, presence_status=None, phone_number=None, sip_phone_number=None, direct_numbers=None, extension_number=None, im_group_id=None, im_group_name=None, dept=None, job_title=None, location=None):  # noqa: E501
        """InlineResponse2005Contacts - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._presence_status = None
        self._phone_number = None
        self._sip_phone_number = None
        self._direct_numbers = None
        self._extension_number = None
        self._im_group_id = None
        self._im_group_name = None
        self._dept = None
        self._job_title = None
        self._location = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if presence_status is not None:
            self.presence_status = presence_status
        if phone_number is not None:
            self.phone_number = phone_number
        if sip_phone_number is not None:
            self.sip_phone_number = sip_phone_number
        if direct_numbers is not None:
            self.direct_numbers = direct_numbers
        if extension_number is not None:
            self.extension_number = extension_number
        if im_group_id is not None:
            self.im_group_id = im_group_id
        if im_group_name is not None:
            self.im_group_name = im_group_name
        if dept is not None:
            self.dept = dept
        if job_title is not None:
            self.job_title = job_title
        if location is not None:
            self.location = location

    @property
    def id(self):
        """Gets the id of this InlineResponse2005Contacts.  # noqa: E501

        User ID of the contact.  # noqa: E501

        :return: The id of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2005Contacts.

        User ID of the contact.  # noqa: E501

        :param id: The id of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this InlineResponse2005Contacts.  # noqa: E501

        Email address of the contact.  # noqa: E501

        :return: The email of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse2005Contacts.

        Email address of the contact.  # noqa: E501

        :param email: The email of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this InlineResponse2005Contacts.  # noqa: E501

        First name of the contact.  # noqa: E501

        :return: The first_name of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InlineResponse2005Contacts.

        First name of the contact.  # noqa: E501

        :param first_name: The first_name of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this InlineResponse2005Contacts.  # noqa: E501

        Last name of the contact.  # noqa: E501

        :return: The last_name of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InlineResponse2005Contacts.

        Last name of the contact.  # noqa: E501

        :param last_name: The last_name of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def presence_status(self):
        """Gets the presence_status of this InlineResponse2005Contacts.  # noqa: E501

        Presence status of the contact in Zoom Client. The value of this field can be one of the following: `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`  # noqa: E501

        :return: The presence_status of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._presence_status

    @presence_status.setter
    def presence_status(self, presence_status):
        """Sets the presence_status of this InlineResponse2005Contacts.

        Presence status of the contact in Zoom Client. The value of this field can be one of the following: `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`  # noqa: E501

        :param presence_status: The presence_status of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """
        allowed_values = ["Do_Not_Disturb", "away", "Available", "Offline"]  # noqa: E501
        if presence_status not in allowed_values:
            raise ValueError(
                "Invalid value for `presence_status` ({0}), must be one of {1}"  # noqa: E501
                .format(presence_status, allowed_values)
            )

        self._presence_status = presence_status

    @property
    def phone_number(self):
        """Gets the phone_number of this InlineResponse2005Contacts.  # noqa: E501

        Phone number of the user.  # noqa: E501

        :return: The phone_number of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InlineResponse2005Contacts.

        Phone number of the user.  # noqa: E501

        :param phone_number: The phone_number of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def sip_phone_number(self):
        """Gets the sip_phone_number of this InlineResponse2005Contacts.  # noqa: E501

        SIP Phone number of the user. Returned only if user has SIP phone enabled.  # noqa: E501

        :return: The sip_phone_number of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._sip_phone_number

    @sip_phone_number.setter
    def sip_phone_number(self, sip_phone_number):
        """Sets the sip_phone_number of this InlineResponse2005Contacts.

        SIP Phone number of the user. Returned only if user has SIP phone enabled.  # noqa: E501

        :param sip_phone_number: The sip_phone_number of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._sip_phone_number = sip_phone_number

    @property
    def direct_numbers(self):
        """Gets the direct_numbers of this InlineResponse2005Contacts.  # noqa: E501

        Direct Number(s) of a user who has Zoom Phone license assigned.  # noqa: E501

        :return: The direct_numbers of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: list[str]
        """
        return self._direct_numbers

    @direct_numbers.setter
    def direct_numbers(self, direct_numbers):
        """Sets the direct_numbers of this InlineResponse2005Contacts.

        Direct Number(s) of a user who has Zoom Phone license assigned.  # noqa: E501

        :param direct_numbers: The direct_numbers of this InlineResponse2005Contacts.  # noqa: E501
        :type: list[str]
        """

        self._direct_numbers = direct_numbers

    @property
    def extension_number(self):
        """Gets the extension_number of this InlineResponse2005Contacts.  # noqa: E501

        Extension Number of a user who has Zoom Phone license assigned.  # noqa: E501

        :return: The extension_number of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._extension_number

    @extension_number.setter
    def extension_number(self, extension_number):
        """Sets the extension_number of this InlineResponse2005Contacts.

        Extension Number of a user who has Zoom Phone license assigned.  # noqa: E501

        :param extension_number: The extension_number of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._extension_number = extension_number

    @property
    def im_group_id(self):
        """Gets the im_group_id of this InlineResponse2005Contacts.  # noqa: E501

        Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.   # noqa: E501

        :return: The im_group_id of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._im_group_id

    @im_group_id.setter
    def im_group_id(self, im_group_id):
        """Sets the im_group_id of this InlineResponse2005Contacts.

        Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.   # noqa: E501

        :param im_group_id: The im_group_id of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._im_group_id = im_group_id

    @property
    def im_group_name(self):
        """Gets the im_group_name of this InlineResponse2005Contacts.  # noqa: E501

        Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.   # noqa: E501

        :return: The im_group_name of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._im_group_name

    @im_group_name.setter
    def im_group_name(self, im_group_name):
        """Sets the im_group_name of this InlineResponse2005Contacts.

        Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.   # noqa: E501

        :param im_group_name: The im_group_name of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._im_group_name = im_group_name

    @property
    def dept(self):
        """Gets the dept of this InlineResponse2005Contacts.  # noqa: E501

        Department of the contact as provided in the user's Zoom profile.  # noqa: E501

        :return: The dept of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this InlineResponse2005Contacts.

        Department of the contact as provided in the user's Zoom profile.  # noqa: E501

        :param dept: The dept of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def job_title(self):
        """Gets the job_title of this InlineResponse2005Contacts.  # noqa: E501

        Department of the user as provided in the user's Zoom profile.  # noqa: E501

        :return: The job_title of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this InlineResponse2005Contacts.

        Department of the user as provided in the user's Zoom profile.  # noqa: E501

        :param job_title: The job_title of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def location(self):
        """Gets the location of this InlineResponse2005Contacts.  # noqa: E501

        Location of the user as provided in the user's Zoom profile.  # noqa: E501

        :return: The location of this InlineResponse2005Contacts.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse2005Contacts.

        Location of the user as provided in the user's Zoom profile.  # noqa: E501

        :param location: The location of this InlineResponse2005Contacts.  # noqa: E501
        :type: str
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005Contacts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005Contacts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
