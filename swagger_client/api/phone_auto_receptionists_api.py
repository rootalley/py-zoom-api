# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PhoneAutoReceptionistsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_auto_receptionist(self, **kwargs):  # noqa: E501
        """Add an Auto Receptionist  # noqa: E501

        Auto receptionists answer calls with a personalized recording and routes calls to a phone user, call queue, common area phone, voicemail or an IVR system. Use this API to add an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-) to a Zoom Phone.<br>  **Prerequisites:**<br> * Pro or higher account with Zoom Phone license.<br> **Scopes:** `phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_auto_receptionist(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body190 body:
        :return: InlineResponse20126
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_auto_receptionist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_auto_receptionist_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_auto_receptionist_with_http_info(self, **kwargs):  # noqa: E501
        """Add an Auto Receptionist  # noqa: E501

        Auto receptionists answer calls with a personalized recording and routes calls to a phone user, call queue, common area phone, voicemail or an IVR system. Use this API to add an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-) to a Zoom Phone.<br>  **Prerequisites:**<br> * Pro or higher account with Zoom Phone license.<br> **Scopes:** `phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_auto_receptionist_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body190 body:
        :return: InlineResponse20126
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'site_id' in params:
            form_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20126',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_auto_receptionist(self, **kwargs):  # noqa: E501
        """Add an Auto Receptionist  # noqa: E501

        Auto receptionists answer calls with a personalized recording and routes calls to a phone user, call queue, common area phone, voicemail or an IVR system. Use this API to add an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-) to a Zoom Phone.<br>  **Prerequisites:**<br> * Pro or higher account with Zoom Phone license.<br> **Scopes:** `phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_auto_receptionist(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id:
        :param str name:
        :return: InlineResponse20126
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_auto_receptionist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_auto_receptionist_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_auto_receptionist_with_http_info(self, **kwargs):  # noqa: E501
        """Add an Auto Receptionist  # noqa: E501

        Auto receptionists answer calls with a personalized recording and routes calls to a phone user, call queue, common area phone, voicemail or an IVR system. Use this API to add an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-) to a Zoom Phone.<br>  **Prerequisites:**<br> * Pro or higher account with Zoom Phone license.<br> **Scopes:** `phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_auto_receptionist_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id:
        :param str name:
        :return: InlineResponse20126
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'site_id' in params:
            form_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20126',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_numbers_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Assign Phone Numbers  # noqa: E501

        Assign available phone numbers to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). The available numbers can be retrieved using the List Phone Numbers API with `type` query parameter set to \"unassigned\".  **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique Identifier of the Auto Receptionist. It can be retrieved from the [List Sites API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites). (required)
        :param Body175 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_numbers_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Assign Phone Numbers  # noqa: E501

        Assign available phone numbers to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). The available numbers can be retrieved using the List Phone Numbers API with `type` query parameter set to \"unassigned\".  **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique Identifier of the Auto Receptionist. It can be retrieved from the [List Sites API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites). (required)
        :param Body175 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_numbers_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `assign_phone_numbers_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_numbers' in params:
            form_params.append(('phone_numbers', params['phone_numbers']))  # noqa: E501
            collection_formats['phone_numbers'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_numbers_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Assign Phone Numbers  # noqa: E501

        Assign available phone numbers to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). The available numbers can be retrieved using the List Phone Numbers API with `type` query parameter set to \"unassigned\".  **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique Identifier of the Auto Receptionist. It can be retrieved from the [List Sites API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites). (required)
        :param list[PhoneautoReceptionistsautoReceptionistIdphoneNumbersPhoneNumbers] phone_numbers:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_numbers_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Assign Phone Numbers  # noqa: E501

        Assign available phone numbers to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). The available numbers can be retrieved using the List Phone Numbers API with `type` query parameter set to \"unassigned\".  **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique Identifier of the Auto Receptionist. It can be retrieved from the [List Sites API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites). (required)
        :param list[PhoneautoReceptionistsautoReceptionistIdphoneNumbersPhoneNumbers] phone_numbers:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'phone_numbers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_numbers_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `assign_phone_numbers_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_numbers' in params:
            form_params.append(('phone_numbers', params['phone_numbers']))  # noqa: E501
            collection_formats['phone_numbers'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_a_phone_num_auto_receptionist(self, auto_receptionist_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a Phone Number  # noqa: E501

        Unassign a specific phone number that was previously assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_a_phone_num_auto_receptionist(auto_receptionist_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique identifier of the auto receptionist. This can be retrieved from the List Phone Sites API. (required)
        :param str phone_number_id: Unique Identifier of the phone number or provide the actual phone number in e164 format (example: +19995550123). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_a_phone_num_auto_receptionist_with_http_info(auto_receptionist_id, phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_a_phone_num_auto_receptionist_with_http_info(auto_receptionist_id, phone_number_id, **kwargs)  # noqa: E501
            return data

    def unassign_a_phone_num_auto_receptionist_with_http_info(self, auto_receptionist_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a Phone Number  # noqa: E501

        Unassign a specific phone number that was previously assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_a_phone_num_auto_receptionist_with_http_info(auto_receptionist_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique identifier of the auto receptionist. This can be retrieved from the List Phone Sites API. (required)
        :param str phone_number_id: Unique Identifier of the phone number or provide the actual phone number in e164 format (example: +19995550123). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'phone_number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_a_phone_num_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `unassign_a_phone_num_auto_receptionist`")  # noqa: E501
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `unassign_a_phone_num_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_all_phone_nums_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Unassign all Phone Numbers  # noqa: E501

        Unassign all phone numbers that were previously assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_all_phone_nums_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_all_phone_nums_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_all_phone_nums_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def unassign_all_phone_nums_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Unassign all Phone Numbers  # noqa: E501

        Unassign all phone numbers that were previously assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_all_phone_nums_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_all_phone_nums_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `unassign_all_phone_nums_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/phone_numbers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Update Auto Receptionist Details   # noqa: E501

        An auto receptionist answers calls with a personalized recording and routes calls to a phone user, call queue, common area phone, or voicemail. An auto receptionist can also be set up so that it routes calls to an interactive voice response (IVR) system to allow callers to select the routing options.<br> Use this API to [change information](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-#h_1d5ffc56-6ba3-4ce5-9d86-4a1a1ee743f3) such as display name and extension number assigned to the main auto receptionist.<br><br> **Prerequisites:**<br> * Pro or higher account with Zoom Phone license.<br> **Scopes:** `phone:write:admin` <br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique Identifier of the Auto Receptionist. It can be retrieved from the [List Sites API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites). (required)
        :param Body173 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def update_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Update Auto Receptionist Details   # noqa: E501

        An auto receptionist answers calls with a personalized recording and routes calls to a phone user, call queue, common area phone, or voicemail. An auto receptionist can also be set up so that it routes calls to an interactive voice response (IVR) system to allow callers to select the routing options.<br> Use this API to [change information](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-#h_1d5ffc56-6ba3-4ce5-9d86-4a1a1ee743f3) such as display name and extension number assigned to the main auto receptionist.<br><br> **Prerequisites:**<br> * Pro or higher account with Zoom Phone license.<br> **Scopes:** `phone:write:admin` <br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique Identifier of the Auto Receptionist. It can be retrieved from the [List Sites API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites). (required)
        :param Body173 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `update_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'extension_number' in params:
            form_params.append(('extension_number', params['extension_number']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Update Auto Receptionist Details   # noqa: E501

        An auto receptionist answers calls with a personalized recording and routes calls to a phone user, call queue, common area phone, or voicemail. An auto receptionist can also be set up so that it routes calls to an interactive voice response (IVR) system to allow callers to select the routing options.<br> Use this API to [change information](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-#h_1d5ffc56-6ba3-4ce5-9d86-4a1a1ee743f3) such as display name and extension number assigned to the main auto receptionist.<br><br> **Prerequisites:**<br> * Pro or higher account with Zoom Phone license.<br> **Scopes:** `phone:write:admin` <br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique Identifier of the Auto Receptionist. It can be retrieved from the [List Sites API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites). (required)
        :param str name:
        :param int extension_number:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def update_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Update Auto Receptionist Details   # noqa: E501

        An auto receptionist answers calls with a personalized recording and routes calls to a phone user, call queue, common area phone, or voicemail. An auto receptionist can also be set up so that it routes calls to an interactive voice response (IVR) system to allow callers to select the routing options.<br> Use this API to [change information](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-#h_1d5ffc56-6ba3-4ce5-9d86-4a1a1ee743f3) such as display name and extension number assigned to the main auto receptionist.<br><br> **Prerequisites:**<br> * Pro or higher account with Zoom Phone license.<br> **Scopes:** `phone:write:admin` <br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: Unique Identifier of the Auto Receptionist. It can be retrieved from the [List Sites API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-site/listphonesites). (required)
        :param str name:
        :param int extension_number:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'name', 'extension_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `update_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'extension_number' in params:
            form_params.append(('extension_number', params['extension_number']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
