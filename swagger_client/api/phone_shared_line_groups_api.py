# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PhoneSharedLineGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_members_to_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Add Members to a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to [add members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_7cb42370-48f6-4a8f-84f4-c6eee4d9f0ca) to a Shared Line Group. Note that a member can only be added to one shared line group.   **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the shared line group. (required)
        :param Body186 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_members_to_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_members_to_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def add_members_to_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Add Members to a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to [add members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_7cb42370-48f6-4a8f-84f4-c6eee4d9f0ca) to a Shared Line Group. Note that a member can only be added to one shared line group.   **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the shared line group. (required)
        :param Body186 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_members_to_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `add_members_to_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_members_to_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Add Members to a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to [add members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_7cb42370-48f6-4a8f-84f4-c6eee4d9f0ca) to a Shared Line Group. Note that a member can only be added to one shared line group.   **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the shared line group. (required)
        :param PhonesharedLineGroupssharedLineGroupIdmembersMembers members:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_members_to_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_members_to_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def add_members_to_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Add Members to a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to [add members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_7cb42370-48f6-4a8f-84f4-c6eee4d9f0ca) to a Shared Line Group. Note that a member can only be added to one shared line group.   **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the shared line group. (required)
        :param PhonesharedLineGroupssharedLineGroupIdmembersMembers members:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_members_to_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `add_members_to_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_numbers_slg(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Assign Phone Numbers  # noqa: E501

        Use this API to assign phone numbers to a shared line groups. These direct phone numbers will be shared among members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups). **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_slg(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the Shared Line Group. (required)
        :param Body188 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_numbers_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_numbers_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_numbers_slg_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Assign Phone Numbers  # noqa: E501

        Use this API to assign phone numbers to a shared line groups. These direct phone numbers will be shared among members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups). **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_slg_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the Shared Line Group. (required)
        :param Body188 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_numbers_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `assign_phone_numbers_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_numbers' in params:
            form_params.append(('phone_numbers', params['phone_numbers']))  # noqa: E501
            collection_formats['phone_numbers'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_numbers_slg(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Assign Phone Numbers  # noqa: E501

        Use this API to assign phone numbers to a shared line groups. These direct phone numbers will be shared among members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups). **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_slg(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the Shared Line Group. (required)
        :param list[PhonecallQueuescallQueueIdphoneNumbersPhoneNumbers] phone_numbers:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_numbers_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_numbers_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_numbers_slg_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Assign Phone Numbers  # noqa: E501

        Use this API to assign phone numbers to a shared line groups. These direct phone numbers will be shared among members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups). **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_slg_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the Shared Line Group. (required)
        :param list[PhonecallQueuescallQueueIdphoneNumbersPhoneNumbers] phone_numbers:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'phone_numbers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_numbers_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `assign_phone_numbers_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_numbers' in params:
            form_params.append(('phone_numbers', params['phone_numbers']))  # noqa: E501
            collection_formats['phone_numbers'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_member_slg(self, shared_line_group_id, member_id, **kwargs):  # noqa: E501
        """Unassign a Member From a Shared Line Group  # noqa: E501

        Members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) have access to the group's phone number and voicemail. Use this API to unassign **a specific member** from a Shared Line Group. **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_member_slg(shared_line_group_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the shared line group from which you would like to remove a member. (required)
        :param str member_id: Unique identifier of the member who is to be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_member_slg_with_http_info(shared_line_group_id, member_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_member_slg_with_http_info(shared_line_group_id, member_id, **kwargs)  # noqa: E501
            return data

    def delete_a_member_slg_with_http_info(self, shared_line_group_id, member_id, **kwargs):  # noqa: E501
        """Unassign a Member From a Shared Line Group  # noqa: E501

        Members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) have access to the group's phone number and voicemail. Use this API to unassign **a specific member** from a Shared Line Group. **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_member_slg_with_http_info(shared_line_group_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the shared line group from which you would like to remove a member. (required)
        :param str member_id: Unique identifier of the member who is to be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'member_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_member_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_a_member_slg`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params or
                params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `delete_a_member_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501
        if 'member_id' in params:
            path_params['memberId'] = params['member_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/members/{memberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_phone_number_slg(self, shared_line_group_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a Phone Number  # noqa: E501

        Use this API to unassign a specific phone number that was assigned to the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups). **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_phone_number_slg(shared_line_group_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique identifier of the shared line group from which you would like to unassign a phone number. (required)
        :param str phone_number_id: Unique identifier of the phone number which is to be unassigned. This can be retrieved from Get a Shared Line Group API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_phone_number_slg_with_http_info(shared_line_group_id, phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_phone_number_slg_with_http_info(shared_line_group_id, phone_number_id, **kwargs)  # noqa: E501
            return data

    def delete_a_phone_number_slg_with_http_info(self, shared_line_group_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a Phone Number  # noqa: E501

        Use this API to unassign a specific phone number that was assigned to the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups). **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_phone_number_slg_with_http_info(shared_line_group_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique identifier of the shared line group from which you would like to unassign a phone number. (required)
        :param str phone_number_id: Unique identifier of the phone number which is to be unassigned. This can be retrieved from Get a Shared Line Group API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'phone_number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_phone_number_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_a_phone_number_slg`")  # noqa: E501
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `delete_a_phone_number_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Delete a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. Use this API to delete a Shared Line Group.  **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the shared line group that you would like to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def delete_a_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Delete a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. Use this API to delete a Shared Line Group.  **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the shared line group that you would like to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_a_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_members_of_slg(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Unassign Members of a Shared Line Group  # noqa: E501

        Members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) have access to the group's phone number and voicemail. Use this API to unassign **all** the existing members from a Shared Line Group. **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_of_slg(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique identifier of the Shared Line Group that you would like to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_members_of_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_members_of_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def delete_members_of_slg_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Unassign Members of a Shared Line Group  # noqa: E501

        Members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) have access to the group's phone number and voicemail. Use this API to unassign **all** the existing members from a Shared Line Group. **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_of_slg_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique identifier of the Shared Line Group that you would like to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_members_of_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_members_of_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/members', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Get a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to list all the Shared Line Groups.  **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:read:admin` or `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the Shared Line Group. (required)
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def get_a_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Get a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to list all the Shared Line Groups.  **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:read:admin` or `phone:write:admin`    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique Identifier of the Shared Line Group. (required)
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `get_a_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20099',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_a_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Update a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to update information of a Shared Line Group.  **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_a_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique identifier of the shared line group that is to be updated. (required)
        :param Body184 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def update_a_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Update a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to update information of a Shared Line Group.  **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_a_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique identifier of the shared line group that is to be updated. (required)
        :param Body184 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_a_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `update_a_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'extension_number' in params:
            form_params.append(('extension_number', params['extension_number']))  # noqa: E501
        if 'primary_number' in params:
            form_params.append(('primary_number', params['primary_number']))  # noqa: E501
        if 'timezone' in params:
            form_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_a_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Update a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to update information of a Shared Line Group.  **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_a_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique identifier of the shared line group that is to be updated. (required)
        :param str display_name:
        :param int extension_number:
        :param PhonesharedLineGroupssharedLineGroupIdPrimaryNumber primary_number:
        :param str timezone:
        :param str status:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def update_a_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Update a Shared Line Group  # noqa: E501

        A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common area phones. This gives members of the shared line group access to the group's direct phone number and voicemail. Use this API to update information of a Shared Line Group.  **Prerequisties:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_a_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: Unique identifier of the shared line group that is to be updated. (required)
        :param str display_name:
        :param int extension_number:
        :param PhonesharedLineGroupssharedLineGroupIdPrimaryNumber primary_number:
        :param str timezone:
        :param str status:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'display_name', 'extension_number', 'primary_number', 'timezone', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_a_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `update_a_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'extension_number' in params:
            form_params.append(('extension_number', params['extension_number']))  # noqa: E501
        if 'primary_number' in params:
            form_params.append(('primary_number', params['primary_number']))  # noqa: E501
        if 'timezone' in params:
            form_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
