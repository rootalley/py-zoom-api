# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PhoneCallQueuesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_members_to_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Add Members to a Call Queue  # noqa: E501

        Add phone users and/or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) as members to a specific Call Queue.<br><br> **Prerequisites:**<br> * Pro or higher account plan. * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param Body167 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_members_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_members_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def add_members_to_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Add Members to a Call Queue  # noqa: E501

        Add phone users and/or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) as members to a specific Call Queue.<br><br> **Prerequisites:**<br> * Pro or higher account plan. * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param Body167 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_members_to_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `add_members_to_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_members_to_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Add Members to a Call Queue  # noqa: E501

        Add phone users and/or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) as members to a specific Call Queue.<br><br> **Prerequisites:**<br> * Pro or higher account plan. * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param PhonecallQueuescallQueueIdmembersMembers members:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_members_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_members_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def add_members_to_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Add Members to a Call Queue  # noqa: E501

        Add phone users and/or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) as members to a specific Call Queue.<br><br> **Prerequisites:**<br> * Pro or higher account plan. * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param PhonecallQueuescallQueueIdmembersMembers members:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_members_to_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `add_members_to_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_to_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Assign Numbers to a Call Queue  # noqa: E501

        After [buying phone number(s)](https://support.zoom.us/hc/en-us/articles/360020808292#h_007ec8c2-0914-4265-8351-96ab23efa3ad), you can assign it, allowing callers to directly dial a number to reach a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br><br> **Prerequisites:**<br> * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_to_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param Body165 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_to_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Assign Numbers to a Call Queue  # noqa: E501

        After [buying phone number(s)](https://support.zoom.us/hc/en-us/articles/360020808292#h_007ec8c2-0914-4265-8351-96ab23efa3ad), you can assign it, allowing callers to directly dial a number to reach a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br><br> **Prerequisites:**<br> * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_to_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param Body165 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_to_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `assign_phone_to_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_numbers' in params:
            form_params.append(('phone_numbers', params['phone_numbers']))  # noqa: E501
            collection_formats['phone_numbers'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_to_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Assign Numbers to a Call Queue  # noqa: E501

        After [buying phone number(s)](https://support.zoom.us/hc/en-us/articles/360020808292#h_007ec8c2-0914-4265-8351-96ab23efa3ad), you can assign it, allowing callers to directly dial a number to reach a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br><br> **Prerequisites:**<br> * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_to_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param list[PhonecallQueuescallQueueIdphoneNumbersPhoneNumbers] phone_numbers:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_to_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Assign Numbers to a Call Queue  # noqa: E501

        After [buying phone number(s)](https://support.zoom.us/hc/en-us/articles/360020808292#h_007ec8c2-0914-4265-8351-96ab23efa3ad), you can assign it, allowing callers to directly dial a number to reach a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br><br> **Prerequisites:**<br> * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_to_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param list[PhonecallQueuescallQueueIdphoneNumbersPhoneNumbers] phone_numbers:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'phone_numbers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_to_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `assign_phone_to_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_numbers' in params:
            form_params.append(('phone_numbers', params['phone_numbers']))  # noqa: E501
            collection_formats['phone_numbers'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_call_queue_manager(self, call_queue_id, **kwargs):  # noqa: E501
        """Change Call Queue Manager  # noqa: E501

        A call queue manager has the privileges to maanage the call queue's voicemail inbox and recordings, change all call queue settings and call queue policy settings.<br><br> Use this API to to set another phone user as the [call queue manager](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_db06854b-e6a3-4afe-ba15-baf58f31f90c). **Prerequisites:**<br> * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_call_queue_manager(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param Body169 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_call_queue_manager_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_call_queue_manager_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def change_call_queue_manager_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Change Call Queue Manager  # noqa: E501

        A call queue manager has the privileges to maanage the call queue's voicemail inbox and recordings, change all call queue settings and call queue policy settings.<br><br> Use this API to to set another phone user as the [call queue manager](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_db06854b-e6a3-4afe-ba15-baf58f31f90c). **Prerequisites:**<br> * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_call_queue_manager_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param Body169 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_call_queue_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `change_call_queue_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'member_id' in params:
            form_params.append(('member_id', params['member_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/manager', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_call_queue_manager(self, call_queue_id, **kwargs):  # noqa: E501
        """Change Call Queue Manager  # noqa: E501

        A call queue manager has the privileges to maanage the call queue's voicemail inbox and recordings, change all call queue settings and call queue policy settings.<br><br> Use this API to to set another phone user as the [call queue manager](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_db06854b-e6a3-4afe-ba15-baf58f31f90c). **Prerequisites:**<br> * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_call_queue_manager(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param str member_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_call_queue_manager_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_call_queue_manager_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def change_call_queue_manager_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Change Call Queue Manager  # noqa: E501

        A call queue manager has the privileges to maanage the call queue's voicemail inbox and recordings, change all call queue settings and call queue policy settings.<br><br> Use this API to to set another phone user as the [call queue manager](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_db06854b-e6a3-4afe-ba15-baf58f31f90c). **Prerequisites:**<br> * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_call_queue_manager_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param str member_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'member_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_call_queue_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `change_call_queue_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'member_id' in params:
            form_params.append(('member_id', params['member_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/manager', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_call_queue(self, **kwargs):  # noqa: E501
        """Create a Call Queue  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to [create a call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_e81faeeb-9184-429a-aaea-df49ff5ff413).<br> You can add phone users or common area phones to call queues.  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_call_queue(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body161 body:
        :return: InlineResponse20123
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_call_queue_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_call_queue_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_call_queue_with_http_info(self, **kwargs):  # noqa: E501
        """Create a Call Queue  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to [create a call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_e81faeeb-9184-429a-aaea-df49ff5ff413).<br> You can add phone users or common area phones to call queues.  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_call_queue_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body161 body:
        :return: InlineResponse20123
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_call_queue" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'site_id' in params:
            form_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'extension_number' in params:
            form_params.append(('extension_number', params['extension_number']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20123',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_call_queue(self, **kwargs):  # noqa: E501
        """Create a Call Queue  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to [create a call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_e81faeeb-9184-429a-aaea-df49ff5ff413).<br> You can add phone users or common area phones to call queues.  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_call_queue(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id:
        :param str name:
        :param int extension_number:
        :param str description:
        :param PhonecallQueuesMembers members:
        :return: InlineResponse20123
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_call_queue_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_call_queue_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_call_queue_with_http_info(self, **kwargs):  # noqa: E501
        """Create a Call Queue  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to [create a call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_e81faeeb-9184-429a-aaea-df49ff5ff413).<br> You can add phone users or common area phones to call queues.  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_call_queue_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id:
        :param str name:
        :param int extension_number:
        :param str description:
        :param PhonecallQueuesMembers members:
        :return: InlineResponse20123
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'name', 'extension_number', 'description', 'members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_call_queue" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'site_id' in params:
            form_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'extension_number' in params:
            form_params.append(('extension_number', params['extension_number']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20123',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Delete a Call Queue  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to delete a Call Queue.<br>  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the call queue. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def delete_a_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Delete a Call Queue  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to delete a Call Queue.<br>  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the call queue. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `delete_a_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Get Call Queue Details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to get information on a specific Call Queue.<br><br>  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:read:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. This can be retrieved from [List Call Queues API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-call-queues/listcallqueues). (required)
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_a_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def get_a_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Get Call Queue Details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to get information on a specific Call Queue.<br><br>  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:read:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. This can be retrieved from [List Call Queues API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-call-queues/listcallqueues). (required)
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `get_a_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20091',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_call_queue_recordings(self, call_queue_id, **kwargs):  # noqa: E501
        """Get Call Queue Recordings  # noqa: E501

        Use this API to view [call recordings](https://support.zoom.us/hc/en-us/articles/360038521091#h_cbc9f2a3-e06c-4daa-83d4-ddbceef9c77b) from the call queue.<br><br> **Prerequisites:**<br> * Pro or higher account with Zoom Phone license. * [Automatic call recordings](https://support.zoom.us/hc/en-us/articles/360033511872#h_fcb297bb-14e8-4094-91ca-dc61e1a18734) must be enabled in the Policy Settings for call queues. <br> **Scope:** `phone:read:admin`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_call_queue_recordings(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_call_queue_recordings_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_call_queue_recordings_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def get_call_queue_recordings_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Get Call Queue Recordings  # noqa: E501

        Use this API to view [call recordings](https://support.zoom.us/hc/en-us/articles/360038521091#h_cbc9f2a3-e06c-4daa-83d4-ddbceef9c77b) from the call queue.<br><br> **Prerequisites:**<br> * Pro or higher account with Zoom Phone license. * [Automatic call recordings](https://support.zoom.us/hc/en-us/articles/360033511872#h_fcb297bb-14e8-4094-91ca-dc61e1a18734) must be enabled in the Policy Settings for call queues. <br> **Scope:** `phone:read:admin`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_call_queue_recordings_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_call_queue_recordings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `get_call_queue_recordings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/recordings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200100',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_call_queues(self, **kwargs):  # noqa: E501
        """List Call Queues  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to list Call queues.<br><br> **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:read:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_call_queues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param int page_size: The number of records returned from a single API call.
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_call_queues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_call_queues_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_call_queues_with_http_info(self, **kwargs):  # noqa: E501
        """List Call Queues  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to list Call queues.<br><br> **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:read:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_call_queues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param int page_size: The number of records returned from a single API call.
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_page_token', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_call_queues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20090',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def un_assign_phone_num_call_queue(self, call_queue_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a Phone Number  # noqa: E501

        After assigning a phone number, you can unbind it if you don't want it to be assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues). Use this API to unbind a phone number from a Call Queue. After successful unbinding, the number will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).<br><br> **Prerequisites:** * Pro or higher account palan * Account owner or admin permissions * Zoom Phone license <br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.un_assign_phone_num_call_queue(call_queue_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. This can be retrieved from the List Call Queues API. (required)
        :param str phone_number_id: Unique Identifier of the Phone Number.  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.un_assign_phone_num_call_queue_with_http_info(call_queue_id, phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.un_assign_phone_num_call_queue_with_http_info(call_queue_id, phone_number_id, **kwargs)  # noqa: E501
            return data

    def un_assign_phone_num_call_queue_with_http_info(self, call_queue_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a Phone Number  # noqa: E501

        After assigning a phone number, you can unbind it if you don't want it to be assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues). Use this API to unbind a phone number from a Call Queue. After successful unbinding, the number will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).<br><br> **Prerequisites:** * Pro or higher account palan * Account owner or admin permissions * Zoom Phone license <br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.un_assign_phone_num_call_queue_with_http_info(call_queue_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. This can be retrieved from the List Call Queues API. (required)
        :param str phone_number_id: Unique Identifier of the Phone Number.  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'phone_number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method un_assign_phone_num_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `un_assign_phone_num_call_queue`")  # noqa: E501
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `un_assign_phone_num_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_a_phone_num_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Unassign all Phone Numbers  # noqa: E501

        Use this API to unbind all phone numbers that are assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues) After successful unbinding, the numbers will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).<br> If you only need to unassign a specific phone number, use the Unassign a Phone Number API instead. <br> **Prerequisites:** * Pro or higher account palan * Account owner or admin permissions * Zoom Phone license <br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_a_phone_num_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. This can be retrieved from List Call Queues API. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_a_phone_num_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_a_phone_num_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def unassign_a_phone_num_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Unassign all Phone Numbers  # noqa: E501

        Use this API to unbind all phone numbers that are assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues) After successful unbinding, the numbers will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).<br> If you only need to unassign a specific phone number, use the Unassign a Phone Number API instead. <br> **Prerequisites:** * Pro or higher account palan * Account owner or admin permissions * Zoom Phone license <br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_a_phone_num_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. This can be retrieved from List Call Queues API. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_a_phone_num_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `unassign_a_phone_num_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/phone_numbers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_all_members(self, call_queue_id, **kwargs):  # noqa: E501
        """Unassign all Members  # noqa: E501

        Use this API to remove all members from a Call Queue who were previously assigned to that Call Queue. The members could be phone users or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones). **Prerequisites:**<br> * Pro or higher account plan. * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_all_members(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_all_members_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_all_members_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def unassign_all_members_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Unassign all Members  # noqa: E501

        Use this API to remove all members from a Call Queue who were previously assigned to that Call Queue. The members could be phone users or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones). **Prerequisites:**<br> * Pro or higher account plan. * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_all_members_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_all_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `unassign_all_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/members', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_member_from_call_queue(self, call_queue_id, member_id, **kwargs):  # noqa: E501
        """Unassign a Member  # noqa: E501

        Use this API to remove a member from a Call Queue who was previously added to that Call Queue. The member could be a phone user or a [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones). A member who is a Call Queue Manager cannot be unassigned from the Call Queue using this API.  **Prerequisites:**<br> * Pro or higher account plan. * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_member_from_call_queue(call_queue_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue from which the member needs to be unassigned. (required)
        :param str member_id: Unique Identifier of the member who needs to be unassigned. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_member_from_call_queue_with_http_info(call_queue_id, member_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_member_from_call_queue_with_http_info(call_queue_id, member_id, **kwargs)  # noqa: E501
            return data

    def unassign_member_from_call_queue_with_http_info(self, call_queue_id, member_id, **kwargs):  # noqa: E501
        """Unassign a Member  # noqa: E501

        Use this API to remove a member from a Call Queue who was previously added to that Call Queue. The member could be a phone user or a [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones). A member who is a Call Queue Manager cannot be unassigned from the Call Queue using this API.  **Prerequisites:**<br> * Pro or higher account plan. * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_member_from_call_queue_with_http_info(call_queue_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue from which the member needs to be unassigned. (required)
        :param str member_id: Unique Identifier of the member who needs to be unassigned. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'member_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_member_from_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `unassign_member_from_call_queue`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params or
                params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `unassign_member_from_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501
        if 'member_id' in params:
            path_params['memberId'] = params['member_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/members/{memberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Update Call Queue Details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to update information of a specific Call Queue.<br>  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param Body163 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def update_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Update Call Queue Details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to update information of a specific Call Queue.<br>  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param Body163 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `update_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'site_id' in params:
            form_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'extension_number' in params:
            form_params.append(('extension_number', params['extension_number']))  # noqa: E501
        if 'timezone' in params:
            form_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Update Call Queue Details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to update information of a specific Call Queue.<br>  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param str name:
        :param str description:
        :param str site_id:
        :param int extension_number:
        :param str timezone:
        :param str status:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def update_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Update Call Queue Details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to update information of a specific Call Queue.<br>  **Prerequisites:**<br> * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique Identifier of the Call Queue. (required)
        :param str name:
        :param str description:
        :param str site_id:
        :param int extension_number:
        :param str timezone:
        :param str status:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'name', 'description', 'site_id', 'extension_number', 'timezone', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `update_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'site_id' in params:
            form_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'extension_number' in params:
            form_params.append(('extension_number', params['extension_number']))  # noqa: E501
        if 'timezone' in params:
            form_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
