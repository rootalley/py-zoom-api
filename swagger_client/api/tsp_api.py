# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TSPApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tsp(self, **kwargs):  # noqa: E501
        """Get Account's TSP Information  # noqa: E501

        Get information on Telephony Service Provider on an account level.<br><br> **Scopes:** `tsp:read:admin` <br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  **Prerequisites:**<br> * A Pro or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tsp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tsp_with_http_info(**kwargs)  # noqa: E501
            return data

    def tsp_with_http_info(self, **kwargs):  # noqa: E501
        """Get Account's TSP Information  # noqa: E501

        Get information on Telephony Service Provider on an account level.<br><br> **Scopes:** `tsp:read:admin` <br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  **Prerequisites:**<br> * A Pro or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tsp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tsp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tsp_update(self, body, **kwargs):  # noqa: E501
        """Update account's TSP information  # noqa: E501

        Update information of the Telephony Service Provider set up on an account.<br> **Prerequisites**:<br> TSP account option should be enabled.<br> **Scopes:** `tsp:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body76 body: TSP Account (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tsp_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.tsp_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def tsp_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update account's TSP information  # noqa: E501

        Update information of the Telephony Service Provider set up on an account.<br> **Prerequisites**:<br> TSP account option should be enabled.<br> **Scopes:** `tsp:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body76 body: TSP Account (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tsp_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tsp_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'tsp_provider' in params:
            form_params.append(('tsp_provider', params['tsp_provider']))  # noqa: E501
        if 'enable' in params:
            form_params.append(('enable', params['enable']))  # noqa: E501
        if 'tsp_enabled' in params:
            form_params.append(('tsp_enabled', params['tsp_enabled']))  # noqa: E501
        if 'master_account_setting_extended' in params:
            form_params.append(('master_account_setting_extended', params['master_account_setting_extended']))  # noqa: E501
        if 'modify_credential_forbidden' in params:
            form_params.append(('modify_credential_forbidden', params['modify_credential_forbidden']))  # noqa: E501
        if 'dial_in_number_unrestricted' in params:
            form_params.append(('dial_in_number_unrestricted', params['dial_in_number_unrestricted']))  # noqa: E501
        if 'tsp_bridge' in params:
            form_params.append(('tsp_bridge', params['tsp_bridge']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tsp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tsp_update(self, tsp_provider, enable, tsp_enabled, master_account_setting_extended, modify_credential_forbidden, dial_in_number_unrestricted, tsp_bridge, **kwargs):  # noqa: E501
        """Update account's TSP information  # noqa: E501

        Update information of the Telephony Service Provider set up on an account.<br> **Prerequisites**:<br> TSP account option should be enabled.<br> **Scopes:** `tsp:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_update(tsp_provider, enable, tsp_enabled, master_account_setting_extended, modify_credential_forbidden, dial_in_number_unrestricted, tsp_bridge, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tsp_provider: (required)
        :param bool enable: (required)
        :param bool tsp_enabled: (required)
        :param bool master_account_setting_extended: (required)
        :param bool modify_credential_forbidden: (required)
        :param bool dial_in_number_unrestricted: (required)
        :param str tsp_bridge: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tsp_update_with_http_info(tsp_provider, enable, tsp_enabled, master_account_setting_extended, modify_credential_forbidden, dial_in_number_unrestricted, tsp_bridge, **kwargs)  # noqa: E501
        else:
            (data) = self.tsp_update_with_http_info(tsp_provider, enable, tsp_enabled, master_account_setting_extended, modify_credential_forbidden, dial_in_number_unrestricted, tsp_bridge, **kwargs)  # noqa: E501
            return data

    def tsp_update_with_http_info(self, tsp_provider, enable, tsp_enabled, master_account_setting_extended, modify_credential_forbidden, dial_in_number_unrestricted, tsp_bridge, **kwargs):  # noqa: E501
        """Update account's TSP information  # noqa: E501

        Update information of the Telephony Service Provider set up on an account.<br> **Prerequisites**:<br> TSP account option should be enabled.<br> **Scopes:** `tsp:write:admin`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_update_with_http_info(tsp_provider, enable, tsp_enabled, master_account_setting_extended, modify_credential_forbidden, dial_in_number_unrestricted, tsp_bridge, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tsp_provider: (required)
        :param bool enable: (required)
        :param bool tsp_enabled: (required)
        :param bool master_account_setting_extended: (required)
        :param bool modify_credential_forbidden: (required)
        :param bool dial_in_number_unrestricted: (required)
        :param str tsp_bridge: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tsp_provider', 'enable', 'tsp_enabled', 'master_account_setting_extended', 'modify_credential_forbidden', 'dial_in_number_unrestricted', 'tsp_bridge']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tsp_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tsp_provider' is set
        if ('tsp_provider' not in params or
                params['tsp_provider'] is None):
            raise ValueError("Missing the required parameter `tsp_provider` when calling `tsp_update`")  # noqa: E501
        # verify the required parameter 'enable' is set
        if ('enable' not in params or
                params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `tsp_update`")  # noqa: E501
        # verify the required parameter 'tsp_enabled' is set
        if ('tsp_enabled' not in params or
                params['tsp_enabled'] is None):
            raise ValueError("Missing the required parameter `tsp_enabled` when calling `tsp_update`")  # noqa: E501
        # verify the required parameter 'master_account_setting_extended' is set
        if ('master_account_setting_extended' not in params or
                params['master_account_setting_extended'] is None):
            raise ValueError("Missing the required parameter `master_account_setting_extended` when calling `tsp_update`")  # noqa: E501
        # verify the required parameter 'modify_credential_forbidden' is set
        if ('modify_credential_forbidden' not in params or
                params['modify_credential_forbidden'] is None):
            raise ValueError("Missing the required parameter `modify_credential_forbidden` when calling `tsp_update`")  # noqa: E501
        # verify the required parameter 'dial_in_number_unrestricted' is set
        if ('dial_in_number_unrestricted' not in params or
                params['dial_in_number_unrestricted'] is None):
            raise ValueError("Missing the required parameter `dial_in_number_unrestricted` when calling `tsp_update`")  # noqa: E501
        # verify the required parameter 'tsp_bridge' is set
        if ('tsp_bridge' not in params or
                params['tsp_bridge'] is None):
            raise ValueError("Missing the required parameter `tsp_bridge` when calling `tsp_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'tsp_provider' in params:
            form_params.append(('tsp_provider', params['tsp_provider']))  # noqa: E501
        if 'enable' in params:
            form_params.append(('enable', params['enable']))  # noqa: E501
        if 'tsp_enabled' in params:
            form_params.append(('tsp_enabled', params['tsp_enabled']))  # noqa: E501
        if 'master_account_setting_extended' in params:
            form_params.append(('master_account_setting_extended', params['master_account_setting_extended']))  # noqa: E501
        if 'modify_credential_forbidden' in params:
            form_params.append(('modify_credential_forbidden', params['modify_credential_forbidden']))  # noqa: E501
        if 'dial_in_number_unrestricted' in params:
            form_params.append(('dial_in_number_unrestricted', params['dial_in_number_unrestricted']))  # noqa: E501
        if 'tsp_bridge' in params:
            form_params.append(('tsp_bridge', params['tsp_bridge']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tsp', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tsp_url_update(self, user_id, **kwargs):  # noqa: E501
        """Set Global Dial-in URL for a TSP User  # noqa: E501

        A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. <p></p> **Scopes:**`tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_url_update(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The userId or email address of the user. (required)
        :param TSPGlobalDialInURLSetting body: Global dial-in URL of the user.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tsp_url_update_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tsp_url_update_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def tsp_url_update_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Set Global Dial-in URL for a TSP User  # noqa: E501

        A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. <p></p> **Scopes:**`tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_url_update_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The userId or email address of the user. (required)
        :param TSPGlobalDialInURLSetting body: Global dial-in URL of the user.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tsp_url_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `tsp_url_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'audio_url' in params:
            form_params.append(('audio_url', params['audio_url']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp/settings', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tsp_url_update(self, user_id, **kwargs):  # noqa: E501
        """Set Global Dial-in URL for a TSP User  # noqa: E501

        A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. <p></p> **Scopes:**`tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_url_update(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The userId or email address of the user. (required)
        :param str audio_url:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tsp_url_update_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tsp_url_update_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def tsp_url_update_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Set Global Dial-in URL for a TSP User  # noqa: E501

        A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. <p></p> **Scopes:**`tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tsp_url_update_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The userId or email address of the user. (required)
        :param str audio_url:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'audio_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tsp_url_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `tsp_url_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'audio_url' in params:
            form_params.append(('audio_url', params['audio_url']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp/settings', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_ts_ps(self, user_id, **kwargs):  # noqa: E501
        """List User's TSP accounts  # noqa: E501

        A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.<br><br> **Scopes:** `tsp:read:admin` `tsp:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_ts_ps(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_ts_ps_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_ts_ps_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_ts_ps_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List User's TSP accounts  # noqa: E501

        A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.<br><br> **Scopes:** `tsp:read:admin` `tsp:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_ts_ps_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_ts_ps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_ts_ps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_tsp(self, user_id, tsp_id, **kwargs):  # noqa: E501
        """Get a User's TSP Account  # noqa: E501

        Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.<br><br> **Scopes:** `tsp:read:admin` `tsp:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp(user_id, tsp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param str tsp_id: TSP account ID. (required)
        :return: TSPAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_tsp_with_http_info(user_id, tsp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_tsp_with_http_info(user_id, tsp_id, **kwargs)  # noqa: E501
            return data

    def user_tsp_with_http_info(self, user_id, tsp_id, **kwargs):  # noqa: E501
        """Get a User's TSP Account  # noqa: E501

        Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.<br><br> **Scopes:** `tsp:read:admin` `tsp:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_with_http_info(user_id, tsp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param str tsp_id: TSP account ID. (required)
        :return: TSPAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'tsp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_tsp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_tsp`")  # noqa: E501
        # verify the required parameter 'tsp_id' is set
        if ('tsp_id' not in params or
                params['tsp_id'] is None):
            raise ValueError("Missing the required parameter `tsp_id` when calling `user_tsp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'tsp_id' in params:
            path_params['tspId'] = params['tsp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp/{tspId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TSPAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_tsp_create(self, body, user_id, **kwargs):  # noqa: E501
        """Add a User's TSP Account  # noqa: E501

        Add a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_create(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TSPAccountsList body: TSP account. (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :return: TSPAccountsList2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_tsp_create_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_tsp_create_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def user_tsp_create_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """Add a User's TSP Account  # noqa: E501

        Add a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_create_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TSPAccountsList body: TSP account. (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :return: TSPAccountsList2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_tsp_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_tsp_create`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_tsp_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_code' in params:
            form_params.append(('conference_code', params['conference_code']))  # noqa: E501
        if 'leader_pin' in params:
            form_params.append(('leader_pin', params['leader_pin']))  # noqa: E501
        if 'dial_in_numbers' in params:
            form_params.append(('dial_in_numbers', params['dial_in_numbers']))  # noqa: E501
            collection_formats['dial_in_numbers'] = 'multi'  # noqa: E501
        if 'tsp_bridge' in params:
            form_params.append(('tsp_bridge', params['tsp_bridge']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TSPAccountsList2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_tsp_create(self, conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, **kwargs):  # noqa: E501
        """Add a User's TSP Account  # noqa: E501

        Add a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_create(conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conference_code: (required)
        :param str leader_pin: (required)
        :param list[UsersuserIdtspDialInNumbers] dial_in_numbers: (required)
        :param str tsp_bridge: (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :return: TSPAccountsList2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_tsp_create_with_http_info(conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_tsp_create_with_http_info(conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, **kwargs)  # noqa: E501
            return data

    def user_tsp_create_with_http_info(self, conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, **kwargs):  # noqa: E501
        """Add a User's TSP Account  # noqa: E501

        Add a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_create_with_http_info(conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conference_code: (required)
        :param str leader_pin: (required)
        :param list[UsersuserIdtspDialInNumbers] dial_in_numbers: (required)
        :param str tsp_bridge: (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :return: TSPAccountsList2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_code', 'leader_pin', 'dial_in_numbers', 'tsp_bridge', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_tsp_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_code' is set
        if ('conference_code' not in params or
                params['conference_code'] is None):
            raise ValueError("Missing the required parameter `conference_code` when calling `user_tsp_create`")  # noqa: E501
        # verify the required parameter 'leader_pin' is set
        if ('leader_pin' not in params or
                params['leader_pin'] is None):
            raise ValueError("Missing the required parameter `leader_pin` when calling `user_tsp_create`")  # noqa: E501
        # verify the required parameter 'dial_in_numbers' is set
        if ('dial_in_numbers' not in params or
                params['dial_in_numbers'] is None):
            raise ValueError("Missing the required parameter `dial_in_numbers` when calling `user_tsp_create`")  # noqa: E501
        # verify the required parameter 'tsp_bridge' is set
        if ('tsp_bridge' not in params or
                params['tsp_bridge'] is None):
            raise ValueError("Missing the required parameter `tsp_bridge` when calling `user_tsp_create`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_tsp_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_code' in params:
            form_params.append(('conference_code', params['conference_code']))  # noqa: E501
        if 'leader_pin' in params:
            form_params.append(('leader_pin', params['leader_pin']))  # noqa: E501
        if 'dial_in_numbers' in params:
            form_params.append(('dial_in_numbers', params['dial_in_numbers']))  # noqa: E501
            collection_formats['dial_in_numbers'] = 'multi'  # noqa: E501
        if 'tsp_bridge' in params:
            form_params.append(('tsp_bridge', params['tsp_bridge']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TSPAccountsList2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_tsp_delete(self, user_id, tsp_id, **kwargs):  # noqa: E501
        """Delete a User's TSP Account  # noqa: E501

        Delete a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_delete(user_id, tsp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param str tsp_id: TSP account ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_tsp_delete_with_http_info(user_id, tsp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_tsp_delete_with_http_info(user_id, tsp_id, **kwargs)  # noqa: E501
            return data

    def user_tsp_delete_with_http_info(self, user_id, tsp_id, **kwargs):  # noqa: E501
        """Delete a User's TSP Account  # noqa: E501

        Delete a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_delete_with_http_info(user_id, tsp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param str tsp_id: TSP account ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'tsp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_tsp_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_tsp_delete`")  # noqa: E501
        # verify the required parameter 'tsp_id' is set
        if ('tsp_id' not in params or
                params['tsp_id'] is None):
            raise ValueError("Missing the required parameter `tsp_id` when calling `user_tsp_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'tsp_id' in params:
            path_params['tspId'] = params['tsp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp/{tspId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_tsp_update(self, body, user_id, tsp_id, **kwargs):  # noqa: E501
        """Update a TSP Account  # noqa: E501

        Update a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_update(body, user_id, tsp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TSPAccount1 body: TSP account. (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param str tsp_id: TSP account ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_tsp_update_with_http_info(body, user_id, tsp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_tsp_update_with_http_info(body, user_id, tsp_id, **kwargs)  # noqa: E501
            return data

    def user_tsp_update_with_http_info(self, body, user_id, tsp_id, **kwargs):  # noqa: E501
        """Update a TSP Account  # noqa: E501

        Update a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_update_with_http_info(body, user_id, tsp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TSPAccount1 body: TSP account. (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param str tsp_id: TSP account ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'tsp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_tsp_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_tsp_update`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_tsp_update`")  # noqa: E501
        # verify the required parameter 'tsp_id' is set
        if ('tsp_id' not in params or
                params['tsp_id'] is None):
            raise ValueError("Missing the required parameter `tsp_id` when calling `user_tsp_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'tsp_id' in params:
            path_params['tspId'] = params['tsp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_code' in params:
            form_params.append(('conference_code', params['conference_code']))  # noqa: E501
        if 'leader_pin' in params:
            form_params.append(('leader_pin', params['leader_pin']))  # noqa: E501
        if 'dial_in_numbers' in params:
            form_params.append(('dial_in_numbers', params['dial_in_numbers']))  # noqa: E501
            collection_formats['dial_in_numbers'] = 'multi'  # noqa: E501
        if 'tsp_bridge' in params:
            form_params.append(('tsp_bridge', params['tsp_bridge']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp/{tspId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_tsp_update(self, conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, tsp_id, **kwargs):  # noqa: E501
        """Update a TSP Account  # noqa: E501

        Update a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_update(conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, tsp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conference_code: (required)
        :param str leader_pin: (required)
        :param list[UsersuserIdtsptspIdDialInNumbers] dial_in_numbers: (required)
        :param str tsp_bridge: (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param str tsp_id: TSP account ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_tsp_update_with_http_info(conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, tsp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_tsp_update_with_http_info(conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, tsp_id, **kwargs)  # noqa: E501
            return data

    def user_tsp_update_with_http_info(self, conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, tsp_id, **kwargs):  # noqa: E501
        """Update a TSP Account  # noqa: E501

        Update a user's TSP account.<br><br> **Scopes:** `tsp:write:admin` `tsp:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_tsp_update_with_http_info(conference_code, leader_pin, dial_in_numbers, tsp_bridge, user_id, tsp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conference_code: (required)
        :param str leader_pin: (required)
        :param list[UsersuserIdtsptspIdDialInNumbers] dial_in_numbers: (required)
        :param str tsp_bridge: (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param str tsp_id: TSP account ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_code', 'leader_pin', 'dial_in_numbers', 'tsp_bridge', 'user_id', 'tsp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_tsp_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_code' is set
        if ('conference_code' not in params or
                params['conference_code'] is None):
            raise ValueError("Missing the required parameter `conference_code` when calling `user_tsp_update`")  # noqa: E501
        # verify the required parameter 'leader_pin' is set
        if ('leader_pin' not in params or
                params['leader_pin'] is None):
            raise ValueError("Missing the required parameter `leader_pin` when calling `user_tsp_update`")  # noqa: E501
        # verify the required parameter 'dial_in_numbers' is set
        if ('dial_in_numbers' not in params or
                params['dial_in_numbers'] is None):
            raise ValueError("Missing the required parameter `dial_in_numbers` when calling `user_tsp_update`")  # noqa: E501
        # verify the required parameter 'tsp_bridge' is set
        if ('tsp_bridge' not in params or
                params['tsp_bridge'] is None):
            raise ValueError("Missing the required parameter `tsp_bridge` when calling `user_tsp_update`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_tsp_update`")  # noqa: E501
        # verify the required parameter 'tsp_id' is set
        if ('tsp_id' not in params or
                params['tsp_id'] is None):
            raise ValueError("Missing the required parameter `tsp_id` when calling `user_tsp_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'tsp_id' in params:
            path_params['tspId'] = params['tsp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_code' in params:
            form_params.append(('conference_code', params['conference_code']))  # noqa: E501
        if 'leader_pin' in params:
            form_params.append(('leader_pin', params['leader_pin']))  # noqa: E501
        if 'dial_in_numbers' in params:
            form_params.append(('dial_in_numbers', params['dial_in_numbers']))  # noqa: E501
            collection_formats['dial_in_numbers'] = 'multi'  # noqa: E501
        if 'tsp_bridge' in params:
            form_params.append(('tsp_bridge', params['tsp_bridge']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/tsp/{tspId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
