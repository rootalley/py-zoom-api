# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DashboardsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dashboard_client_feedback(self, _from, to, **kwargs):  # noqa: E501
        """List Zoom Meetings Client Feedbacks  # noqa: E501

        Retrieve survey results from [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Prerequisites:** * Business or higher account * [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.  **Scope:** `account:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_client_feedback(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_client_feedback_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_client_feedback_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_client_feedback_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """List Zoom Meetings Client Feedbacks  # noqa: E501

        Retrieve survey results from [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Prerequisites:** * Business or higher account * [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.  **Scope:** `account:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_client_feedback_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_client_feedback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_client_feedback`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_client_feedback`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/client/feedback', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_client_feedback_detail(self, feedback_id, **kwargs):  # noqa: E501
        """Get Zoom Meetings Client Feedback  # noqa: E501

        Retrieve detailed information on a [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Prerequisites:** * Business or higher account * [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.  **Scope:** `dashboard_home:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  `  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_client_feedback_detail(feedback_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feedback_id: Feedback Detail Id (required)
        :param date _from:
        :param date to:
        :param int page_size:
        :param str next_page_token:
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_client_feedback_detail_with_http_info(feedback_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_client_feedback_detail_with_http_info(feedback_id, **kwargs)  # noqa: E501
            return data

    def dashboard_client_feedback_detail_with_http_info(self, feedback_id, **kwargs):  # noqa: E501
        """Get Zoom Meetings Client Feedback  # noqa: E501

        Retrieve detailed information on a [Zoom meetings client feedback](https://support.zoom.us/hc/en-us/articles/115005855266-End-of-Meeting-Feedback-Survey#h_e30d552b-6d8e-4e0a-a588-9ca8180c4dbf). <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Prerequisites:** * Business or higher account * [Feedback to Zoom](https://support.zoom.us/hc/en-us/articles/115005838023) enabled.  **Scope:** `dashboard_home:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  `  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_client_feedback_detail_with_http_info(feedback_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feedback_id: Feedback Detail Id (required)
        :param date _from:
        :param date to:
        :param int page_size:
        :param str next_page_token:
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feedback_id', '_from', 'to', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_client_feedback_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feedback_id' is set
        if ('feedback_id' not in params or
                params['feedback_id'] is None):
            raise ValueError("Missing the required parameter `feedback_id` when calling `dashboard_client_feedback_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feedback_id' in params:
            path_params['feedbackId'] = params['feedback_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/client/feedback/{feedbackId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_crc(self, _from, to, **kwargs):  # noqa: E501
        """Get CRC Port Usage  # noqa: E501

        A Cloud Room Connector allows H.323/SIP endpoints to connect to a Zoom meeting.   Use this API to get the hour by hour CRC Port usage for a specified period of time. <aside class='notice'>We will provide the report for a maximum of one month. For example, if \"from\" is set to \"2017-08-05\" and \"to\" is set to \"2017-10-10\", we will adjust \"from\" to \"2017-09-10\".</aside><br><br> **Prerequisites:**<br> * Business, Education or API Plan. * Room Connector must be enabled on the account.<br><br> **Scopes:** `dashboard_crc:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_crc(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_crc_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_crc_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_crc_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Get CRC Port Usage  # noqa: E501

        A Cloud Room Connector allows H.323/SIP endpoints to connect to a Zoom meeting.   Use this API to get the hour by hour CRC Port usage for a specified period of time. <aside class='notice'>We will provide the report for a maximum of one month. For example, if \"from\" is set to \"2017-08-05\" and \"to\" is set to \"2017-10-10\", we will adjust \"from\" to \"2017-09-10\".</aside><br><br> **Prerequisites:**<br> * Business, Education or API Plan. * Room Connector must be enabled on the account.<br><br> **Scopes:** `dashboard_crc:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_crc_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_crc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_crc`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_crc`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/crc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_im(self, _from, to, **kwargs):  # noqa: E501
        """Get IM Metrics  # noqa: E501

        Get [metrics](https://support.zoom.us/hc/en-us/articles/204654719-Dashboard#h_cc7e9749-1c70-4afb-a9a2-9680654821e4) on how users are utilizing the Zoom Chat Client.<br><br> <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. **Scope:** `dashboard_im:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br> **Prerequisites:**<br> * Business or a higher plan.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_im(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_im_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_im_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_im_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Get IM Metrics  # noqa: E501

        Get [metrics](https://support.zoom.us/hc/en-us/articles/204654719-Dashboard#h_cc7e9749-1c70-4afb-a9a2-9680654821e4) on how users are utilizing the Zoom Chat Client.<br><br> <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months. **Scope:** `dashboard_im:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br> **Prerequisites:**<br> * Business or a higher plan.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_im_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_im" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_im`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_im`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/im', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_issue_detail_zoom_room(self, zoomroom_id, _from, to, **kwargs):  # noqa: E501
        """Get Issues of Zoom Rooms   # noqa: E501

        Get information about the issues that occured on the Top 25 **Zoom Rooms with issues** in an acount. <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Scope:** `dashboard_home:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** <br> * Business or a higher plan. * Zoom Room must be enabled in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_issue_detail_zoom_room(zoomroom_id, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zoomroom_id: The Zoom room ID. (required)
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_issue_detail_zoom_room_with_http_info(zoomroom_id, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_issue_detail_zoom_room_with_http_info(zoomroom_id, _from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_issue_detail_zoom_room_with_http_info(self, zoomroom_id, _from, to, **kwargs):  # noqa: E501
        """Get Issues of Zoom Rooms   # noqa: E501

        Get information about the issues that occured on the Top 25 **Zoom Rooms with issues** in an acount. <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Scope:** `dashboard_home:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** <br> * Business or a higher plan. * Zoom Room must be enabled in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_issue_detail_zoom_room_with_http_info(zoomroom_id, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zoomroom_id: The Zoom room ID. (required)
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zoomroom_id', '_from', 'to', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_issue_detail_zoom_room" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'zoomroom_id' is set
        if ('zoomroom_id' not in params or
                params['zoomroom_id'] is None):
            raise ValueError("Missing the required parameter `zoomroom_id` when calling `dashboard_issue_detail_zoom_room`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_issue_detail_zoom_room`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_issue_detail_zoom_room`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'zoomroom_id' in params:
            path_params['zoomroomId'] = params['zoomroom_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/issues/zoomrooms/{zoomroomId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_issue_zoom_room(self, _from, to, **kwargs):  # noqa: E501
        """Get Top 25 Zoom Rooms with Issues  # noqa: E501

        Get information on top 25 Zoom Rooms with issues in a month. The month specified with the \"from\" and \"to\" range should fall within the last six months.<br> **Scope:** `dashboard_home:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:**<br> * Business or a higher plan. * Zoom Room must be enabled in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_issue_zoom_room(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_issue_zoom_room_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_issue_zoom_room_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_issue_zoom_room_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Get Top 25 Zoom Rooms with Issues  # noqa: E501

        Get information on top 25 Zoom Rooms with issues in a month. The month specified with the \"from\" and \"to\" range should fall within the last six months.<br> **Scope:** `dashboard_home:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:**<br> * Business or a higher plan. * Zoom Room must be enabled in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_issue_zoom_room_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_issue_zoom_room" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_issue_zoom_room`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_issue_zoom_room`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/issues/zoomrooms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_meeting_detail(self, meeting_id, **kwargs):  # noqa: E501
        """Get Meeting Details  # noqa: E501

        Get details on live or past meetings. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  <br> **Scopes:** `dashboard_meetings:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** <br> * Business or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_detail(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
        :return: MeetingMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_meeting_detail_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_meeting_detail_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def dashboard_meeting_detail_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get Meeting Details  # noqa: E501

        Get details on live or past meetings. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  <br> **Scopes:** `dashboard_meetings:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** <br> * Business or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_detail_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
        :return: MeetingMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_meeting_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `dashboard_meeting_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/meetings/{meetingId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MeetingMetrics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_meeting_participant_qos(self, meeting_id, participant_id, **kwargs):  # noqa: E501
        """Get Meeting Participant QOS  # noqa: E501

        Retrieve the quality of service for participants from live or past meetings. This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields. <br><br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_participant_qos(meeting_id, participant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str participant_id: Participant ID. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
        :return: ParticipantQOS
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_meeting_participant_qos_with_http_info(meeting_id, participant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_meeting_participant_qos_with_http_info(meeting_id, participant_id, **kwargs)  # noqa: E501
            return data

    def dashboard_meeting_participant_qos_with_http_info(self, meeting_id, participant_id, **kwargs):  # noqa: E501
        """Get Meeting Participant QOS  # noqa: E501

        Retrieve the quality of service for participants from live or past meetings. This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields. <br><br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_participant_qos_with_http_info(meeting_id, participant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str participant_id: Participant ID. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
        :return: ParticipantQOS
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'participant_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_meeting_participant_qos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `dashboard_meeting_participant_qos`")  # noqa: E501
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params or
                params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `dashboard_meeting_participant_qos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/meetings/{meetingId}/participants/{participantId}/qos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParticipantQOS',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_meeting_participant_share(self, meeting_id, **kwargs):  # noqa: E501
        """Get Sharing/Recording Details of Meeting Participants  # noqa: E501

        Retrieve the sharing and recording details of participants from live or past meetings.<br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** <br> * Business or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_participant_share(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_meeting_participant_share_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_meeting_participant_share_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def dashboard_meeting_participant_share_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """Get Sharing/Recording Details of Meeting Participants  # noqa: E501

        Retrieve the sharing and recording details of participants from live or past meetings.<br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** <br> * Business or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_participant_share_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_meeting_participant_share" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `dashboard_meeting_participant_share`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/meetings/{meetingId}/participants/sharing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_meeting_participants(self, meeting_id, **kwargs):  # noqa: E501
        """List Meeting Participants  # noqa: E501

        Get a list of participants from live or past meetings.<br><br> If you do not provide the `type` query parameter, the default value will be set to `live` and thus, you will only see metrics for participants in a live meeting, if any meeting is currently being conducted. To view metrics on past meeting participants, provide the appropriate value for `type`. <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Scopes:** `dashboard_meetings:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** Business or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_participants(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_meeting_participants_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_meeting_participants_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def dashboard_meeting_participants_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """List Meeting Participants  # noqa: E501

        Get a list of participants from live or past meetings.<br><br> If you do not provide the `type` query parameter, the default value will be set to `live` and thus, you will only see metrics for participants in a live meeting, if any meeting is currently being conducted. To view metrics on past meeting participants, provide the appropriate value for `type`. <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.  **Scopes:** `dashboard_meetings:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** Business or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_participants_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_meeting_participants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `dashboard_meeting_participants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/meetings/{meetingId}/participants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_meeting_participants_qos(self, meeting_id, **kwargs):  # noqa: E501
        """List Meeting Participants QOS  # noqa: E501

        Get a list of meeting participants from live or past meetings along with the quality of service they recieve during the meeting such as connection quality for sending/receiving video, audio, and shared content.<br>If you do not provide the `type` query parameter, the default value will be set to `live` and thus, you will only see metrics for participants in a live meeting, if any meeting is currently being conducted. To view metrics on past meeting participants, provide the appropriate value for `type`.<br> <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<br><br> **Scopes:** `dashboard_meetings:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** <br> * Business or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_participants_qos(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
        :param int page_size: The number of items returned per page.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: ParticipantQOSList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_meeting_participants_qos_with_http_info(meeting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_meeting_participants_qos_with_http_info(meeting_id, **kwargs)  # noqa: E501
            return data

    def dashboard_meeting_participants_qos_with_http_info(self, meeting_id, **kwargs):  # noqa: E501
        """List Meeting Participants QOS  # noqa: E501

        Get a list of meeting participants from live or past meetings along with the quality of service they recieve during the meeting such as connection quality for sending/receiving video, audio, and shared content.<br>If you do not provide the `type` query parameter, the default value will be set to `live` and thus, you will only see metrics for participants in a live meeting, if any meeting is currently being conducted. To view metrics on past meeting participants, provide the appropriate value for `type`.<br> <br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<br><br> **Scopes:** `dashboard_meetings:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** <br> * Business or a higher plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meeting_participants_qos_with_http_info(meeting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str meeting_id: The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance. (required)
        :param str type: The meeting types: <br>`past` - Past meetings.<br>`live` - Live Meetings.
        :param int page_size: The number of items returned per page.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: ParticipantQOSList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meeting_id', 'type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_meeting_participants_qos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meeting_id' is set
        if ('meeting_id' not in params or
                params['meeting_id'] is None):
            raise ValueError("Missing the required parameter `meeting_id` when calling `dashboard_meeting_participants_qos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meeting_id' in params:
            path_params['meetingId'] = params['meeting_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/meetings/{meetingId}/participants/qos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParticipantQOSList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_meetings(self, _from, to, **kwargs):  # noqa: E501
        """List Meetings  # noqa: E501

        List total live or past meetings that occurred during a specified period of time. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<br> **Scopes:** `dashboard_meetings:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br><br> **Prerequisites:** <br> * Business or a higher plan.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meetings(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param str type: Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>  If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_meetings_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_meetings_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_meetings_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """List Meetings  # noqa: E501

        List total live or past meetings that occurred during a specified period of time. This overview will show if features such as audio, video, screen sharing, and recording were being used in the meeting. You can also see the license types of each user on your account.<br> You can specify a monthly date range for the dashboard data using the `from` and `to` query parameters. The month should fall within the last six months.<br> **Scopes:** `dashboard_meetings:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br><br> **Prerequisites:** <br> * Business or a higher plan.<br><br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_meetings_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param str type: Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>  If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_meetings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_meetings`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_meetings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/meetings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_webinar_detail(self, webinar_id, **kwargs):  # noqa: E501
        """Get Webinar Details  # noqa: E501

        Retrieve details from live or past webinars.<br><br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_detail(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str type: The webinar type.
        :return: WebinarMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_webinar_detail_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_webinar_detail_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def dashboard_webinar_detail_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get Webinar Details  # noqa: E501

        Retrieve details from live or past webinars.<br><br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_detail_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str type: The webinar type.
        :return: WebinarMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_webinar_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `dashboard_webinar_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/webinars/{webinarId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebinarMetrics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_webinar_participant_qos(self, webinar_id, participant_id, **kwargs):  # noqa: E501
        """Get Webinar Participant QOS  # noqa: E501

        Retrieve details on the quality of service that participants from live or past webinars recieved.<br>This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields.<br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` <br> **Prerequisites:** <br> * Business, Education or API Plan with Zoom Rooms set up.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_participant_qos(webinar_id, participant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str participant_id: Participant ID. (required)
        :param str type: The webinar type.
        :return: ParticipantQOS
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_webinar_participant_qos_with_http_info(webinar_id, participant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_webinar_participant_qos_with_http_info(webinar_id, participant_id, **kwargs)  # noqa: E501
            return data

    def dashboard_webinar_participant_qos_with_http_info(self, webinar_id, participant_id, **kwargs):  # noqa: E501
        """Get Webinar Participant QOS  # noqa: E501

        Retrieve details on the quality of service that participants from live or past webinars recieved.<br>This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields.<br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` <br> **Prerequisites:** <br> * Business, Education or API Plan with Zoom Rooms set up.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_participant_qos_with_http_info(webinar_id, participant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str participant_id: Participant ID. (required)
        :param str type: The webinar type.
        :return: ParticipantQOS
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'participant_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_webinar_participant_qos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `dashboard_webinar_participant_qos`")  # noqa: E501
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params or
                params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `dashboard_webinar_participant_qos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/webinars/{webinarId}/participants/{participantId}/qos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParticipantQOS',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_webinar_participant_share(self, webinar_id, **kwargs):  # noqa: E501
        """Get Sharing/Recording Details of Webinar Participants  # noqa: E501

        Retrieve the sharing and recording details of participants from live or past webinars. <br><br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` <br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_participant_share(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str type: The webinar type.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_webinar_participant_share_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_webinar_participant_share_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def dashboard_webinar_participant_share_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get Sharing/Recording Details of Webinar Participants  # noqa: E501

        Retrieve the sharing and recording details of participants from live or past webinars. <br><br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy` <br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_participant_share_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str type: The webinar type.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceed the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_webinar_participant_share" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `dashboard_webinar_participant_share`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/webinars/{webinarId}/participants/sharing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_webinar_participants(self, webinar_id, **kwargs):  # noqa: E501
        """Get Webinar Participants  # noqa: E501

        Retrieve details on participants from live or past webinars.<br><br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_participants(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str type: The webinar type.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_webinar_participants_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_webinar_participants_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def dashboard_webinar_participants_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get Webinar Participants  # noqa: E501

        Retrieve details on participants from live or past webinars.<br><br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_participants_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str type: The webinar type.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_webinar_participants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `dashboard_webinar_participants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/webinars/{webinarId}/participants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_webinar_participants_qos(self, webinar_id, **kwargs):  # noqa: E501
        """List Webinar Participant QOS  # noqa: E501

        Retrieve a list of participants from live or past webinars and the quality of service they received.<br>This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields.<br> **Scopes:** `dashboard:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** * Business, Education or API Plan with Webinar add-on.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_participants_qos(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str type: The webinar type.
        :param int page_size: The number of items returned per page.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: ParticipantQOSList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_webinar_participants_qos_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_webinar_participants_qos_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def dashboard_webinar_participants_qos_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Webinar Participant QOS  # noqa: E501

        Retrieve a list of participants from live or past webinars and the quality of service they received.<br>This data indicates the connection quality for sending/receiving video, audio, and shared content. If nothing is being sent or received at that time, no information will be shown in the fields.<br> **Scopes:** `dashboard:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br> **Prerequisites:** * Business, Education or API Plan with Webinar add-on.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinar_participants_qos_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The webinar ID or webinar UUID. If given the webinar ID it will take the last webinar instance. (required)
        :param str type: The webinar type.
        :param int page_size: The number of items returned per page.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: ParticipantQOSList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_webinar_participants_qos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `dashboard_webinar_participants_qos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/webinars/{webinarId}/participants/qos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParticipantQOSList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_webinars(self, _from, to, **kwargs):  # noqa: E501
        """List Webinars  # noqa: E501

        List all the live or past webinars from a specified period of time. <br><br> **Scopes:** `dashboard:read:admin`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinars(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param str type: The webinar type.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_webinars_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_webinars_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_webinars_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """List Webinars  # noqa: E501

        List all the live or past webinars from a specified period of time. <br><br> **Scopes:** `dashboard:read:admin`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br> **Prerequisites:**<br> * Business, Education or API Plan with Webinar add-on.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_webinars_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param str type: The webinar type.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_webinars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_webinars`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_webinars`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/webinars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_zoom_room(self, zoomroom_id, _from, to, **kwargs):  # noqa: E501
        """Get Zoom Rooms Details  # noqa: E501

        The Zoom Rooms dashboard metrics lets you know the type of configuration a Zoom room has and details on the meetings held in that room.   Use this API to retrieve information on a specific room.<br><br> **Scopes:** `dashboard_zr:read:admin`<br> <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`**Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_zoom_room(zoomroom_id, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zoomroom_id: The Zoom room ID. (required)
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_zoom_room_with_http_info(zoomroom_id, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_zoom_room_with_http_info(zoomroom_id, _from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_zoom_room_with_http_info(self, zoomroom_id, _from, to, **kwargs):  # noqa: E501
        """Get Zoom Rooms Details  # noqa: E501

        The Zoom Rooms dashboard metrics lets you know the type of configuration a Zoom room has and details on the meetings held in that room.   Use this API to retrieve information on a specific room.<br><br> **Scopes:** `dashboard_zr:read:admin`<br> <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`**Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_zoom_room_with_http_info(zoomroom_id, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zoomroom_id: The Zoom room ID. (required)
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zoomroom_id', '_from', 'to', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_zoom_room" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'zoomroom_id' is set
        if ('zoomroom_id' not in params or
                params['zoomroom_id'] is None):
            raise ValueError("Missing the required parameter `zoomroom_id` when calling `dashboard_zoom_room`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_zoom_room`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_zoom_room`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'zoomroom_id' in params:
            path_params['zoomroomId'] = params['zoomroom_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/zoomrooms/{zoomroomId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_zoom_room_issue(self, _from, to, **kwargs):  # noqa: E501
        """Get Top 25 issues of Zoom Rooms  # noqa: E501

        Get Top 25 issues of Zoom Rooms.<br> **Scopes:** `dashboard_zr:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>  **Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_zoom_room_issue(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_zoom_room_issue_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_zoom_room_issue_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def dashboard_zoom_room_issue_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Get Top 25 issues of Zoom Rooms  # noqa: E501

        Get Top 25 issues of Zoom Rooms.<br> **Scopes:** `dashboard_zr:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>  **Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_zoom_room_issue_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: Start date in 'yyyy-mm-dd' format. The date range defined by the \"from\" and \"to\" parameters should only be one month as the report includes only one month worth of data at once. (required)
        :param date to: End date. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_zoom_room_issue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dashboard_zoom_room_issue`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dashboard_zoom_room_issue`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/zoomrooms/issues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dashboard_zoom_rooms(self, **kwargs):  # noqa: E501
        """List Zoom Rooms  # noqa: E501

        List information on all Zoom Rooms in an account.<br><br> **Scopes:** `dashboard_zr:read:admin`   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br>  **Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_zoom_rooms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: The current page number of returned records.
        :return: ZoomRoomList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dashboard_zoom_rooms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dashboard_zoom_rooms_with_http_info(**kwargs)  # noqa: E501
            return data

    def dashboard_zoom_rooms_with_http_info(self, **kwargs):  # noqa: E501
        """List Zoom Rooms  # noqa: E501

        List information on all Zoom Rooms in an account.<br><br> **Scopes:** `dashboard_zr:read:admin`   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Resource-intensive`<br>  **Prerequisites:**<br> * Business, Education or API Plan with Zoom Rooms set up.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dashboard_zoom_rooms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: The current page number of returned records.
        :return: ZoomRoomList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'page_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dashboard_zoom_rooms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/zoomrooms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZoomRoomList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_meeting_satisfaction(self, **kwargs):  # noqa: E501
        """List Client Meeting Satisfaction   # noqa: E501

        If the [End of Meeting Feedback Survey](https://support.zoom.us/hc/en-us/articles/115005855266) option is enabled, attendees will be prompted with a survey window where they can tap either the **Thumbs Up** or **Thumbs Down** button that indicates their Zoom meeting experience. With this API, you can get information on the attendees' meeting satisfaction. Specify a monthly date range for the query using the from and to query parameters. The month should fall within the last six months.  To get information on the survey results with negative experiences (indicated by **Thumbs Down**), use the [Get Zoom Meetings Client Feedback API](https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardclientfeedbackdetail).<br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_meeting_satisfaction(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: The start date for the query in “yyyy-mm-dd” format. 
        :param date to: The end date for the query in “yyyy-mm-dd” format. 
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_meeting_satisfaction_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_meeting_satisfaction_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_meeting_satisfaction_with_http_info(self, **kwargs):  # noqa: E501
        """List Client Meeting Satisfaction   # noqa: E501

        If the [End of Meeting Feedback Survey](https://support.zoom.us/hc/en-us/articles/115005855266) option is enabled, attendees will be prompted with a survey window where they can tap either the **Thumbs Up** or **Thumbs Down** button that indicates their Zoom meeting experience. With this API, you can get information on the attendees' meeting satisfaction. Specify a monthly date range for the query using the from and to query parameters. The month should fall within the last six months.  To get information on the survey results with negative experiences (indicated by **Thumbs Down**), use the [Get Zoom Meetings Client Feedback API](https://marketplace.zoom.us/docs/api-reference/zoom-api/dashboards/dashboardclientfeedbackdetail).<br> **Scopes:** `dashboard:read:admin`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_meeting_satisfaction_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: The start date for the query in “yyyy-mm-dd” format. 
        :param date to: The end date for the query in “yyyy-mm-dd” format. 
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_meeting_satisfaction" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/client/satisfaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20087',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
