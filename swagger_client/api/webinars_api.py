# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WebinarsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_tracking_sources(self, webinar_id, **kwargs):  # noqa: E501
        """Get Webinar Tracking Sources  # noqa: E501

        [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.<br> Use this API to list information on all the tracking sources of a Webinar.<br> **Scopes:** `webinar:read:admin`, `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br> **Prerequisites**:<br> * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracking_sources(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tracking_sources_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tracking_sources_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def get_tracking_sources_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get Webinar Tracking Sources  # noqa: E501

        [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.<br> Use this API to list information on all the tracking sources of a Webinar.<br> **Scopes:** `webinar:read:admin`, `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br> **Prerequisites**:<br> * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tracking_sources_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracking_sources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `get_tracking_sources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/tracking_sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_past_webinar_files(self, webinar_id, **kwargs):  # noqa: E501
        """List Past Webinar Files  # noqa: E501

        List files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time.  <br><br> **Scope:** `webinar:read`, `webinar:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_files(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: (required)
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_past_webinar_files_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_past_webinar_files_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def list_past_webinar_files_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Past Webinar Files  # noqa: E501

        List files sent via in-meeting chat during a meeting. The in-meeting files are deleted after 24 hours of the meeting completion time.  <br><br> **Scope:** `webinar:read`, `webinar:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_files_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: (required)
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_past_webinar_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `list_past_webinar_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_past_webinar_poll_results(self, webinar_id, **kwargs):  # noqa: E501
        """List Past Webinar Poll Results  # noqa: E501

        The polling feature for webinar allows you to create single choice or multiple choice polling questions for your webinars. Use this API to retrieve the results for Webinar Polls of a specific Webinar.  **Prerequisites:**<br> * [Webinar license](https://zoom.us/webinar)<br> **Scopes**: `webinar:read:admin`, `webinar:read`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_poll_results(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_past_webinar_poll_results_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_past_webinar_poll_results_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def list_past_webinar_poll_results_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Past Webinar Poll Results  # noqa: E501

        The polling feature for webinar allows you to create single choice or multiple choice polling questions for your webinars. Use this API to retrieve the results for Webinar Polls of a specific Webinar.  **Prerequisites:**<br> * [Webinar license](https://zoom.us/webinar)<br> **Scopes**: `webinar:read:admin`, `webinar:read`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_poll_results_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_past_webinar_poll_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `list_past_webinar_poll_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/polls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_past_webinar_qa(self, webinar_id, **kwargs):  # noqa: E501
        """List Q&A of Past Webinar  # noqa: E501

        The [Question & Answer (Q&A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for Webinars allows attendees to ask questions during the Webinar and for the panelists, co-hosts and host to answer their questions.<br> Use this API to list Q&A of a specific Webinar.  **Prerequisites:**<br> * [Webinar license](https://zoom.us/webinar)<br> **Scopes**: `webinar:read:admin`, `webinar:read`<br>  <br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_qa(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_past_webinar_qa_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_past_webinar_qa_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def list_past_webinar_qa_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Q&A of Past Webinar  # noqa: E501

        The [Question & Answer (Q&A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for Webinars allows attendees to ask questions during the Webinar and for the panelists, co-hosts and host to answer their questions.<br> Use this API to list Q&A of a specific Webinar.  **Prerequisites:**<br> * [Webinar license](https://zoom.us/webinar)<br> **Scopes**: `webinar:read:admin`, `webinar:read`<br>  <br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_past_webinar_qa_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_id: The Webinar ID or Webinar UUID. If the webinar ID is passed, it will take the last webinar instance. (required)
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_past_webinar_qa" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `list_past_webinar_qa`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/qa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20086',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def past_webinars(self, webinar_id, **kwargs):  # noqa: E501
        """List Past Webinar Instances  # noqa: E501

        List past webinar instances.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_webinars(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.past_webinars_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.past_webinars_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def past_webinars_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Past Webinar Instances  # noqa: E501

        List past webinar instances.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.past_webinars_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method past_webinars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `past_webinars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{webinarId}/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar(self, webinar_id, **kwargs):  # noqa: E501
        """Get a Webinar  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br>Use this API to get details of a scheduled webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>**Prerequisites:** * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call.
        :param bool show_previous_occurrences: Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Get a Webinar  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br>Use this API to get details of a scheduled webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>**Prerequisites:** * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [Create a Webinar API](https://marketplace.zoom.us/docs/api-reference/zoom-api/webinars/webinarcreate), you can retrieve the Occurrence ID from the response of the API call.
        :param bool show_previous_occurrences: Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'occurrence_id', 'show_previous_occurrences']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'show_previous_occurrences' in params:
            query_params.append(('show_previous_occurrences', params['show_previous_occurrences']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20054',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_absentees(self, webinar_uuid, **kwargs):  # noqa: E501
        """Get Webinar Absentees  # noqa: E501

        List absentees of a webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_absentees(webinar_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_uuid: The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it. (required)
        :param str occurrence_id: The meeting occurrence ID.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: RegistrationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_absentees_with_http_info(webinar_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_absentees_with_http_info(webinar_uuid, **kwargs)  # noqa: E501
            return data

    def webinar_absentees_with_http_info(self, webinar_uuid, **kwargs):  # noqa: E501
        """Get Webinar Absentees  # noqa: E501

        List absentees of a webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_absentees_with_http_info(webinar_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webinar_uuid: The Webinar UUID. Each Webinar instance will generate its own Webinar UUID (i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it. (required)
        :param str occurrence_id: The meeting occurrence ID.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: RegistrationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_uuid', 'occurrence_id', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_absentees" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_uuid' is set
        if ('webinar_uuid' not in params or
                params['webinar_uuid'] is None):
            raise ValueError("Missing the required parameter `webinar_uuid` when calling `webinar_absentees`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_uuid' in params:
            path_params['WebinarUUID'] = params['webinar_uuid']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/past_webinars/{WebinarUUID}/absentees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_create(self, body, user_id, **kwargs):  # noqa: E501
        """Create a Webinar  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br>Use this API to schedule a Webinar for a user (host).<br><br>  **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_create(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body89 body: (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :return: InlineResponse20118
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_create_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_create_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def webinar_create_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """Create a Webinar  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br>Use this API to schedule a Webinar for a user (host).<br><br>  **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_create_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body89 body: (required)
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :return: InlineResponse20118
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_create`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `webinar_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/webinars', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20118',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_delete(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a Webinar  # noqa: E501

        Delete a Webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_delete(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_delete_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Delete a Webinar  # noqa: E501

        Delete a Webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_delete_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelist_create(self, body, webinar_id, **kwargs):  # noqa: E501
        """Add Panelists  # noqa: E501

        Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.<br>Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>   **Prerequisites:** * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_create(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body95 body: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelist_create_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelist_create_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelist_create_with_http_info(self, body, webinar_id, **kwargs):  # noqa: E501
        """Add Panelists  # noqa: E501

        Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.<br>Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>   **Prerequisites:** * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_create_with_http_info(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body95 body: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelist_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_panelist_create`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelist_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'panelists' in params:
            form_params.append(('panelists', params['panelists']))  # noqa: E501
            collection_formats['panelists'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelist_create(self, panelists, webinar_id, **kwargs):  # noqa: E501
        """Add Panelists  # noqa: E501

        Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.<br>Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>   **Prerequisites:** * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_create(panelists, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] panelists: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelist_create_with_http_info(panelists, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelist_create_with_http_info(panelists, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelist_create_with_http_info(self, panelists, webinar_id, **kwargs):  # noqa: E501
        """Add Panelists  # noqa: E501

        Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.<br>Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>   **Prerequisites:** * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_create_with_http_info(panelists, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] panelists: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['panelists', 'webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelist_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'panelists' is set
        if ('panelists' not in params or
                params['panelists'] is None):
            raise ValueError("Missing the required parameter `panelists` when calling `webinar_panelist_create`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelist_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'panelists' in params:
            form_params.append(('panelists', params['panelists']))  # noqa: E501
            collection_formats['panelists'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelist_delete(self, webinar_id, panelist_id, **kwargs):  # noqa: E501
        """Remove a Panelist  # noqa: E501

        [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.<br> You can retrieve the `panelistId` by calling **List Panelists API**.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>   **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_delete(webinar_id, panelist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param int panelist_id: The panelist ID or panelist email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelist_delete_with_http_info(webinar_id, panelist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelist_delete_with_http_info(webinar_id, panelist_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelist_delete_with_http_info(self, webinar_id, panelist_id, **kwargs):  # noqa: E501
        """Remove a Panelist  # noqa: E501

        [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.<br> You can retrieve the `panelistId` by calling **List Panelists API**.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>   **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelist_delete_with_http_info(webinar_id, panelist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param int panelist_id: The panelist ID or panelist email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'panelist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelist_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelist_delete`")  # noqa: E501
        # verify the required parameter 'panelist_id' is set
        if ('panelist_id' not in params or
                params['panelist_id'] is None):
            raise ValueError("Missing the required parameter `panelist_id` when calling `webinar_panelist_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'panelist_id' in params:
            path_params['panelistId'] = params['panelist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists/{panelistId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelists(self, webinar_id, **kwargs):  # noqa: E501
        """List Panelists  # noqa: E501

        Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a Webinar.   Use this API to list all the panelists of a Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br> **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelists(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelists_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelists_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelists_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Panelists  # noqa: E501

        Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a Webinar.   Use this API to list all the panelists of a Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br> **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelists_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_panelists_delete(self, webinar_id, **kwargs):  # noqa: E501
        """Remove Panelists  # noqa: E501

        Remove all the panelists from a Webinar.<br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelists_delete(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_panelists_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_panelists_delete_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_panelists_delete_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """Remove Panelists  # noqa: E501

        Remove all the panelists from a Webinar.<br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_panelists_delete_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_panelists_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_panelists_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/panelists', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_poll_create(self, body, webinar_id, **kwargs):  # noqa: E501
        """Create a Webinar's Poll  # noqa: E501

        Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_create(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body101 body: Webinar poll object (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: InlineResponse20121
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_poll_create_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_poll_create_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_poll_create_with_http_info(self, body, webinar_id, **kwargs):  # noqa: E501
        """Create a Webinar's Poll  # noqa: E501

        Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_create_with_http_info(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body101 body: Webinar poll object (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: InlineResponse20121
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_poll_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_poll_create`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_poll_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20121',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_poll_delete(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Delete a Webinar Poll  # noqa: E501

        Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_delete(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str poll_id: The poll ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_poll_delete_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_poll_delete_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
            return data

    def webinar_poll_delete_with_http_info(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Delete a Webinar Poll  # noqa: E501

        Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_delete_with_http_info(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str poll_id: The poll ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'poll_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_poll_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_poll_delete`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `webinar_poll_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls/{pollId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_poll_get(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Get a Webinar Poll  # noqa: E501

        Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_get(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str poll_id: The poll ID (required)
        :return: InlineResponse20121
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_poll_get_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_poll_get_with_http_info(webinar_id, poll_id, **kwargs)  # noqa: E501
            return data

    def webinar_poll_get_with_http_info(self, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Get a Webinar Poll  # noqa: E501

        Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_get_with_http_info(webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str poll_id: The poll ID (required)
        :return: InlineResponse20121
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'poll_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_poll_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_poll_get`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `webinar_poll_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls/{pollId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20121',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_poll_update(self, body, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Update a Webinar Poll  # noqa: E501

        Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_update(body, webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body103 body: Webinar Poll (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str poll_id: The poll ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_poll_update_with_http_info(body, webinar_id, poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_poll_update_with_http_info(body, webinar_id, poll_id, **kwargs)  # noqa: E501
            return data

    def webinar_poll_update_with_http_info(self, body, webinar_id, poll_id, **kwargs):  # noqa: E501
        """Update a Webinar Poll  # noqa: E501

        Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_poll_update_with_http_info(body, webinar_id, poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body103 body: Webinar Poll (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str poll_id: The poll ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'webinar_id', 'poll_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_poll_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_poll_update`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_poll_update`")  # noqa: E501
        # verify the required parameter 'poll_id' is set
        if ('poll_id' not in params or
                params['poll_id'] is None):
            raise ValueError("Missing the required parameter `poll_id` when calling `webinar_poll_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'poll_id' in params:
            path_params['pollId'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls/{pollId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_polls(self, webinar_id, **kwargs):  # noqa: E501
        """List a Webinar's Polls   # noqa: E501

        List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_polls(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_polls_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_polls_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_polls_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List a Webinar's Polls   # noqa: E501

        List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_polls_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_polls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_polls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/polls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_create(self, body, webinar_id, **kwargs):  # noqa: E501
        """Add a Webinar Registrant  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to create and submit the registration of a user for a webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_create(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body97 body: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_ids: Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma.
        :return: InlineResponse20120
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_create_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_create_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_create_with_http_info(self, body, webinar_id, **kwargs):  # noqa: E501
        """Add a Webinar Registrant  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to create and submit the registration of a user for a webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_create_with_http_info(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body97 body: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_ids: Occurrence ID. Get this value from the webinar get API. Multiple values separated by a comma.
        :return: InlineResponse20120
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'webinar_id', 'occurrence_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_registrant_create`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_ids' in params:
            query_params.append(('occurrence_ids', params['occurrence_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20120',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_get(self, webinar_id, registrant_id, **kwargs):  # noqa: E501
        """Get a Webinar Registrant  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to get details on a specific user who has registered for the Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * The account must have a Webinar plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_get(webinar_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str registrant_id: The registrant ID. (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: WebianrRegistrant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_get_with_http_info(webinar_id, registrant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_get_with_http_info(webinar_id, registrant_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_get_with_http_info(self, webinar_id, registrant_id, **kwargs):  # noqa: E501
        """Get a Webinar Registrant  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br>Use this API to get details on a specific user who has registered for the Webinar.<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * The account must have a Webinar plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_get_with_http_info(webinar_id, registrant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str registrant_id: The registrant ID. (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: WebianrRegistrant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'registrant_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_get`")  # noqa: E501
        # verify the required parameter 'registrant_id' is set
        if ('registrant_id' not in params or
                params['registrant_id'] is None):
            raise ValueError("Missing the required parameter `registrant_id` when calling `webinar_registrant_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501
        if 'registrant_id' in params:
            path_params['registrantId'] = params['registrant_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/{registrantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebianrRegistrant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_question_update(self, body, webinar_id, **kwargs):  # noqa: E501
        """Update Registration Questions  # noqa: E501

        Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to update registration questions and fields of a scheduled Webinar that are to be answered by users while registering for a Webinar.<br><br> **Prerequisites:**<br>   * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.  **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_question_update(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body105 body: Webinar Registrant Questions (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_question_update_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_question_update_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_question_update_with_http_info(self, body, webinar_id, **kwargs):  # noqa: E501
        """Update Registration Questions  # noqa: E501

        Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to update registration questions and fields of a scheduled Webinar that are to be answered by users while registering for a Webinar.<br><br> **Prerequisites:**<br>   * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.  **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_question_update_with_http_info(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body105 body: Webinar Registrant Questions (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_question_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_registrant_question_update`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_question_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/questions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_status(self, body, webinar_id, **kwargs):  # noqa: E501
        """Update Webinar Registrant Status  # noqa: E501

        Update a webinar registrant's status. Using this API, you can specify whether you want to approve a registration, deny a registration or cancel a previously approved registration.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_status(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body99 body: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_status_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_status_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_status_with_http_info(self, body, webinar_id, **kwargs):  # noqa: E501
        """Update Webinar Registrant Status  # noqa: E501

        Update a webinar registrant's status. Using this API, you can specify whether you want to approve a registration, deny a registration or cancel a previously approved registration.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_status_with_http_info(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body99 body: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'webinar_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_registrant_status`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'registrants' in params:
            form_params.append(('registrants', params['registrants']))  # noqa: E501
            collection_formats['registrants'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrant_status(self, action, registrants, webinar_id, **kwargs):  # noqa: E501
        """Update Webinar Registrant Status  # noqa: E501

        Update a webinar registrant's status. Using this API, you can specify whether you want to approve a registration, deny a registration or cancel a previously approved registration.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_status(action, registrants, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: (required)
        :param list[WebinarswebinarIdregistrantsstatusRegistrants] registrants: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrant_status_with_http_info(action, registrants, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrant_status_with_http_info(action, registrants, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrant_status_with_http_info(self, action, registrants, webinar_id, **kwargs):  # noqa: E501
        """Update Webinar Registrant Status  # noqa: E501

        Update a webinar registrant's status. Using this API, you can specify whether you want to approve a registration, deny a registration or cancel a previously approved registration.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrant_status_with_http_info(action, registrants, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: (required)
        :param list[WebinarswebinarIdregistrantsstatusRegistrants] registrants: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: The meeting occurrence ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action', 'registrants', 'webinar_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrant_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'action' is set
        if ('action' not in params or
                params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `webinar_registrant_status`")  # noqa: E501
        # verify the required parameter 'registrants' is set
        if ('registrants' not in params or
                params['registrants'] is None):
            raise ValueError("Missing the required parameter `registrants` when calling `webinar_registrant_status`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrant_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'registrants' in params:
            form_params.append(('registrants', params['registrants']))  # noqa: E501
            collection_formats['registrants'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrants(self, webinar_id, **kwargs):  # noqa: E501
        """List Webinar Registrants  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br> Use this API to list all the users that have registered for a webinar.<br><br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.<br> **Scopes:** `webinar:read:admin` `webinar:read`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrants(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: The meeting occurrence ID.
        :param str status: The registrant status:<br>`pending` - Registrant's status is pending.<br>`approved` - Registrant's status is approved.<br>`denied` - Registrant's status is denied.
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: The current page number of returned records.
        :return: RegistrationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrants_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrants_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrants_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Webinar Registrants  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.<br> Use this API to list all the users that have registered for a webinar.<br><br> **Prerequisites:** * Pro or higher plan with a Webinar Add-on.<br> **Scopes:** `webinar:read:admin` `webinar:read`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrants_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: The meeting occurrence ID.
        :param str status: The registrant status:<br>`pending` - Registrant's status is pending.<br>`approved` - Registrant's status is approved.<br>`denied` - Registrant's status is denied.
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: The current page number of returned records.
        :return: RegistrationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id', 'occurrence_id', 'status', 'page_size', 'page_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_registrants_questions_get(self, webinar_id, **kwargs):  # noqa: E501
        """List Registration Questions  # noqa: E501

        Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to list registration questions and fields that are to be answered by users while registering for a Webinar.<br> **Prerequisites:**<br>   * Pro or higher plan with a Webinar Add-on. **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrants_questions_get(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_registrants_questions_get_with_http_info(webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_registrants_questions_get_with_http_info(webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_registrants_questions_get_with_http_info(self, webinar_id, **kwargs):  # noqa: E501
        """List Registration Questions  # noqa: E501

        Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.<br>Use this API to list registration questions and fields that are to be answered by users while registering for a Webinar.<br> **Prerequisites:**<br>   * Pro or higher plan with a Webinar Add-on. **Scopes:** `webinar:read:admin` `webinar:read`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_registrants_questions_get_with_http_info(webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_registrants_questions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_registrants_questions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/registrants/questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20056',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_status(self, body, webinar_id, **kwargs):  # noqa: E501
        """Update Webinar Status  # noqa: E501

        Update a webinar's status. Use this API to end an ongoing webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_status(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body93 body: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_status_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_status_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_status_with_http_info(self, body, webinar_id, **kwargs):  # noqa: E501
        """Update Webinar Status  # noqa: E501

        Update a webinar's status. Use this API to end an ongoing webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_status_with_http_info(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body93 body: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_status`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_status(self, action, webinar_id, **kwargs):  # noqa: E501
        """Update Webinar Status  # noqa: E501

        Update a webinar's status. Use this API to end an ongoing webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_status(action, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_status_with_http_info(action, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_status_with_http_info(action, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_status_with_http_info(self, action, webinar_id, **kwargs):  # noqa: E501
        """Update Webinar Status  # noqa: E501

        Update a webinar's status. Use this API to end an ongoing webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_status_with_http_info(action, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action', 'webinar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'action' is set
        if ('action' not in params or
                params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `webinar_status`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinar_update(self, body, webinar_id, **kwargs):  # noqa: E501
        """Update a Webinar  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br> Use this API to make updates to a scheduled Webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_update(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body91 body: Webinar. (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinar_update_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinar_update_with_http_info(body, webinar_id, **kwargs)  # noqa: E501
            return data

    def webinar_update_with_http_info(self, body, webinar_id, **kwargs):  # noqa: E501
        """Update a Webinar  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br> Use this API to make updates to a scheduled Webinar.<br><br> **Scopes:** `webinar:write:admin` `webinar:write`<br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br> **Prerequisites:**<br> * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinar_update_with_http_info(body, webinar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body91 body: Webinar. (required)
        :param int webinar_id: The webinar ID in \"**long**\" format(represented as int64 data type in JSON).  (required)
        :param str occurrence_id: Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'webinar_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinar_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `webinar_update`")  # noqa: E501
        # verify the required parameter 'webinar_id' is set
        if ('webinar_id' not in params or
                params['webinar_id'] is None):
            raise ValueError("Missing the required parameter `webinar_id` when calling `webinar_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webinar_id' in params:
            path_params['webinarId'] = params['webinar_id']  # noqa: E501

        query_params = []
        if 'occurrence_id' in params:
            query_params.append(('occurrence_id', params['occurrence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/webinars/{webinarId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webinars(self, user_id, **kwargs):  # noqa: E501
        """List Webinars  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br> Use this API to list all the webinars that are scheduled by or on-behalf a user (Webinar host).<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br> <br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` **Prerequisites:** * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinars(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: The current page number of returned records.
        :return: UserList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webinars_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webinars_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def webinars_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List Webinars  # noqa: E501

        Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.<br> Use this API to list all the webinars that are scheduled by or on-behalf a user (Webinar host).<br><br> **Scopes:** `webinar:read:admin` `webinar:read`<br> <br>    **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` **Prerequisites:** * Pro or higher plan with a Webinar Add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webinars_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID or email address of the user. For user-level apps, pass `me` as the value for userId. (required)
        :param int page_size: The number of records returned within a single API call.
        :param int page_number: The current page number of returned records.
        :return: UserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'page_size', 'page_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webinars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `webinars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{userId}/webinars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
