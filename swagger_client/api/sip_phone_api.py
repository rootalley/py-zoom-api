# coding: utf-8

"""
    Zoom API

    The Zoom API allows developers to safely and securely access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [Authorization Guide](https://marketplace.zoom.us/docs/guides/authorization/credentials). All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance you can list all users on an account via `https://api.zoom.us/v2/users/`.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: developersupport@zoom.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SIPPhoneApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_sip_phone(self, **kwargs):  # noqa: E501
        """Create SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to enable a user to use SIP phone.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sip_phone(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_sip_phone_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_sip_phone_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_sip_phone_with_http_info(self, **kwargs):  # noqa: E501
        """Create SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to enable a user to use SIP phone.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sip_phone_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sip_phone" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'domain' in params:
            form_params.append(('domain', params['domain']))  # noqa: E501
        if 'register_server' in params:
            form_params.append(('register_server', params['register_server']))  # noqa: E501
        if 'transport_protocol' in params:
            form_params.append(('transport_protocol', params['transport_protocol']))  # noqa: E501
        if 'proxy_server' in params:
            form_params.append(('proxy_server', params['proxy_server']))  # noqa: E501
        if 'register_server2' in params:
            form_params.append(('register_server2', params['register_server2']))  # noqa: E501
        if 'transport_protocol2' in params:
            form_params.append(('transport_protocol2', params['transport_protocol2']))  # noqa: E501
        if 'proxy_server2' in params:
            form_params.append(('proxy_server2', params['proxy_server2']))  # noqa: E501
        if 'register_server3' in params:
            form_params.append(('register_server3', params['register_server3']))  # noqa: E501
        if 'transport_protocol3' in params:
            form_params.append(('transport_protocol3', params['transport_protocol3']))  # noqa: E501
        if 'proxy_server3' in params:
            form_params.append(('proxy_server3', params['proxy_server3']))  # noqa: E501
        if 'registration_expire_time' in params:
            form_params.append(('registration_expire_time', params['registration_expire_time']))  # noqa: E501
        if 'user_name' in params:
            form_params.append(('user_name', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'authorization_name' in params:
            form_params.append(('authorization_name', params['authorization_name']))  # noqa: E501
        if 'user_email' in params:
            form_params.append(('user_email', params['user_email']))  # noqa: E501
        if 'voice_mail' in params:
            form_params.append(('voice_mail', params['voice_mail']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sip_phones', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_sip_phone(self, **kwargs):  # noqa: E501
        """Create SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to enable a user to use SIP phone.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sip_phone(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain:
        :param str register_server:
        :param str transport_protocol:
        :param str proxy_server:
        :param str register_server2:
        :param str transport_protocol2:
        :param str proxy_server2:
        :param str register_server3:
        :param str transport_protocol3:
        :param str proxy_server3:
        :param int registration_expire_time:
        :param str user_name:
        :param str password:
        :param str authorization_name:
        :param str user_email:
        :param str voice_mail:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_sip_phone_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_sip_phone_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_sip_phone_with_http_info(self, **kwargs):  # noqa: E501
        """Create SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to enable a user to use SIP phone.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sip_phone_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain:
        :param str register_server:
        :param str transport_protocol:
        :param str proxy_server:
        :param str register_server2:
        :param str transport_protocol2:
        :param str proxy_server2:
        :param str register_server3:
        :param str transport_protocol3:
        :param str proxy_server3:
        :param int registration_expire_time:
        :param str user_name:
        :param str password:
        :param str authorization_name:
        :param str user_email:
        :param str voice_mail:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'register_server', 'transport_protocol', 'proxy_server', 'register_server2', 'transport_protocol2', 'proxy_server2', 'register_server3', 'transport_protocol3', 'proxy_server3', 'registration_expire_time', 'user_name', 'password', 'authorization_name', 'user_email', 'voice_mail']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sip_phone" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'domain' in params:
            form_params.append(('domain', params['domain']))  # noqa: E501
        if 'register_server' in params:
            form_params.append(('register_server', params['register_server']))  # noqa: E501
        if 'transport_protocol' in params:
            form_params.append(('transport_protocol', params['transport_protocol']))  # noqa: E501
        if 'proxy_server' in params:
            form_params.append(('proxy_server', params['proxy_server']))  # noqa: E501
        if 'register_server2' in params:
            form_params.append(('register_server2', params['register_server2']))  # noqa: E501
        if 'transport_protocol2' in params:
            form_params.append(('transport_protocol2', params['transport_protocol2']))  # noqa: E501
        if 'proxy_server2' in params:
            form_params.append(('proxy_server2', params['proxy_server2']))  # noqa: E501
        if 'register_server3' in params:
            form_params.append(('register_server3', params['register_server3']))  # noqa: E501
        if 'transport_protocol3' in params:
            form_params.append(('transport_protocol3', params['transport_protocol3']))  # noqa: E501
        if 'proxy_server3' in params:
            form_params.append(('proxy_server3', params['proxy_server3']))  # noqa: E501
        if 'registration_expire_time' in params:
            form_params.append(('registration_expire_time', params['registration_expire_time']))  # noqa: E501
        if 'user_name' in params:
            form_params.append(('user_name', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'authorization_name' in params:
            form_params.append(('authorization_name', params['authorization_name']))  # noqa: E501
        if 'user_email' in params:
            form_params.append(('user_email', params['user_email']))  # noqa: E501
        if 'voice_mail' in params:
            form_params.append(('voice_mail', params['voice_mail']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sip_phones', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sip_phone(self, phone_id, **kwargs):  # noqa: E501
        """Delete SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to delete a specific SIP phone on a Zoom account.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:read:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sip_phone(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_id: Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sip_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sip_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
            return data

    def delete_sip_phone_with_http_info(self, phone_id, **kwargs):  # noqa: E501
        """Delete SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to delete a specific SIP phone on a Zoom account.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:read:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sip_phone_with_http_info(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_id: Unique Identifier of the SIP Phone. It can be retrieved from the List SIP Phones API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sip_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_id' is set
        if ('phone_id' not in params or
                params['phone_id'] is None):
            raise ValueError("Missing the required parameter `phone_id` when calling `delete_sip_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_id' in params:
            path_params['phoneId'] = params['phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sip_phones/{phoneId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_sip_phones(self, **kwargs):  # noqa: E501
        """List SIP Phones  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to list SIP phones on an account.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sip_phones(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number: The current page number of returned records.
        :param str search_key: User name or email address of a user. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned.
        :param int page_size: The number of records returned within a single API call.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_sip_phones_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_sip_phones_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_sip_phones_with_http_info(self, **kwargs):  # noqa: E501
        """List SIP Phones  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to list SIP phones on an account.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:read:admin`<br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sip_phones_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_number: The current page number of returned records.
        :param str search_key: User name or email address of a user. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned.
        :param int page_size: The number of records returned within a single API call.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_number', 'search_key', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sip_phones" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if 'search_key' in params:
            query_params.append(('search_key', params['search_key']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sip_phones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_sip_phone(self, phone_id, **kwargs):  # noqa: E501
        """Update SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sip_phone(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_id: Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API. (required)
        :param Body2 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_sip_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_sip_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
            return data

    def update_sip_phone_with_http_info(self, phone_id, **kwargs):  # noqa: E501
        """Update SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sip_phone_with_http_info(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_id: Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API. (required)
        :param Body2 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sip_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_id' is set
        if ('phone_id' not in params or
                params['phone_id'] is None):
            raise ValueError("Missing the required parameter `phone_id` when calling `update_sip_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_id' in params:
            path_params['phoneId'] = params['phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'domain' in params:
            form_params.append(('domain', params['domain']))  # noqa: E501
        if 'register_server' in params:
            form_params.append(('register_server', params['register_server']))  # noqa: E501
        if 'transport_protocol' in params:
            form_params.append(('transport_protocol', params['transport_protocol']))  # noqa: E501
        if 'proxy_server' in params:
            form_params.append(('proxy_server', params['proxy_server']))  # noqa: E501
        if 'register_server2' in params:
            form_params.append(('register_server2', params['register_server2']))  # noqa: E501
        if 'transport_protocol2' in params:
            form_params.append(('transport_protocol2', params['transport_protocol2']))  # noqa: E501
        if 'proxy_server2' in params:
            form_params.append(('proxy_server2', params['proxy_server2']))  # noqa: E501
        if 'register_server3' in params:
            form_params.append(('register_server3', params['register_server3']))  # noqa: E501
        if 'transport_protocol3' in params:
            form_params.append(('transport_protocol3', params['transport_protocol3']))  # noqa: E501
        if 'proxy_server3' in params:
            form_params.append(('proxy_server3', params['proxy_server3']))  # noqa: E501
        if 'registration_expire_time' in params:
            form_params.append(('registration_expire_time', params['registration_expire_time']))  # noqa: E501
        if 'user_name' in params:
            form_params.append(('user_name', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'authorization_name' in params:
            form_params.append(('authorization_name', params['authorization_name']))  # noqa: E501
        if 'voice_mail' in params:
            form_params.append(('voice_mail', params['voice_mail']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sip_phones/{phoneId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_sip_phone(self, phone_id, **kwargs):  # noqa: E501
        """Update SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sip_phone(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_id: Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API. (required)
        :param str domain:
        :param str register_server:
        :param str transport_protocol:
        :param str proxy_server:
        :param str register_server2:
        :param str transport_protocol2:
        :param str proxy_server2:
        :param str register_server3:
        :param str transport_protocol3:
        :param str proxy_server3:
        :param int registration_expire_time:
        :param str user_name:
        :param str password:
        :param str authorization_name:
        :param str voice_mail:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_sip_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_sip_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
            return data

    def update_sip_phone_with_http_info(self, phone_id, **kwargs):  # noqa: E501
        """Update SIP Phone  # noqa: E501

        Zoom’s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.<br><br> **Prerequisites**: * Currently only supported on Cisco and Avaya PBX systems.  * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.<br> **Scope:** `sip_phone:write:admin` <br>   **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sip_phone_with_http_info(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_id: Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API. (required)
        :param str domain:
        :param str register_server:
        :param str transport_protocol:
        :param str proxy_server:
        :param str register_server2:
        :param str transport_protocol2:
        :param str proxy_server2:
        :param str register_server3:
        :param str transport_protocol3:
        :param str proxy_server3:
        :param int registration_expire_time:
        :param str user_name:
        :param str password:
        :param str authorization_name:
        :param str voice_mail:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_id', 'domain', 'register_server', 'transport_protocol', 'proxy_server', 'register_server2', 'transport_protocol2', 'proxy_server2', 'register_server3', 'transport_protocol3', 'proxy_server3', 'registration_expire_time', 'user_name', 'password', 'authorization_name', 'voice_mail']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sip_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_id' is set
        if ('phone_id' not in params or
                params['phone_id'] is None):
            raise ValueError("Missing the required parameter `phone_id` when calling `update_sip_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_id' in params:
            path_params['phoneId'] = params['phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'domain' in params:
            form_params.append(('domain', params['domain']))  # noqa: E501
        if 'register_server' in params:
            form_params.append(('register_server', params['register_server']))  # noqa: E501
        if 'transport_protocol' in params:
            form_params.append(('transport_protocol', params['transport_protocol']))  # noqa: E501
        if 'proxy_server' in params:
            form_params.append(('proxy_server', params['proxy_server']))  # noqa: E501
        if 'register_server2' in params:
            form_params.append(('register_server2', params['register_server2']))  # noqa: E501
        if 'transport_protocol2' in params:
            form_params.append(('transport_protocol2', params['transport_protocol2']))  # noqa: E501
        if 'proxy_server2' in params:
            form_params.append(('proxy_server2', params['proxy_server2']))  # noqa: E501
        if 'register_server3' in params:
            form_params.append(('register_server3', params['register_server3']))  # noqa: E501
        if 'transport_protocol3' in params:
            form_params.append(('transport_protocol3', params['transport_protocol3']))  # noqa: E501
        if 'proxy_server3' in params:
            form_params.append(('proxy_server3', params['proxy_server3']))  # noqa: E501
        if 'registration_expire_time' in params:
            form_params.append(('registration_expire_time', params['registration_expire_time']))  # noqa: E501
        if 'user_name' in params:
            form_params.append(('user_name', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'authorization_name' in params:
            form_params.append(('authorization_name', params['authorization_name']))  # noqa: E501
        if 'voice_mail' in params:
            form_params.append(('voice_mail', params['voice_mail']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sip_phones/{phoneId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
